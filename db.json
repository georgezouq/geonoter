{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/img/avatar.jpg","path":"img/avatar.jpg","modified":1,"renderable":0},{"_id":"source/img/avatar1.jpg","path":"img/avatar1.jpg","modified":1,"renderable":0},{"_id":"source/img/favicon.ico","path":"img/favicon.ico","modified":1,"renderable":0},{"_id":"source/img/icon_wechat.png","path":"img/icon_wechat.png","modified":1,"renderable":0},{"_id":"source/img/tag-bg.jpg","path":"img/tag-bg.jpg","modified":1,"renderable":0},{"_id":"source/img/404-bg.jpg","path":"img/404-bg.jpg","modified":1,"renderable":0},{"_id":"source/img/home-bg-o.jpg","path":"img/home-bg-o.jpg","modified":1,"renderable":0},{"_id":"themes/huxblog/source/css/hux-blog.css","path":"css/hux-blog.css","modified":1,"renderable":1},{"_id":"themes/huxblog/source/css/hux-blog.min.css","path":"css/hux-blog.min.css","modified":1,"renderable":1},{"_id":"themes/huxblog/source/css/syntax.styl","path":"css/syntax.styl","modified":1,"renderable":1},{"_id":"themes/huxblog/source/fonts/glyphicons-halflings-regular.eot","path":"fonts/glyphicons-halflings-regular.eot","modified":1,"renderable":1},{"_id":"themes/huxblog/source/fonts/glyphicons-halflings-regular.ttf","path":"fonts/glyphicons-halflings-regular.ttf","modified":1,"renderable":1},{"_id":"themes/huxblog/source/fonts/glyphicons-halflings-regular.woff","path":"fonts/glyphicons-halflings-regular.woff","modified":1,"renderable":1},{"_id":"themes/huxblog/source/fonts/glyphicons-halflings-regular.woff2","path":"fonts/glyphicons-halflings-regular.woff2","modified":1,"renderable":1},{"_id":"themes/huxblog/source/js/hux-blog.js","path":"js/hux-blog.js","modified":1,"renderable":1},{"_id":"themes/huxblog/source/js/bootstrap.min.js","path":"js/bootstrap.min.js","modified":1,"renderable":1},{"_id":"themes/huxblog/source/js/hux-blog.min.js","path":"js/hux-blog.min.js","modified":1,"renderable":1},{"_id":"themes/huxblog/source/js/jquery.nav.js","path":"js/jquery.nav.js","modified":1,"renderable":1},{"_id":"themes/huxblog/source/js/jquery.tagcloud.js","path":"js/jquery.tagcloud.js","modified":1,"renderable":1},{"_id":"source/img/home-bg1.jpg","path":"img/home-bg1.jpg","modified":1,"renderable":0},{"_id":"themes/huxblog/source/css/bootstrap.min.css","path":"css/bootstrap.min.css","modified":1,"renderable":1},{"_id":"themes/huxblog/source/fonts/glyphicons-halflings-regular.svg","path":"fonts/glyphicons-halflings-regular.svg","modified":1,"renderable":1},{"_id":"themes/huxblog/source/js/bootstrap.js","path":"js/bootstrap.js","modified":1,"renderable":1},{"_id":"themes/huxblog/source/js/jquery.min.js","path":"js/jquery.min.js","modified":1,"renderable":1},{"_id":"source/img/contact-bg.jpg","path":"img/contact-bg.jpg","modified":1,"renderable":0},{"_id":"themes/huxblog/source/css/bootstrap.css","path":"css/bootstrap.css","modified":1,"renderable":1},{"_id":"themes/huxblog/source/js/jquery.js","path":"js/jquery.js","modified":1,"renderable":1},{"_id":"source/img/about-bg.jpg","path":"img/about-bg.jpg","modified":1,"renderable":0},{"_id":"source/img/home-bg.jpg","path":"img/home-bg.jpg","modified":1,"renderable":0}],"Cache":[{"_id":"themes/huxblog/README.md","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1515364117000},{"_id":"source/.DS_Store","hash":"7ce212233d812bb4c040500fce5d3d576a63f367","modified":1515452218000},{"_id":"source/404.md","hash":"83c2c6d587beaa967a976e5969d60fa97fcdbe55","modified":1515364117000},{"_id":"themes/huxblog/LICENSE","hash":"2b209f06bebeb2a8c2b7e187e436f3e1e1fbc8a7","modified":1515364117000},{"_id":"themes/huxblog/layout/archive.ejs","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1515364117000},{"_id":"source/_posts/.DS_Store","hash":"f15e21c2f9094487b19c00c2032e940b4ce92cf8","modified":1515452292000},{"_id":"source/_posts/About ES6.markdown","hash":"cfef76f0775582d70de6331b815d29a49a1b1c5e","modified":1515364117000},{"_id":"source/_posts/AngularJS 1x Style Guide.markdown","hash":"0c9e65c8dabc51c7d7f6778e010ee36ac15c9ad7","modified":1515364117000},{"_id":"source/_posts/CAP-Consistency-Availability-Partition-Tolerance-理论学习.md","hash":"289bb21c2ed9101dab3a0d54caca9b5b5863fb4c","modified":1515364117000},{"_id":"source/_posts/CSS布局方式-之-圣杯布局和双飞翼布局.md","hash":"5f07659de53abea223e329a647db5f74cd86d21e","modified":1515364117000},{"_id":"source/_posts/Correlation-Analysis.md","hash":"a75f7ec739eb93886c526f87b2341e6ea1a2e918","modified":1515364117000},{"_id":"source/_posts/FP-Growth-Algorithm.md","hash":"013e34e63cdba2edcf6a4ea8a45078040b3b5887","modified":1515364117000},{"_id":"source/_posts/How use Markdown to write GitHub README.markdown","hash":"103c473afa64cd2af134fe6bd873054acd61f14b","modified":1515364117000},{"_id":"source/_posts/How-do-we-build-website-with-Memcache.md","hash":"b67331ca96619741e6422bd846506881b9740d42","modified":1515364117000},{"_id":"source/_posts/Less And Sass.markdown","hash":"8ac83bb9f14b4f9da7e41ef202fd0257e4fd898a","modified":1515364117000},{"_id":"source/_posts/MQTT Agreement Basics.markdown","hash":"15186b544aac6d3314937a3c67ee26d758727ab1","modified":1515364117000},{"_id":"source/_posts/MQTT Agreement Pushlet.markdown","hash":"5c11e679a2e8ddf82335272940ac2bad5eadb503","modified":1515364117000},{"_id":"source/_posts/NOTE-Task-Microtask-Queues-and-Schedules.md","hash":"10a9d1568cce2c92769a72670f892ec3fdf41ffb","modified":1515452334000},{"_id":"source/_posts/Python Crawler.markdown","hash":"1ef52e45190b036e405a4f145327bee98b9b63c6","modified":1515364117000},{"_id":"source/_posts/Python-Spider-Framework-Scrapy.md","hash":"d10119c626664450a4a474b35fd572d10cb03352","modified":1515364117000},{"_id":"source/_posts/Transitioning from server to client side web development with angular2.markdown","hash":"1a7bf1b436625f145813d689d9068b22de36be87","modified":1515364117000},{"_id":"source/_posts/js-module-7day.markdown","hash":"e342c66dbbb23412e0500d7f08a53f2395ea2d7e","modified":1515364117000},{"_id":"source/_posts/js-module-loader.markdown","hash":"49b958908759f04d7452a9d557861fd005a1a978","modified":1515364117000},{"_id":"source/_posts/基于Redis的三种分布式爬虫策略.md","hash":"b4d1f9a4c5df8debc960220c63362d207e74ad1e","modified":1515364117000},{"_id":"source/_posts/基于Tomcat-Nginx-Memcached-搭建集群HA架构.md","hash":"7be43ec538ccb2537777d418fcd3c943854d4f8b","modified":1515364117000},{"_id":"source/about/index.md","hash":"4aef799898ffc0724e092bb8add5d14a4fe5b14c","modified":1515364117000},{"_id":"source/img/avatar.jpg","hash":"6fbd5d3dfc83fd3b3820aebca030337b069059fc","modified":1515364117000},{"_id":"source/img/avatar1.jpg","hash":"49cfa597392c4a116584c07690efbbc06354acc7","modified":1515364117000},{"_id":"source/img/favicon.ico","hash":"a8ee7712f6560180efccb68546de6ea0d937fff3","modified":1515364117000},{"_id":"source/img/icon_wechat.png","hash":"7fdb00c9017236e05c1b3e6da38a2cc382fd69fa","modified":1515364117000},{"_id":"source/tags/index.md","hash":"0bc541f4c6a0f21bec67b6717ee86226f0eddf39","modified":1515364117000},{"_id":"themes/huxblog/languages_to_be_added/de.yml","hash":"424a9c1e6ab69334d7873f6574da02ca960aa572","modified":1515364117000},{"_id":"themes/huxblog/languages_to_be_added/default.yml","hash":"97326c9e6518d9f379778178b3b8f9a58434725d","modified":1515364117000},{"_id":"themes/huxblog/languages_to_be_added/en.yml","hash":"97326c9e6518d9f379778178b3b8f9a58434725d","modified":1515364117000},{"_id":"themes/huxblog/languages_to_be_added/es.yml","hash":"cb4eeca0ed3768a77e0cd216300f2b2549628b1b","modified":1515364117000},{"_id":"themes/huxblog/languages_to_be_added/no.yml","hash":"8ca475a3b4f8efe6603030f0013aae39668230e1","modified":1515364117000},{"_id":"themes/huxblog/languages_to_be_added/pl.yml","hash":"de7eb5850ae65ba7638e907c805fea90617a988c","modified":1515364117000},{"_id":"themes/huxblog/languages_to_be_added/ru.yml","hash":"42df7afeb7a35dc46d272b7f4fb880a9d9ebcaa5","modified":1515364117000},{"_id":"themes/huxblog/languages_to_be_added/zh-CN.yml","hash":"7bfcb0b8e97d7e5edcfca8ab26d55d9da2573c1c","modified":1515364117000},{"_id":"themes/huxblog/languages_to_be_added/zh-TW.yml","hash":"9acac6cc4f8002c3fa53ff69fb8cf66c915bd016","modified":1515364117000},{"_id":"themes/huxblog/layout/404.ejs","hash":"a4d73541a53e56b7dd46249c6d27cb59f4d97422","modified":1515364117000},{"_id":"themes/huxblog/layout/about.ejs","hash":"7f56c71383ef6c156b56d79b3984e07cc466606a","modified":1515364117000},{"_id":"themes/huxblog/layout/index.ejs","hash":"e25cbd9e381fa473198b8edfbd735048926d3812","modified":1515364117000},{"_id":"themes/huxblog/layout/keynote.ejs","hash":"16a4164c3d291131fb66078e8df93b31fe050040","modified":1515364117000},{"_id":"themes/huxblog/layout/layout.ejs","hash":"03e278a3b8bc4503183276b6130ac04a8d5b9865","modified":1515364117000},{"_id":"themes/huxblog/layout/page.ejs","hash":"bcda374e6d03f5fbb453349eb8f3af014528297d","modified":1515364117000},{"_id":"themes/huxblog/layout/post.ejs","hash":"fcde4c712aff62c61627231006a4b5b721c616e9","modified":1515364117000},{"_id":"themes/huxblog/layout/tags.ejs","hash":"a51bf2828af20939d702de1fdae067439a1153c0","modified":1515364117000},{"_id":"source/img/tag-bg.jpg","hash":"8844274a812ae19e8f2a3b7e4e465342e63eb852","modified":1515364117000},{"_id":"source/_posts/CAP-Consistency-Availability-Partition-Tolerance-理论学习/2.jpg","hash":"e0d374aa408ea58b715ba9d2e13265b059981883","modified":1515364117000},{"_id":"source/_posts/FP-Growth-Algorithm/1.jpg","hash":"5ba812b834cd64a75072ac796f685d3a7e0726c6","modified":1515364117000},{"_id":"source/_posts/FP-Growth-Algorithm/2.jpg","hash":"a7909de458156eb77372d203095ac1167d4c9152","modified":1515364117000},{"_id":"source/_posts/Python-Spider-Framework-Scrapy/01.jpg","hash":"5bb801d05064347756d9332bba74386571086fc0","modified":1515364117000},{"_id":"source/_posts/Python-Spider-Framework-Scrapy/02.png","hash":"2c8328e0f414b9bfbbd740bf9302fcb04f391d2b","modified":1515364117000},{"_id":"source/_posts/js-version/keep-calm-and-learn-javascript.png","hash":"49ea101b92ce5e136a19e6b11162f8f4126fe01f","modified":1515364117000},{"_id":"source/_posts/js-version/post-bg-js-version.jpg","hash":"1598a1180c491f36b9036415b622bd9e5ad5d3bc","modified":1515364117000},{"_id":"source/_posts/基于Redis的三种分布式爬虫策略/1.jpg","hash":"d5b598a61c1ad3f93e1281eb74209d6ffe784fee","modified":1515364117000},{"_id":"source/_posts/基于Redis的三种分布式爬虫策略/2.jpg","hash":"21986aaff1b5279906dcb3ba7adac76ced51d10a","modified":1515364117000},{"_id":"source/_posts/基于Redis的三种分布式爬虫策略/3.jpg","hash":"74a2774efbbab1c23f7732bed4231963b46b1fa5","modified":1515364117000},{"_id":"source/img/404-bg.jpg","hash":"68f7d525269a94287e0ad18713ae232fb59dcf71","modified":1515364117000},{"_id":"source/img/home-bg-o.jpg","hash":"990f6f9dd0ecb5348bfcc47305553d58c0d8f326","modified":1515364117000},{"_id":"themes/huxblog/layout/_partial/footer.ejs","hash":"4b859c2171054ecba1d70f0eabe09661a9f4f9eb","modified":1515364117000},{"_id":"themes/huxblog/layout/_partial/head.ejs","hash":"1affb397a5f08d4ab629c5431cce4df0c5480409","modified":1515364117000},{"_id":"themes/huxblog/layout/_partial/nav.ejs","hash":"4c905166c960852e9b9a3c9d5c680091e37b481f","modified":1515364117000},{"_id":"themes/huxblog/layout/_partial/pagination.ejs","hash":"557d6bb069a1d48af49ae912994653f44b32a570","modified":1515364117000},{"_id":"themes/huxblog/source/css/hux-blog.css","hash":"c1b0a32ad8075ac09d99fb4d64a9fbc84163abf8","modified":1515364117000},{"_id":"themes/huxblog/source/css/hux-blog.min.css","hash":"1baef04de262aeb7023d835429b49a805ac4ab40","modified":1515364117000},{"_id":"themes/huxblog/source/css/syntax.styl","hash":"f3f9ff0d1ebc4f7fa18d7e367b2ba2f0899adbd4","modified":1515364117000},{"_id":"themes/huxblog/source/fonts/glyphicons-halflings-regular.eot","hash":"86b6f62b7853e67d3e635f6512a5a5efc58ea3c3","modified":1515364117000},{"_id":"themes/huxblog/source/fonts/glyphicons-halflings-regular.ttf","hash":"44bc1850f570972267b169ae18f1cb06b611ffa2","modified":1515364117000},{"_id":"themes/huxblog/source/fonts/glyphicons-halflings-regular.woff","hash":"278e49a86e634da6f2a02f3b47dd9d2a8f26210f","modified":1515364117000},{"_id":"themes/huxblog/source/fonts/glyphicons-halflings-regular.woff2","hash":"ca35b697d99cae4d1b60f2d60fcd37771987eb07","modified":1515364117000},{"_id":"themes/huxblog/source/js/hux-blog.js","hash":"4b4d3c557405d04c3087d36c13e2834fe05c0f73","modified":1515364117000},{"_id":"themes/huxblog/source/js/bootstrap.min.js","hash":"b3f2ef9f985e7906c9360756b73cd64bf7733647","modified":1515364117000},{"_id":"themes/huxblog/source/js/hux-blog.min.js","hash":"1563e7f70550ac6b30803d6f449719b853200e35","modified":1515364117000},{"_id":"themes/huxblog/source/js/jquery.nav.js","hash":"ef2160a456176a4d09cc0b95d52b27dfbbadf2d8","modified":1515364117000},{"_id":"themes/huxblog/source/js/jquery.tagcloud.js","hash":"4e5fd0b07f3bd935f2e603710447e039e3677211","modified":1515364117000},{"_id":"source/_posts/Hello-World-MongoDB/31.jpg","hash":"02ddd680ed72f3336d3548f8ffcbec72e8b940dc","modified":1515364117000},{"_id":"source/_posts/js-module-loader/post-bg-js-module.jpg","hash":"4a43bfa6b69c79a6ef90bd852fe5756d241733cd","modified":1515364117000},{"_id":"source/_posts/js-version/javascript-java.jpg","hash":"881e35e241a8be40f3c4e3a6f57d5402247c1eb3","modified":1515364117000},{"_id":"source/_posts/unix-linux-note/post-bg-unix-linux.jpg","hash":"e8f3739cb78ea6d1645665d07ebdb79881774fb6","modified":1515364117000},{"_id":"source/img/home-bg1.jpg","hash":"a191201c3a98728e6ea66d6827df827ecfcc9d33","modified":1515364117000},{"_id":"themes/huxblog/source/css/bootstrap.min.css","hash":"973e37a8502921d56bc02bb55321f45b072b6f71","modified":1515364117000},{"_id":"themes/huxblog/source/fonts/glyphicons-halflings-regular.svg","hash":"de51a8494180a6db074af2dee2383f0a363c5b08","modified":1515364117000},{"_id":"themes/huxblog/source/js/bootstrap.js","hash":"f8752e9ae24daec0a0baffd7819122f8c6fd9103","modified":1515364117000},{"_id":"themes/huxblog/source/js/jquery.min.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1515364117000},{"_id":"source/_posts/CAP-Consistency-Availability-Partition-Tolerance-理论学习/1.png","hash":"f074f79b881709db8f978b2f094cc08d07bfe609","modified":1515364117000},{"_id":"source/img/contact-bg.jpg","hash":"6af63305c923899017e727b5ca968a2703bc08cf","modified":1515364117000},{"_id":"themes/huxblog/source/css/bootstrap.css","hash":"41c54bf695145ae0b4d9020a1da308ceb05dcaf3","modified":1515364117000},{"_id":"source/_posts/NOTE-Task-Microtask-Queues-and-Schedules/01.png","hash":"1553b4bea9281c0932ccb065d5315df14042031f","modified":1515398613000},{"_id":"source/_posts/NOTE-Task-Microtask-Queues-and-Schedules/02.png","hash":"3268f7cf55a35367b4807b607bfc95f9eb75206b","modified":1515448093000},{"_id":"source/_posts/hello-2015/post-bg-2015.jpg","hash":"7118d1af8ac638dc55ee63d0b17e704811c6a37a","modified":1515364117000},{"_id":"themes/huxblog/source/js/jquery.js","hash":"1852661bd11a09ca9b9cb63d1aa6ff390fffaf4e","modified":1515364117000},{"_id":"source/img/about-bg.jpg","hash":"b5814b2d10eb38dfda0072365567f3823bc34aba","modified":1515364117000},{"_id":"source/img/home-bg.jpg","hash":"4cd2b76820a9a9fa3d0d9fd6d96312a3afd5fbf6","modified":1515364117000},{"_id":"public/404.html","hash":"6f8a2f27ccc481f8a372ef44bb0a491886675e03","modified":1515538960473},{"_id":"public/archives/index.html","hash":"3a87d1673f280064c6d5e9fa3fe43bd574310303","modified":1515538960473},{"_id":"public/archives/page/2/index.html","hash":"45034417be17349f3d6f0e36161ff68e4f70a1b8","modified":1515538960474},{"_id":"public/archives/2016/index.html","hash":"f874a5e52cdee7666fc677c03ee4d74d903f6895","modified":1515538960474},{"_id":"public/archives/2016/page/2/index.html","hash":"ad42152f2d36f47327ee9ef9b389e4957054205f","modified":1515538960474},{"_id":"public/archives/2016/06/index.html","hash":"603af764c18e05b87149abb672637781ca5fc142","modified":1515538960474},{"_id":"public/archives/2016/06/page/2/index.html","hash":"ced5dd51bec6b2b093ef88c8f445c0c00992094a","modified":1515538960475},{"_id":"public/archives/2016/07/index.html","hash":"64809a40c7bab61117df7144206f51f7d25bb866","modified":1515538960475},{"_id":"public/archives/2018/index.html","hash":"aa5e4628825b039afe5ebd49c71f5085aa48cf6e","modified":1515538960476},{"_id":"public/archives/2018/01/index.html","hash":"383752bdd4b4b30752bc520d784820f64e1ac2e1","modified":1515538960476},{"_id":"public/tags/ES6/index.html","hash":"b6d9073f26558a98c76d7d3b3efe94181c347427","modified":1515538960476},{"_id":"public/tags/Angular/index.html","hash":"28a0692893503fad38430f2e9fbeac72ca2233ff","modified":1515538960476},{"_id":"public/tags/HTML布局/index.html","hash":"c6706102fdf5768380cc31d4b9da32f7d761a41a","modified":1515538960476},{"_id":"public/tags/前端/index.html","hash":"5df27aae9efa1187d7a07a2ff795448fdc065822","modified":1515538960476},{"_id":"public/tags/Analysis/index.html","hash":"8be974407e192edf560b0a19b432a849a9bca98b","modified":1515538960476},{"_id":"public/tags/工具使用/index.html","hash":"ff442b306252dc7a4363662a591002640b52c667","modified":1515538960476},{"_id":"public/tags/前端开发/index.html","hash":"b2733a39d493525060a6fe985711d06e29d48412","modified":1515538960476},{"_id":"public/tags/CSS/index.html","hash":"7889b0053bf91fd79b44890ccbddd661d3e164ee","modified":1515538960477},{"_id":"public/tags/Java/index.html","hash":"31dc9cf89e5fe078045741b6f31ca044ac3f4aee","modified":1515538960477},{"_id":"public/tags/推送/index.html","hash":"8e0691ae70d52d65ef085333d358af67b728d5f8","modified":1515538960477},{"_id":"public/tags/数据/index.html","hash":"5f0e2da1159edbe6b31fb3103d106955a3d9d641","modified":1515538960477},{"_id":"public/tags/Python/index.html","hash":"14547f9b0f4c0cdbfdd34a8d97e4deb508488f85","modified":1515538960477},{"_id":"public/tags/Spider/index.html","hash":"ab9ac13027f09406e2f7cd849575ae5b06476b0c","modified":1515538960477},{"_id":"public/tags/Angular2/index.html","hash":"673b7883fba6072168189172f3eb8242cbb93f35","modified":1515538960477},{"_id":"public/tags/JavaScript/index.html","hash":"7b4a680f98e66c0b2eacfc7e25b18156066d2560","modified":1515538960477},{"_id":"public/tags/爬虫/index.html","hash":"6b06165a0eed768be93e0a8b35b240768d056f8b","modified":1515538960478},{"_id":"public/tags/Redis/index.html","hash":"702990ff15b149121793ae1b81b259beb0caf2ff","modified":1515538960478},{"_id":"public/tags/Nginx/index.html","hash":"a34000475877ed4ef16f75d2a519d3585e995ad8","modified":1515538960479},{"_id":"public/tags/Memcached/index.html","hash":"0d0bf3345ad5668cbbb469ee4246b09d19b5e485","modified":1515538960479},{"_id":"public/tags/集群/index.html","hash":"6c53ba49003333e2ae0a2bfc04a0aa92e10e4a6f","modified":1515538960479},{"_id":"public/tags/index.html","hash":"1ce09c16bcdb55d497002b6518fa15f96b4fc199","modified":1515538960479},{"_id":"public/2018/01/09/NOTE-Task-Microtask-Queues-and-Schedules/index.html","hash":"0f6c594dda067ad803542b89e44e87a96042116c","modified":1515538960479},{"_id":"public/2016/07/06/How-do-we-build-website-with-Memcache/index.html","hash":"ffe08788cbed6aa2fba81dff528af35d336d453a","modified":1515538960479},{"_id":"public/2016/07/13/CAP-Consistency-Availability-Partition-Tolerance-理论学习/index.html","hash":"368098b1154e986dcead4248e36a8c28dbf29f3e","modified":1515538960479},{"_id":"public/2016/07/05/基于Tomcat-Nginx-Memcached-搭建集群HA架构/index.html","hash":"35b0b40ed5355916b133302a015879afb66acd87","modified":1515538960479},{"_id":"public/2016/06/27/Correlation-Analysis/index.html","hash":"6c056eb2d628bd2c398c4ca1b515c189d1167a3f","modified":1515538960479},{"_id":"public/2016/06/27/FP-Growth-Algorithm/index.html","hash":"af58278b8cd08a261920815778c6b9b703494810","modified":1515538960480},{"_id":"public/2016/06/27/How use Markdown to write GitHub README/index.html","hash":"0f5c344e727a838561638d91d0f02a73f2d3fc9f","modified":1515538960480},{"_id":"public/2016/06/27/Less And Sass/index.html","hash":"c3616fc1023a2c3ca4c0235d117ac7382703642e","modified":1515538960480},{"_id":"public/2016/06/27/CSS布局方式-之-圣杯布局和双飞翼布局/index.html","hash":"c0164d6556224141b35e49772437625cc0e14a67","modified":1515538960480},{"_id":"public/2016/06/27/AngularJS 1x Style Guide/index.html","hash":"9df22f03d64ba798cfca7c3ca938c46acc3b16cc","modified":1515538960480},{"_id":"public/2016/06/27/MQTT Agreement Pushlet/index.html","hash":"4e93d31c6c4ce8de10e4bce82064359bb91dc48b","modified":1515538960480},{"_id":"public/2016/06/27/About ES6/index.html","hash":"cdde8c8a73e2907d33be0165108cf748d3081ce6","modified":1515538960480},{"_id":"public/2016/06/27/Python Crawler/index.html","hash":"493dcdd04a140290a639c819675b9d4a333c3b95","modified":1515538960480},{"_id":"public/2016/06/27/Python-Spider-Framework-Scrapy/index.html","hash":"4adc9a274e8c7edd58c36e686dd8db4cf94ba318","modified":1515538960480},{"_id":"public/2016/06/27/Transitioning from server to client side web development with angular2/index.html","hash":"048992abab3c28ad279c13b75e95f0e812420ae6","modified":1515538960480},{"_id":"public/2016/06/27/js-module-7day/index.html","hash":"141f0bcaa88dfc90927fa0c28cbc792c2deb492e","modified":1515538960480},{"_id":"public/2016/06/27/js-module-loader/index.html","hash":"ecb0d2211440813b87f263182a256cfe0d811581","modified":1515538960480},{"_id":"public/2016/06/27/基于Redis的三种分布式爬虫策略/index.html","hash":"115303e6b762e2d04dc20d6a878a6cc98b41da40","modified":1515538960480},{"_id":"public/2016/06/27/MQTT Agreement Basics/index.html","hash":"4bf52f9aba46afdbc8cc4f721de0f517794b7863","modified":1515538960481},{"_id":"public/about/index.html","hash":"32772fdfeb62af49d0f01b025cfe04e2bfc51d2c","modified":1515538960481},{"_id":"public/index.html","hash":"b498b38e0232030f82c5c47274cb1a26c16f2e7f","modified":1515538960481},{"_id":"public/page/2/index.html","hash":"26275422f307488cd9f88afcdf1a0cba74ef205b","modified":1515538960481},{"_id":"public/img/avatar.jpg","hash":"6fbd5d3dfc83fd3b3820aebca030337b069059fc","modified":1515538960487},{"_id":"public/img/avatar1.jpg","hash":"49cfa597392c4a116584c07690efbbc06354acc7","modified":1515538960487},{"_id":"public/img/favicon.ico","hash":"a8ee7712f6560180efccb68546de6ea0d937fff3","modified":1515538960488},{"_id":"public/img/icon_wechat.png","hash":"7fdb00c9017236e05c1b3e6da38a2cc382fd69fa","modified":1515538960488},{"_id":"public/fonts/glyphicons-halflings-regular.eot","hash":"86b6f62b7853e67d3e635f6512a5a5efc58ea3c3","modified":1515538960488},{"_id":"public/fonts/glyphicons-halflings-regular.woff","hash":"278e49a86e634da6f2a02f3b47dd9d2a8f26210f","modified":1515538960488},{"_id":"public/fonts/glyphicons-halflings-regular.ttf","hash":"44bc1850f570972267b169ae18f1cb06b611ffa2","modified":1515538960488},{"_id":"public/fonts/glyphicons-halflings-regular.woff2","hash":"ca35b697d99cae4d1b60f2d60fcd37771987eb07","modified":1515538960488},{"_id":"public/2016/07/13/CAP-Consistency-Availability-Partition-Tolerance-理论学习/2.jpg","hash":"e0d374aa408ea58b715ba9d2e13265b059981883","modified":1515538960488},{"_id":"public/2016/06/27/FP-Growth-Algorithm/1.jpg","hash":"5ba812b834cd64a75072ac796f685d3a7e0726c6","modified":1515538960488},{"_id":"public/2016/06/27/FP-Growth-Algorithm/2.jpg","hash":"a7909de458156eb77372d203095ac1167d4c9152","modified":1515538960488},{"_id":"public/2016/06/27/Python-Spider-Framework-Scrapy/01.jpg","hash":"5bb801d05064347756d9332bba74386571086fc0","modified":1515538960488},{"_id":"public/2016/06/27/基于Redis的三种分布式爬虫策略/2.jpg","hash":"21986aaff1b5279906dcb3ba7adac76ced51d10a","modified":1515538960488},{"_id":"public/2016/06/27/基于Redis的三种分布式爬虫策略/1.jpg","hash":"d5b598a61c1ad3f93e1281eb74209d6ffe784fee","modified":1515538960488},{"_id":"public/2016/06/27/基于Redis的三种分布式爬虫策略/3.jpg","hash":"74a2774efbbab1c23f7732bed4231963b46b1fa5","modified":1515538960488},{"_id":"public/2016/06/27/Python-Spider-Framework-Scrapy/02.png","hash":"2c8328e0f414b9bfbbd740bf9302fcb04f391d2b","modified":1515538960488},{"_id":"public/img/tag-bg.jpg","hash":"8844274a812ae19e8f2a3b7e4e465342e63eb852","modified":1515538960606},{"_id":"public/fonts/glyphicons-halflings-regular.svg","hash":"de51a8494180a6db074af2dee2383f0a363c5b08","modified":1515538960606},{"_id":"public/2016/06/27/js-module-loader/post-bg-js-module.jpg","hash":"4a43bfa6b69c79a6ef90bd852fe5756d241733cd","modified":1515538960608},{"_id":"public/css/syntax.css","hash":"4616879fec214c9cc4f5835615348f0bbeabf2a9","modified":1515538960613},{"_id":"public/js/hux-blog.js","hash":"4b4d3c557405d04c3087d36c13e2834fe05c0f73","modified":1515538960613},{"_id":"public/js/hux-blog.min.js","hash":"1563e7f70550ac6b30803d6f449719b853200e35","modified":1515538960613},{"_id":"public/js/jquery.nav.js","hash":"ef2160a456176a4d09cc0b95d52b27dfbbadf2d8","modified":1515538960613},{"_id":"public/js/jquery.tagcloud.js","hash":"4e5fd0b07f3bd935f2e603710447e039e3677211","modified":1515538960613},{"_id":"public/css/hux-blog.css","hash":"c1b0a32ad8075ac09d99fb4d64a9fbc84163abf8","modified":1515538960613},{"_id":"public/css/hux-blog.min.css","hash":"1baef04de262aeb7023d835429b49a805ac4ab40","modified":1515538960613},{"_id":"public/js/bootstrap.min.js","hash":"b3f2ef9f985e7906c9360756b73cd64bf7733647","modified":1515538960613},{"_id":"public/css/bootstrap.min.css","hash":"973e37a8502921d56bc02bb55321f45b072b6f71","modified":1515538960613},{"_id":"public/js/bootstrap.js","hash":"f8752e9ae24daec0a0baffd7819122f8c6fd9103","modified":1515538960614},{"_id":"public/js/jquery.min.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1515538960614},{"_id":"public/css/bootstrap.css","hash":"41c54bf695145ae0b4d9020a1da308ceb05dcaf3","modified":1515538960614},{"_id":"public/js/jquery.js","hash":"1852661bd11a09ca9b9cb63d1aa6ff390fffaf4e","modified":1515538960614},{"_id":"public/img/404-bg.jpg","hash":"68f7d525269a94287e0ad18713ae232fb59dcf71","modified":1515538960614},{"_id":"public/img/home-bg-o.jpg","hash":"990f6f9dd0ecb5348bfcc47305553d58c0d8f326","modified":1515538960614},{"_id":"public/2016/07/13/CAP-Consistency-Availability-Partition-Tolerance-理论学习/1.png","hash":"f074f79b881709db8f978b2f094cc08d07bfe609","modified":1515538960614},{"_id":"public/img/home-bg1.jpg","hash":"a191201c3a98728e6ea66d6827df827ecfcc9d33","modified":1515538960619},{"_id":"public/2018/01/09/NOTE-Task-Microtask-Queues-and-Schedules/02.png","hash":"3268f7cf55a35367b4807b607bfc95f9eb75206b","modified":1515538960619},{"_id":"public/2018/01/09/NOTE-Task-Microtask-Queues-and-Schedules/01.png","hash":"1553b4bea9281c0932ccb065d5315df14042031f","modified":1515538960619},{"_id":"public/img/contact-bg.jpg","hash":"6af63305c923899017e727b5ca968a2703bc08cf","modified":1515538960629},{"_id":"public/img/about-bg.jpg","hash":"b5814b2d10eb38dfda0072365567f3823bc34aba","modified":1515538960657},{"_id":"public/img/home-bg.jpg","hash":"4cd2b76820a9a9fa3d0d9fd6d96312a3afd5fbf6","modified":1515538960676}],"Category":[],"Data":[],"Page":[{"layout":"404","description":"你来到了没有知识的荒原 :(","header-img":"img/404-bg.jpg","_content":"","source":"404.md","raw":"---\nlayout: 404\ndescription: \"你来到了没有知识的荒原 :(\"\nheader-img: \"img/404-bg.jpg\"\n---\n","date":"2018-01-07T22:28:37.000Z","updated":"2018-01-07T22:28:37.000Z","path":"404.html","title":"","comments":1,"_id":"cjc88rlf90000a1jgeo92qjdm","content":"","site":{"data":{}},"excerpt":"","more":""},{"layout":"about","title":"About","date":"2016-04-20T20:48:33.000Z","description":"Hey, this is Kaijun.","header-img":"img/about-bg.jpg","_content":"\n\n>写写代码，做做设计，看看产品。\n>世界那么大，多玩玩看看。\n\n9月21日上午，阳光明媚，鲜花斗艳。帕洛阿尔托苹果店里欢声笑语，人头攒动。苹果公司首席执行官蒂姆·库克先生在店长欧阳猛南陪同下，不远千米，深入到一线店面，为那里的员工带去节曰的问候和良好的祝愿。<br><br>“果粉们，你们辛苦了，我代表某果公司，祝你们身体健康，生活幸福，工作成功！”库克亲切慰问广大员工和顾客，并就iOS7、iPhone 5S和iPhone 5C的销售状况进行调研。 <br><br>“您现在每月工资有多少？肾5S拿到了吗？”在店里，库克关切地向果粉们问起这一问题。当听说果粉们排到了5S，库克满意地连连点头。接着他指出，近年来苹果事业发展取得巨大成就，特别是iPhone影响剧增，老百姓对iOS满意度逐步提高，在这个转变过程中，果粉的辛勤工作功不可没。<br><br>库克看到一个中国小朋友在排队买iPhone 5S，亲切的问：“5288元一台能承受不？”小朋友回答到：“能！”当得知这位小朋友卖了一个肾来买iPhone 5S时，库克叮嘱道：“在支持苹果的同时，也要爱护身体。”<br><br>库克与购买苹果手机的果粉们兴致勃勃地参观了苹果专卖店，和员工们拉了拉家常，并饶有兴趣地玩了四盘切西瓜游戏，与普通员工同乐。<br><br>在交谈中，库克多次关心地强调：“有了iPhone 5C，就不卖iPhone 5了。”并对顾客说：“好好休息，身体是革命的本钱嘛！”会谈始终在亲切友好的气氛中进行。<br><br>顾客们就库克的讲话达成了广泛的共识，并承认世界上只有iOS最流畅，要紧紧的团结在以库克先生为首席执行官的苹果公司集体周围，一心一意抓学习，聚精会神谋发展。<br>\n<br>帕洛阿尔托苹果专卖店当日原则通过《蒂姆·库克首席执行官在加州新苹果店的讲话纪要》，并下发各分店认真学习、研讨。\n\n<p style=\"text-align:right;\">\n    —— <a href=\"http://www.zhihu.com/question/19687065\">李书航 － 什么是「共产中文腔调」？ </a>\n</p>","source":"about/index.md","raw":"---\nlayout: \"about\"\ntitle: \"About\"\ndate: 2016-04-21 04:48:33\ndescription: \"Hey, this is Kaijun.\"\nheader-img: \"img/about-bg.jpg\"\n---\n\n\n>写写代码，做做设计，看看产品。\n>世界那么大，多玩玩看看。\n\n9月21日上午，阳光明媚，鲜花斗艳。帕洛阿尔托苹果店里欢声笑语，人头攒动。苹果公司首席执行官蒂姆·库克先生在店长欧阳猛南陪同下，不远千米，深入到一线店面，为那里的员工带去节曰的问候和良好的祝愿。<br><br>“果粉们，你们辛苦了，我代表某果公司，祝你们身体健康，生活幸福，工作成功！”库克亲切慰问广大员工和顾客，并就iOS7、iPhone 5S和iPhone 5C的销售状况进行调研。 <br><br>“您现在每月工资有多少？肾5S拿到了吗？”在店里，库克关切地向果粉们问起这一问题。当听说果粉们排到了5S，库克满意地连连点头。接着他指出，近年来苹果事业发展取得巨大成就，特别是iPhone影响剧增，老百姓对iOS满意度逐步提高，在这个转变过程中，果粉的辛勤工作功不可没。<br><br>库克看到一个中国小朋友在排队买iPhone 5S，亲切的问：“5288元一台能承受不？”小朋友回答到：“能！”当得知这位小朋友卖了一个肾来买iPhone 5S时，库克叮嘱道：“在支持苹果的同时，也要爱护身体。”<br><br>库克与购买苹果手机的果粉们兴致勃勃地参观了苹果专卖店，和员工们拉了拉家常，并饶有兴趣地玩了四盘切西瓜游戏，与普通员工同乐。<br><br>在交谈中，库克多次关心地强调：“有了iPhone 5C，就不卖iPhone 5了。”并对顾客说：“好好休息，身体是革命的本钱嘛！”会谈始终在亲切友好的气氛中进行。<br><br>顾客们就库克的讲话达成了广泛的共识，并承认世界上只有iOS最流畅，要紧紧的团结在以库克先生为首席执行官的苹果公司集体周围，一心一意抓学习，聚精会神谋发展。<br>\n<br>帕洛阿尔托苹果专卖店当日原则通过《蒂姆·库克首席执行官在加州新苹果店的讲话纪要》，并下发各分店认真学习、研讨。\n\n<p style=\"text-align:right;\">\n    —— <a href=\"http://www.zhihu.com/question/19687065\">李书航 － 什么是「共产中文腔调」？ </a>\n</p>","updated":"2018-01-07T22:28:37.000Z","path":"about/index.html","comments":1,"_id":"cjc88rlge0002a1jg1lm2tt3f","content":"<blockquote>\n<p>写写代码，做做设计，看看产品。<br>世界那么大，多玩玩看看。</p>\n</blockquote>\n<p>9月21日上午，阳光明媚，鲜花斗艳。帕洛阿尔托苹果店里欢声笑语，人头攒动。苹果公司首席执行官蒂姆·库克先生在店长欧阳猛南陪同下，不远千米，深入到一线店面，为那里的员工带去节曰的问候和良好的祝愿。<br><br>“果粉们，你们辛苦了，我代表某果公司，祝你们身体健康，生活幸福，工作成功！”库克亲切慰问广大员工和顾客，并就iOS7、iPhone 5S和iPhone 5C的销售状况进行调研。 <br><br>“您现在每月工资有多少？肾5S拿到了吗？”在店里，库克关切地向果粉们问起这一问题。当听说果粉们排到了5S，库克满意地连连点头。接着他指出，近年来苹果事业发展取得巨大成就，特别是iPhone影响剧增，老百姓对iOS满意度逐步提高，在这个转变过程中，果粉的辛勤工作功不可没。<br><br>库克看到一个中国小朋友在排队买iPhone 5S，亲切的问：“5288元一台能承受不？”小朋友回答到：“能！”当得知这位小朋友卖了一个肾来买iPhone 5S时，库克叮嘱道：“在支持苹果的同时，也要爱护身体。”<br><br>库克与购买苹果手机的果粉们兴致勃勃地参观了苹果专卖店，和员工们拉了拉家常，并饶有兴趣地玩了四盘切西瓜游戏，与普通员工同乐。<br><br>在交谈中，库克多次关心地强调：“有了iPhone 5C，就不卖iPhone 5了。”并对顾客说：“好好休息，身体是革命的本钱嘛！”会谈始终在亲切友好的气氛中进行。<br><br>顾客们就库克的讲话达成了广泛的共识，并承认世界上只有iOS最流畅，要紧紧的团结在以库克先生为首席执行官的苹果公司集体周围，一心一意抓学习，聚精会神谋发展。<br><br><br>帕洛阿尔托苹果专卖店当日原则通过《蒂姆·库克首席执行官在加州新苹果店的讲话纪要》，并下发各分店认真学习、研讨。</p>\n<p style=\"text-align:right;\"><br>    —— <a href=\"http://www.zhihu.com/question/19687065\" target=\"_blank\" rel=\"noopener\">李书航 － 什么是「共产中文腔调」？ </a><br></p>","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>写写代码，做做设计，看看产品。<br>世界那么大，多玩玩看看。</p>\n</blockquote>\n<p>9月21日上午，阳光明媚，鲜花斗艳。帕洛阿尔托苹果店里欢声笑语，人头攒动。苹果公司首席执行官蒂姆·库克先生在店长欧阳猛南陪同下，不远千米，深入到一线店面，为那里的员工带去节曰的问候和良好的祝愿。<br><br>“果粉们，你们辛苦了，我代表某果公司，祝你们身体健康，生活幸福，工作成功！”库克亲切慰问广大员工和顾客，并就iOS7、iPhone 5S和iPhone 5C的销售状况进行调研。 <br><br>“您现在每月工资有多少？肾5S拿到了吗？”在店里，库克关切地向果粉们问起这一问题。当听说果粉们排到了5S，库克满意地连连点头。接着他指出，近年来苹果事业发展取得巨大成就，特别是iPhone影响剧增，老百姓对iOS满意度逐步提高，在这个转变过程中，果粉的辛勤工作功不可没。<br><br>库克看到一个中国小朋友在排队买iPhone 5S，亲切的问：“5288元一台能承受不？”小朋友回答到：“能！”当得知这位小朋友卖了一个肾来买iPhone 5S时，库克叮嘱道：“在支持苹果的同时，也要爱护身体。”<br><br>库克与购买苹果手机的果粉们兴致勃勃地参观了苹果专卖店，和员工们拉了拉家常，并饶有兴趣地玩了四盘切西瓜游戏，与普通员工同乐。<br><br>在交谈中，库克多次关心地强调：“有了iPhone 5C，就不卖iPhone 5了。”并对顾客说：“好好休息，身体是革命的本钱嘛！”会谈始终在亲切友好的气氛中进行。<br><br>顾客们就库克的讲话达成了广泛的共识，并承认世界上只有iOS最流畅，要紧紧的团结在以库克先生为首席执行官的苹果公司集体周围，一心一意抓学习，聚精会神谋发展。<br><br><br>帕洛阿尔托苹果专卖店当日原则通过《蒂姆·库克首席执行官在加州新苹果店的讲话纪要》，并下发各分店认真学习、研讨。</p>\n<p style=\"text-align:right;\"><br>    —— <a href=\"http://www.zhihu.com/question/19687065\" target=\"_blank\" rel=\"noopener\">李书航 － 什么是「共产中文腔调」？ </a><br></p>"},{"layout":"tags","title":"Tags","description":"Hey, this is Tags.","header-img":"img/tag-bg.jpg","_content":"","source":"tags/index.md","raw":"---\nlayout: \"tags\"\ntitle: \"Tags\"\ndescription: \"Hey, this is Tags.\"\nheader-img: \"img/tag-bg.jpg\"\n---\n","date":"2018-01-07T22:28:37.000Z","updated":"2018-01-07T22:28:37.000Z","path":"tags/index.html","comments":1,"_id":"cjc88rlgg0004a1jg8bpas73m","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"layout":"keynote","title":"ES6 Getting Start - Commend","subtitle":"Keynote: Commend with ES6","iframe":null,"date":"2016-06-27T01:27:35.000Z","author":"","header-img":"post-bg-js-version.jpg","_content":"# ES6 部分方法点评\n\n## 箭头函数(Arrow Functions)\n\n  箭头函数时ES6的语法糖之一:\n\n```javascript\n//ES5\nvar selected = allJobs.filter(function(job){\n  return job.isSelected();\n});\n\n//ES6\nvar selected = allJobs.filter(job => job.isSelected());\n\n```\n\n  多行方法体的方式:\n\n```javascript\n//ES5\n$('#confetti-btn').click(function(event){\n  playTrumpet();\n  fireConfettiCannon();\n});\n\n//ES6\n$(\"#confetti-btn\").click(event => {\n  playTrumpet();\n  fireConfettiCannon();\n})\n```\n\n语法大体是这样的:\n\n    ([函数的形参,多个参数则以逗号分隔]) => [函数返回的值/表达式]\n\n此外，还有最重要的一点，箭头函数并没有自己的`this`值，箭头函数内的`this`值继承自外围作用域。\n\n```javascript\n  {\n    add: function(piece){},\n    ...\n    addAll:function addAll(prieces){\n      var self = this;\n      _.each(pieces,function(price){\n        self.add(piece);\n      });\n    }\n\n  }\n\n  //ES6\n  {\n    add:function(piece){},\n    ...\n    addAll:function addAll(pieces){\n      _.each(pieces,piece => this.add(price));\n    },\n    ...\n  }\n\n```\n\n## LET\n\nES6 `let`关键字的出现意味着JavaScript迎来了块级作用域({},for,if),可以有效的防止临时变量污染到外层变量:\n\n```javascript\n  function f1(){\n    let n = 5;\n    if(true){\n      let n = 10;\n    }\n    console.log(n); //5\n  }\n\n```\n\n## CONST\n\n  `const`用来定义常量，一旦定义了常量就不可修改。\n\n## DESTRUCTURING\n\n  destructuring 解构，ES6允许按照一定的模式，从数组和对象中提取值。对变量进行赋值，这成为解构(Destructuring):\n\n```javascript\n'use strict';\n\n//对数组的解构赋值\nlet [foo,[[bar],baz]] = [1,[[2],3]];\nconsole.log(foo); //1\nconsole.log(bar); //2\nconsole.log(baz); //3\n\n//对象的解构赋值\nvar {foo,bar} = {foo:\"aaa\",bar:\"bbb\"};\nconsole.log(foo); //\"aaa\"\nconsole.log(bar); //\"bbb\"\n\n//字符串的解构赋值\nconst [a,b,v,d,e] = \"hello\";\nconsole.log(a+b+c+d+e); //'hello'\n\n\n```\n\n跟箭头函数一样，这也是一个全新的语法糖，它的用处有很对，例如在我们封装参数的时候：\n\n```javascript\n// ES5 二逼青年写法\nfunction study(id, name, sex, grade, nickname, age, address) {\n    console.log(id);\n    console.log(name);\n    console.log(sex);\n    console.log(grade);\n    console.log(nickname);\n    console.log(age);\n    console.log(address);\n}\n// ES5 正常青年写法\nfunction study(params) {\n    console.log(params.id);\n    console.log(params.name);\n    console.log(params.sex);\n    console.log(params.grade);\n    console.log(params.nickname);\n    console.log(params.age);\n    console.log(params.address);\n}\n```\n\n```javascript\n//ES6\nfunction study({id, name, sex, grade, nickname, age, address}) {\n    console.log(id);\n    console.log(name);\n    console.log(sex);\n    console.log(grade);\n    console.log(nickname);\n    console.log(age);\n    console.log(address);    \n}\nstudy({\n    id: 1,\n    name: '林有德',\n    sex: '男',\n    grade: '一年级',\n    nickname: '布莱德',\n    age: 12,\n    address: '木马号'\n});\n```\n","source":"_posts/About ES6.markdown","raw":"---\nlayout:     keynote\ntitle:      \"ES6 Getting Start - Commend\"\nsubtitle:   \"Keynote: Commend with ES6\"\niframe:     \ndate: 2016-06-27 09:27:35\nauthor:     \"\"\nheader-img: \"post-bg-js-version.jpg\"\ntags:\n    - ES6\n---\n# ES6 部分方法点评\n\n## 箭头函数(Arrow Functions)\n\n  箭头函数时ES6的语法糖之一:\n\n```javascript\n//ES5\nvar selected = allJobs.filter(function(job){\n  return job.isSelected();\n});\n\n//ES6\nvar selected = allJobs.filter(job => job.isSelected());\n\n```\n\n  多行方法体的方式:\n\n```javascript\n//ES5\n$('#confetti-btn').click(function(event){\n  playTrumpet();\n  fireConfettiCannon();\n});\n\n//ES6\n$(\"#confetti-btn\").click(event => {\n  playTrumpet();\n  fireConfettiCannon();\n})\n```\n\n语法大体是这样的:\n\n    ([函数的形参,多个参数则以逗号分隔]) => [函数返回的值/表达式]\n\n此外，还有最重要的一点，箭头函数并没有自己的`this`值，箭头函数内的`this`值继承自外围作用域。\n\n```javascript\n  {\n    add: function(piece){},\n    ...\n    addAll:function addAll(prieces){\n      var self = this;\n      _.each(pieces,function(price){\n        self.add(piece);\n      });\n    }\n\n  }\n\n  //ES6\n  {\n    add:function(piece){},\n    ...\n    addAll:function addAll(pieces){\n      _.each(pieces,piece => this.add(price));\n    },\n    ...\n  }\n\n```\n\n## LET\n\nES6 `let`关键字的出现意味着JavaScript迎来了块级作用域({},for,if),可以有效的防止临时变量污染到外层变量:\n\n```javascript\n  function f1(){\n    let n = 5;\n    if(true){\n      let n = 10;\n    }\n    console.log(n); //5\n  }\n\n```\n\n## CONST\n\n  `const`用来定义常量，一旦定义了常量就不可修改。\n\n## DESTRUCTURING\n\n  destructuring 解构，ES6允许按照一定的模式，从数组和对象中提取值。对变量进行赋值，这成为解构(Destructuring):\n\n```javascript\n'use strict';\n\n//对数组的解构赋值\nlet [foo,[[bar],baz]] = [1,[[2],3]];\nconsole.log(foo); //1\nconsole.log(bar); //2\nconsole.log(baz); //3\n\n//对象的解构赋值\nvar {foo,bar} = {foo:\"aaa\",bar:\"bbb\"};\nconsole.log(foo); //\"aaa\"\nconsole.log(bar); //\"bbb\"\n\n//字符串的解构赋值\nconst [a,b,v,d,e] = \"hello\";\nconsole.log(a+b+c+d+e); //'hello'\n\n\n```\n\n跟箭头函数一样，这也是一个全新的语法糖，它的用处有很对，例如在我们封装参数的时候：\n\n```javascript\n// ES5 二逼青年写法\nfunction study(id, name, sex, grade, nickname, age, address) {\n    console.log(id);\n    console.log(name);\n    console.log(sex);\n    console.log(grade);\n    console.log(nickname);\n    console.log(age);\n    console.log(address);\n}\n// ES5 正常青年写法\nfunction study(params) {\n    console.log(params.id);\n    console.log(params.name);\n    console.log(params.sex);\n    console.log(params.grade);\n    console.log(params.nickname);\n    console.log(params.age);\n    console.log(params.address);\n}\n```\n\n```javascript\n//ES6\nfunction study({id, name, sex, grade, nickname, age, address}) {\n    console.log(id);\n    console.log(name);\n    console.log(sex);\n    console.log(grade);\n    console.log(nickname);\n    console.log(age);\n    console.log(address);    \n}\nstudy({\n    id: 1,\n    name: '林有德',\n    sex: '男',\n    grade: '一年级',\n    nickname: '布莱德',\n    age: 12,\n    address: '木马号'\n});\n```\n","slug":"About ES6","published":1,"updated":"2018-01-07T22:28:37.000Z","comments":1,"photos":[],"link":"","_id":"cjc88rlga0001a1jg3av8rkan","content":"<h1 id=\"ES6-部分方法点评\"><a href=\"#ES6-部分方法点评\" class=\"headerlink\" title=\"ES6 部分方法点评\"></a>ES6 部分方法点评</h1><h2 id=\"箭头函数-Arrow-Functions\"><a href=\"#箭头函数-Arrow-Functions\" class=\"headerlink\" title=\"箭头函数(Arrow Functions)\"></a>箭头函数(Arrow Functions)</h2><p>  箭头函数时ES6的语法糖之一:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//ES5</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> selected = allJobs.filter(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">job</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> job.isSelected();</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//ES6</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> selected = allJobs.filter(<span class=\"function\"><span class=\"params\">job</span> =&gt;</span> job.isSelected());</span><br></pre></td></tr></table></figure>\n<p>  多行方法体的方式:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//ES5</span></span><br><span class=\"line\">$(<span class=\"string\">'#confetti-btn'</span>).click(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event</span>)</span>&#123;</span><br><span class=\"line\">  playTrumpet();</span><br><span class=\"line\">  fireConfettiCannon();</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//ES6</span></span><br><span class=\"line\">$(<span class=\"string\">\"#confetti-btn\"</span>).click(<span class=\"function\"><span class=\"params\">event</span> =&gt;</span> &#123;</span><br><span class=\"line\">  playTrumpet();</span><br><span class=\"line\">  fireConfettiCannon();</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>语法大体是这样的:</p>\n<pre><code>([函数的形参,多个参数则以逗号分隔]) =&gt; [函数返回的值/表达式]\n</code></pre><p>此外，还有最重要的一点，箭头函数并没有自己的<code>this</code>值，箭头函数内的<code>this</code>值继承自外围作用域。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  add: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">piece</span>)</span>&#123;&#125;,</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  addAll:<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">addAll</span>(<span class=\"params\">prieces</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> self = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    _.each(pieces,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">price</span>)</span>&#123;</span><br><span class=\"line\">      self.add(piece);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//ES6</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  add:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">piece</span>)</span>&#123;&#125;,</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  addAll:<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">addAll</span>(<span class=\"params\">pieces</span>)</span>&#123;</span><br><span class=\"line\">    _.each(pieces,piece =&gt; <span class=\"keyword\">this</span>.add(price));</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"LET\"><a href=\"#LET\" class=\"headerlink\" title=\"LET\"></a>LET</h2><p>ES6 <code>let</code>关键字的出现意味着JavaScript迎来了块级作用域({},for,if),可以有效的防止临时变量污染到外层变量:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f1</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> n = <span class=\"number\">5</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(<span class=\"literal\">true</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> n = <span class=\"number\">10</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(n); <span class=\"comment\">//5</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"CONST\"><a href=\"#CONST\" class=\"headerlink\" title=\"CONST\"></a>CONST</h2><p>  <code>const</code>用来定义常量，一旦定义了常量就不可修改。</p>\n<h2 id=\"DESTRUCTURING\"><a href=\"#DESTRUCTURING\" class=\"headerlink\" title=\"DESTRUCTURING\"></a>DESTRUCTURING</h2><p>  destructuring 解构，ES6允许按照一定的模式，从数组和对象中提取值。对变量进行赋值，这成为解构(Destructuring):</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">'use strict'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//对数组的解构赋值</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> [foo,[[bar],baz]] = [<span class=\"number\">1</span>,[[<span class=\"number\">2</span>],<span class=\"number\">3</span>]];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(foo); <span class=\"comment\">//1</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(bar); <span class=\"comment\">//2</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(baz); <span class=\"comment\">//3</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//对象的解构赋值</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> &#123;foo,bar&#125; = &#123;<span class=\"attr\">foo</span>:<span class=\"string\">\"aaa\"</span>,<span class=\"attr\">bar</span>:<span class=\"string\">\"bbb\"</span>&#125;;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(foo); <span class=\"comment\">//\"aaa\"</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(bar); <span class=\"comment\">//\"bbb\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//字符串的解构赋值</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> [a,b,v,d,e] = <span class=\"string\">\"hello\"</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a+b+c+d+e); <span class=\"comment\">//'hello'</span></span><br></pre></td></tr></table></figure>\n<p>跟箭头函数一样，这也是一个全新的语法糖，它的用处有很对，例如在我们封装参数的时候：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ES5 二逼青年写法</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">study</span>(<span class=\"params\">id, name, sex, grade, nickname, age, address</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(id);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(name);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(sex);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(grade);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(nickname);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(age);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(address);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// ES5 正常青年写法</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">study</span>(<span class=\"params\">params</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(params.id);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(params.name);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(params.sex);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(params.grade);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(params.nickname);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(params.age);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(params.address);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//ES6</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">study</span>(<span class=\"params\">&#123;id, name, sex, grade, nickname, age, address&#125;</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(id);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(name);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(sex);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(grade);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(nickname);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(age);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(address);    </span><br><span class=\"line\">&#125;</span><br><span class=\"line\">study(&#123;</span><br><span class=\"line\">    id: <span class=\"number\">1</span>,</span><br><span class=\"line\">    name: <span class=\"string\">'林有德'</span>,</span><br><span class=\"line\">    sex: <span class=\"string\">'男'</span>,</span><br><span class=\"line\">    grade: <span class=\"string\">'一年级'</span>,</span><br><span class=\"line\">    nickname: <span class=\"string\">'布莱德'</span>,</span><br><span class=\"line\">    age: <span class=\"number\">12</span>,</span><br><span class=\"line\">    address: <span class=\"string\">'木马号'</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"ES6-部分方法点评\"><a href=\"#ES6-部分方法点评\" class=\"headerlink\" title=\"ES6 部分方法点评\"></a>ES6 部分方法点评</h1><h2 id=\"箭头函数-Arrow-Functions\"><a href=\"#箭头函数-Arrow-Functions\" class=\"headerlink\" title=\"箭头函数(Arrow Functions)\"></a>箭头函数(Arrow Functions)</h2><p>  箭头函数时ES6的语法糖之一:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//ES5</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> selected = allJobs.filter(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">job</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> job.isSelected();</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//ES6</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> selected = allJobs.filter(<span class=\"function\"><span class=\"params\">job</span> =&gt;</span> job.isSelected());</span><br></pre></td></tr></table></figure>\n<p>  多行方法体的方式:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//ES5</span></span><br><span class=\"line\">$(<span class=\"string\">'#confetti-btn'</span>).click(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event</span>)</span>&#123;</span><br><span class=\"line\">  playTrumpet();</span><br><span class=\"line\">  fireConfettiCannon();</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//ES6</span></span><br><span class=\"line\">$(<span class=\"string\">\"#confetti-btn\"</span>).click(<span class=\"function\"><span class=\"params\">event</span> =&gt;</span> &#123;</span><br><span class=\"line\">  playTrumpet();</span><br><span class=\"line\">  fireConfettiCannon();</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>语法大体是这样的:</p>\n<pre><code>([函数的形参,多个参数则以逗号分隔]) =&gt; [函数返回的值/表达式]\n</code></pre><p>此外，还有最重要的一点，箭头函数并没有自己的<code>this</code>值，箭头函数内的<code>this</code>值继承自外围作用域。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  add: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">piece</span>)</span>&#123;&#125;,</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  addAll:<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">addAll</span>(<span class=\"params\">prieces</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> self = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    _.each(pieces,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">price</span>)</span>&#123;</span><br><span class=\"line\">      self.add(piece);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//ES6</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  add:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">piece</span>)</span>&#123;&#125;,</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  addAll:<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">addAll</span>(<span class=\"params\">pieces</span>)</span>&#123;</span><br><span class=\"line\">    _.each(pieces,piece =&gt; <span class=\"keyword\">this</span>.add(price));</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"LET\"><a href=\"#LET\" class=\"headerlink\" title=\"LET\"></a>LET</h2><p>ES6 <code>let</code>关键字的出现意味着JavaScript迎来了块级作用域({},for,if),可以有效的防止临时变量污染到外层变量:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f1</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> n = <span class=\"number\">5</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(<span class=\"literal\">true</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> n = <span class=\"number\">10</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(n); <span class=\"comment\">//5</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"CONST\"><a href=\"#CONST\" class=\"headerlink\" title=\"CONST\"></a>CONST</h2><p>  <code>const</code>用来定义常量，一旦定义了常量就不可修改。</p>\n<h2 id=\"DESTRUCTURING\"><a href=\"#DESTRUCTURING\" class=\"headerlink\" title=\"DESTRUCTURING\"></a>DESTRUCTURING</h2><p>  destructuring 解构，ES6允许按照一定的模式，从数组和对象中提取值。对变量进行赋值，这成为解构(Destructuring):</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">'use strict'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//对数组的解构赋值</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> [foo,[[bar],baz]] = [<span class=\"number\">1</span>,[[<span class=\"number\">2</span>],<span class=\"number\">3</span>]];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(foo); <span class=\"comment\">//1</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(bar); <span class=\"comment\">//2</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(baz); <span class=\"comment\">//3</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//对象的解构赋值</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> &#123;foo,bar&#125; = &#123;<span class=\"attr\">foo</span>:<span class=\"string\">\"aaa\"</span>,<span class=\"attr\">bar</span>:<span class=\"string\">\"bbb\"</span>&#125;;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(foo); <span class=\"comment\">//\"aaa\"</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(bar); <span class=\"comment\">//\"bbb\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//字符串的解构赋值</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> [a,b,v,d,e] = <span class=\"string\">\"hello\"</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a+b+c+d+e); <span class=\"comment\">//'hello'</span></span><br></pre></td></tr></table></figure>\n<p>跟箭头函数一样，这也是一个全新的语法糖，它的用处有很对，例如在我们封装参数的时候：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ES5 二逼青年写法</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">study</span>(<span class=\"params\">id, name, sex, grade, nickname, age, address</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(id);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(name);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(sex);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(grade);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(nickname);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(age);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(address);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// ES5 正常青年写法</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">study</span>(<span class=\"params\">params</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(params.id);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(params.name);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(params.sex);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(params.grade);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(params.nickname);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(params.age);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(params.address);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//ES6</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">study</span>(<span class=\"params\">&#123;id, name, sex, grade, nickname, age, address&#125;</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(id);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(name);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(sex);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(grade);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(nickname);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(age);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(address);    </span><br><span class=\"line\">&#125;</span><br><span class=\"line\">study(&#123;</span><br><span class=\"line\">    id: <span class=\"number\">1</span>,</span><br><span class=\"line\">    name: <span class=\"string\">'林有德'</span>,</span><br><span class=\"line\">    sex: <span class=\"string\">'男'</span>,</span><br><span class=\"line\">    grade: <span class=\"string\">'一年级'</span>,</span><br><span class=\"line\">    nickname: <span class=\"string\">'布莱德'</span>,</span><br><span class=\"line\">    age: <span class=\"number\">12</span>,</span><br><span class=\"line\">    address: <span class=\"string\">'木马号'</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n"},{"layout":"keynote","title":"AngularJS 1x Style Guide","subtitle":"Keynote: AngularJS 1x Style Guide","date":"2016-06-27T01:27:35.000Z","author":"","_content":"# Angular 1.x 编码规则\n## Angular 团队支持\n<非常感谢Angular团队领导Igor Minar,检查审视，贡献必要的资料\n\n## 目录\n\t1.[单一职责](#single-responsibility)\n\t2.[IIFE](#iife)\n\t3.[Modules](#modules)\n\t4.[Controllers](#controllers)\n\t5.[Services](#services)\n\t6.[Factories](#factories)\n\t7.[数据服务](#dataservices)\n\t8.[Directives](#directives)\n\t9.[Promises解决方案](#promises)\n\t10.[手动依赖注入](#manualdi)\n\t11.[压缩和注解](#minification-and-annotation)\n\t12.[异常处理](#exception-handling)\n\t13.[命名规则](#naming)\n\t14.[应用结构优化准则](#application-structure-lift-principle)\n\t15.[应用结构](#application-structure)\n\t16.[模块化](#modularity)\n\t17.[启动](#startup-logic)\n\t18.[Angular $服务包装](#angular-wrapper-services)\n\t19.[测试](#testing)\n\t20.[动画](#animations)\n\t21.[评论](#comments)\n\t22.[JSHint](#js-hint)\n\t23.[JSCS](#jscs)\n\t24.[常量](#constants)\n\t25.[文件模板和代码片段](#file-templates-and-snippets)\n\t26.[路由](#routing)\n\t27.[自动化任务](#task-automation)\n\t28.[Filter过滤器](#filter)\n\t29.[Angular 文档](#angular-docs)\n\n## 单一职责\n\n### 规则1\n##### [Style [Y001](#style-y001)]\n\n\t- 每个文件仅包含一个组件，并且使其少于400行代码，它的好处在于\n\t\t1.对于测试来说更加容易\n\t\t1.使得代码可读性更强，更好维护，避免团队在源代码控制方面的问题\n\t\t1.可以避免 多个组件在共享变量，创建不必要的闭包，或者不必要的耦合和依赖 时隐藏的错误\n\n```javascript\n/*不规范示例*/\nangular\n\t.module('app',['ngRoute'])\n\t.controller('SomController',SomeController)\n\t.factory('SomeFactory',SomeFactory);\n\n\tfunction SomeController(){}\n\n\tfunction SomeFactory(){}\n```\n\n```javascript\n/*推荐*/\n//app.module.js\nangular\n\t.module('app',['ngRoute']);\n```\n```javascript\n/*some.controller.js*/\nangular\n\t.module('app')\n\t.controller('SomeController',SomeController);\n\n\tfunction SomeController() { }\n```\n```javascript\n/* recommended */\n\n// some.factory.js\nangular\n\t\t.module('app')\n\t\t.factory('someFactory', someFactory);\n\nfunction someFactory() { }\n```\n**[返回顶部](table-of-contents)**\n\n## IIFE (立即执行方法 Immediately Invoked Function Expression(IIFE)).\n### Javascript Scopes\n###### [Style [Y010](#style-y010)]\n\t- 将Angular组件包含在IIFE代码块中，这样的优势在于\n\t1.一个IIFE将变量从全局作用域中移出，这会有效的方式变量和方法之间的命名冲突\n\t1.当你将你的代码从开发板 压缩和打包 到生产服务器上的时候，会有很多全局作用域下的变量发生冲突，\n\t这时IIFE就可以有效的隔离这些变量\n\n\t```javascript\n  /* 不规范 */\n  // logger.js\n  angular\n      .module('app')\n      .factory('logger', logger);\n\n  // logger 方法已经添加到了全局作用域中\n  function logger() { }\n\n  // storage.js\n  angular\n      .module('app')\n      .factory('storage', storage);\n\n  // storage 方法已经添加到了全局作用域中\n  function storage() { }\n  ```\n\n  ```javascript\n  /**\n   * 推荐\n   *\n   * 下面代码中没有全局作用域变量和方法\n   */\n\n  // logger.js\n  (function() {\n      'use strict';\n\n      angular\n          .module('app')\n          .factory('logger', logger);\n\n      function logger() { }\n  })();\n\n  // storage.js\n  (function() {\n      'use strict';\n\n      angular\n          .module('app')\n          .factory('storage', storage);\n\n      function storage() { }\n  })();\n  ```\n\t**[返回顶部](#table-of-contents)**\n## Modules\n\n### 避免命名冲突\n###### [Style [Y020](#style-y020)]\n\t- 使用统一的子模块命名规则可以帮助避免模块命名冲突。分隔符帮助定义模块和他们的子模块之间的层次结构\n\t例如`app`可以作为父模块名，`app.dashboard`和`app.users`模块作为依赖于`app`模块的子模块。\n\n### 定义(or 设置)\n###### [Style [Y021](#style-y021)]\n\n\t- 可以使用模块的setter语法定义模块，而不要使用变量定义模块。\n\t\t\t在单一组件文件中，使用到模块变量的情况会变得非常少。\n\t\t\t```javascript\n\t\t  /* 避免使用 */\n\t\t  var app = angular.module('app', [\n\t\t      'ngAnimate',\n\t\t      'ngRoute',\n\t\t      'app.shared',\n\t\t      'app.dashboard'\n\t\t  ]);\n\t\t  ```\n\n\t\t  ```javascript\n\t\t  /* 推荐方式 */\n\t\t  angular\n\t\t      .module('app', [\n\t\t          'ngAnimate',\n\t\t          'ngRoute',\n\t\t          'app.shared',\n\t\t          'app.dashboard'\n\t\t      ]);\n\t\t  ```\n\n### Getters\n###### [Style [Y022](#style-y022)]\n\t- 当使用一个模块的时候，可以使用getter链而非变量装载。\n\t\t这样可以使项目代码的可读性更高并且避免变量冲突\n\n\t\t```javascript\n\t  /* 避免使用 */\n\t  var app = angular.module('app');\n\t  app.controller('SomeController', SomeController);\n\n\t  function SomeController() { }\n\t  ```\n\n\t  ```javascript\n\t  /* 推荐使用 */\n\t  angular\n\t      .module('app')\n\t      .controller('SomeController', SomeController);\n\n\t  function SomeController() { }\n\t  ```\n### Getter 方法和Setter 方法之间的比较\n###### [Style [Y023](#style-y023)]\n\n```javascript\n/* recommended */\n\n// 创建一个模块\nangular.module('app', []);\n\n// 从模块集合中取出这个模块\nangular.module('app');\n```\n\n### 命名 与 匿名方法之间的比较\n###### [Style [Y024](#style-y024)]\n\n\t- 在回调函数中尽量使用命名方法代替匿名方法，这样会使得代码的可读性更高，并且提升代码可复用的程度\n\t```javascript\n  /* 避免使用 */\n  angular\n      .module('app')\n      .controller('DashboardController', function() { })\n      .factory('logger', function() { });\n  ```\n\n  ```javascript\n  /* 推荐使用 */\n\n  // dashboard.js\n  angular\n      .module('app')\n      .controller('DashboardController', DashboardController);\n\n  function DashboardController() { }\n  ```\n\n  ```javascript\n  // logger.js\n  angular\n      .module('app')\n      .factory('logger', logger);\n\n  function logger() { }\n  ```\n**[Back to top](#table-of-contents)**\n\n## 控制器Controllers\n\n### controllerAs View Syntax\n###### [Style [Y030](#style-y030)]\n\t-使用[`controllerAs`](http://www.johnpapa.net/do-you-like-your-angular-controllers-with-or-without-sugar/) 语句替代`经典控制器$scope`语句\n\t\t1.控制器构造、新建的时候回提供一个简单的实例，而`controllerAs`语句相比`传统$scope 语句`更接近Javascript原声方法\n\t\t1.它会在视图中使用一个虚拟的对象绑定（例如 使用`customer.name` 代替 `name`）,更加贴近上下文关系，\n\t\t增加刻度性，避免引用冲突问题\n\t\t1.帮助避免在视图嵌套控制器中使用`$parent`\n\n\t\t```html\n\t  <!-- avoid -->\n\t  <div ng-controller=\"CustomerController\">\n\t      {{ name }}\n\t  </div>\n\t  ```\n\n\t  ```html\n\t  <!-- recommended -->\n\t  <div ng-controller=\"CustomerController as customer\">\n\t      {{ customer.name }}\n\t  </div>\n\t  ```\n\n### controllerAs 控制器语句\n###### [Style [Y031](#style-y031)]\n\n\t- 使用`controllerAs`语句替代`传统controller中的$scope`\n\n\t- `controllerAs`语句在Controller内部使用`this`将数据绑定在`$scope`上\n\t`controllerAs` 是`$scope`语法糖。你依然可以使用`$scope`方法.\n\n\t*Why?*:`controllerAs`语句是`$scope`基础上的一种语法糖，你可以继续使用`$scope`绑定变量和方法。\n\n\t*Why?*:帮助避免在控制器中使用`$scope`方法，用其他的方式实现或者将他们移动到工厂方法中，并在控制器中引用.控制器应仅在需要的时候使用`$scope`，再实例中，当我们使用[`$emit`](https://docs.angularjs.org/api/ng/type/$rootScope.Scope#$emit), [`$broadcast`](https://docs.angularjs.org/api/ng/type/$rootScope.Scope#$broadcast) 或者 [`$on`](https://docs.angularjs.org/api/ng/type/$rootScope.Scope#$on). 一个变量或者声明一个事件\n\n\t```javascript\n/* 避免使用 */\nfunction CustomerController($scope){\n\t$scope.name = {};\n\t$scope.sendMessage = function(){};\n}\n\n/* 推荐 */\nfunction CustomerController(){\n\tthis.name = {};\n\tthis.sendMessage = function {};\n}\n\t```\n\n### controllerAs 和 VM\n###### [Style [Y032](#style-y032)]\n\n\t- 当使用`controllerAs`语法的时候，捕捉一个变量替代`this`，选择统一的变量名`vm`，代表 ViewModel。\n\n\t*Why?*：`this` 关键字是作为上下文对象，当使用控制器内部的方法有可能会改变它的作用域，捕捉上下文中的`this`避免遇到这种问题\n\n\t```javascript\n\t/* 错误的示例 */\n\tfunction CustomerController(){\n\t\t\tthis.name = {};\n\t\t\tthis.sendMessage = {};\n\t}\n\n\t/* 推荐的方式 */\n\tfunction CustomerController(){\n\t\t\tvar vm = this;\n\t\t\tvm.name = {};\n\t\t\tvm.sendMessage = function(){}\n\t}\n\t```\n\n注意:你通过在代码上添加注释避免任何的[jshint](http://jshint.com/)警告。但是，这不需要将方法使用大写命名，这只是个对于构造方法的惯例。\n\n```javascript\n/* jshint validthis : true */\nvar vm = this;\n```\n\n注意:当在控制器中使用`controller as`创建一个监听时，你可以监听`vm.*`\n(创建监听的时候需要小心监听导致的更多的负载)\n\n```html\n<input ng-model = \"vm.tite\"/>\n```\n\n```javascript\nfunction SomeController($scope,$log){\n\t\tvar vm = this;\n\t\tvm.title = 'Some Title';\n\n\t\t$scope.watch('vm.title',function(){\n\t\t\t\t$log.info('vm.title was %s',original);\n\t\t})\n}\n```\n\n注意:当基于一个庞大的代码库工作时，使用更多的描述性命名可以帮助简化的认知负荷和搜素，避免坑长的名字和繁琐的输入。\n\n```html\n<!-- 避免使用 -->\n<input ng-model=\"customerProductItemVm.title\">\n```\n\n```html\n<!-- 推荐 -->\n<input ng-model=\"productVm.title\">\n\n```\n\n### 将绑定成员提取到首位\n\n\t- 将需要绑定的成员按照字母顺序放在控制器的上方，并且不要扩散到控制器代码\n\n\t*Why?*:将需要绑定的成员防止在首位可以提升代码的可读性，并且帮你快速识别这个控制器需要绑定的成员都有哪些\n\n\t*Why?*:设置匿名行内函数当然可以使得代码简单，但是当哪些方法体多余一行代码的时候，他们会很大程序上降低代码可读性。将方法定义在绑定成员的下方（哪些方法会被提升）将实现细节移动到下方，保持绑定成员在上方，使代码可读性更好。\n\n```javascript\n/* 避免 */\nfunction SessionsController(){\n\tvar vm = this;\n\n\tvm.gotoSession = function(){\n\n\t};\n\n\tvm.refresh = function(){\n\n\t};\n}\n\n```\n\n```javascript\n/* 推荐 */\nfunction SessionsController(){\n\tvar vm = this;\n\n\tvm.gotoSession = gotoSession;\n\tvm.refresh = refresh;\n\tvm.search = search;\n\n\tfunction gotoSession(){}\n\n\tfunction refresh(){}\n\n\tfunction search(){}\n}\n\n```\n\n    ![Controller Using \"Above the Fold\"](https://raw.githubusercontent.com/johnpapa/angular-styleguide/master/a1/assets/above-the-fold-1.png)\n\n注意：如果这个方法的代码只有一行可以将它保持在上方，这样并不影响可读性。\n\n```javascript\n/* 避免 */\nfunction SessionController(data){\n\tvar vm = this;\n\n\tvm.gotoSession = gotoSession;\n\n\tvm.refresh = function(){\n\t\t/**\n\t\t * lines\n\t\t * of\n\t\t * code\n\t\t * affects\n\t\t * readabibity\n\t\t*/\n\t}\n\tvm.search = search;\n\tvm.sessions = [];\n\tvm.title = 'Sessions';\n}\n```\n\n```javascript\n/* 推荐方式 */\nfunction SessionsController(sessionDataService) {\n\t\tvar vm = this;\n\t\tvm.gotoSession = gotoSession;\n\t\tvm.refresh = sessionDataService.refresh; // 1 liner is OK\n\t\tvm.search = search;\n\t\tvm.sessions = [];\n\t\tvm.title = 'Sessions';\n}\n```\n\n### 通过方法定义隐藏实现\n###### [Style [Y034](#style-y034)]\n\n\t- 使用方法定义隐藏方法实现细节。保持你的邦定成员在上方，当你需要在一个控制器中绑定一个方法的时候，它指向出现在这个文件中的一个函数声明。这是直接绑定部分成员，更多细节详见[这篇文章](http://www.johnpapa.net/angular-function-declarations-function-expressions-and-readable-code/)\n\n```javascript\n/* 避免使用 */\nfunction AvengersController(avengersService,logger){\n\t\tvar vm = this;\n\t\tvm.avengers = [];\n\t\tvm.title = 'Avengers';\n\n\t\tvar activate = function(){\n\t\t\t\treturn getAvengers().then(function(){\n\t\t\t\t\t\tlogger.info('Activated Avengers View');\n\t\t\t\t})\n\t\t}\n\n\t\tvar getAvengers = function(){\n\t\t\t\treturn avengersService.getAvengers().then(function(data){\n\t\t\t\t\t\tvm.avengers = data;\n\t\t\t\t\t\treturn vm.avengers;\n\t\t\t\t});\n\t\t}\n\n\t\tvm.getAvengers = getAvengers;\n\n\t\tactivate();\n\n}\n\n注意:在上面的示例中重要的东西都很分散。下面的代码中，注意重要的东西都在上方\n\n```javascript\n/* 推荐\n使用方法定义，绑定成员定义在上方\n*/\n\nfunction AvengersController(avengerService,logger){\n\t\tvar vm = this;\n\t\tvm.avengers = [];\n\t\tvm.getAvengers = getAvengers;\n\t\tvm.title = '';\n\n\t\tactive();\n\n\t\tfunction activate(){\n\t\t\t\treturn getAvengers().then(function(){\n\t\t\t\t\t\tlogger.info('Activated Avengers View');\n\t\t\t\t})\n\t\t}\n\n\t\tfunction geetAvengers(){\n\t\t\t\treturn avengersService.getAvengers().then(function(data){\n\t\t\t\t\t\tvm.avengers = data;\n\t\t\t\t\t\treturn vm.avengers;\n\t\t\t\t});\n\t\t}\n}\n```\n\n### 将控制器移动到服务(Service)中\n###### [Style [Y035](#style-y035)]\n\n\t- 将控制器中的逻辑移动到服务器或者工厂方法中\n\n```javascript\n\n/* avoid */\nfunction OrderController($http, $q, config, userInfo) {\n\t var vm = this;\n\t vm.checkCredit = checkCredit;\n\t vm.isCreditOk;\n\t vm.total = 0;\n\n\t function checkCredit() {\n\t\t\t var settings = {};\n\t\t\t // Get the credit service base URL from config\n\t\t\t // Set credit service required headers\n\t\t\t // Prepare URL query string or data object with request data\n\t\t\t // Add user-identifying info so service gets the right credit limit for this user.\n\t\t\t // Use JSONP for this browser if it doesn't support CORS\n\t\t\t return $http.get(settings)\n\t\t\t\t\t .then(function(data) {\n\t\t\t\t\t\t// Unpack JSON data in the response object\n\t\t\t\t\t\t\t// to find maxRemainingAmount\n\t\t\t\t\t\t\tvm.isCreditOk = vm.total <= maxRemainingAmount\n\t\t\t\t\t })\n\t\t\t\t\t .catch(function(error) {\n\t\t\t\t\t\t\t// Interpret error\n\t\t\t\t\t\t\t// Cope w/ timeout? retry? try alternate service?\n\t\t\t\t\t\t\t// Re-reject with appropriate error for a user to see\n\t\t\t\t\t });\n\t };\n}\n```\n\n```javascript\n/* 推荐 */\nfunction OrderController(creditService){\n\t\tvar vm = this;\n\t\tvm.checkCredit = checkCredit;\n\t\tvm.isCreditOk;\n\t\tvm.total = 0;\n\n\t\tfunction checkCredit(){\n\t\t\t\treturn creditService.isOrderTotalOk(vm.total)\n\t\t\t\t\t.then(function(isOk){ vm.isCreditOk = ok; })\n\t\t\t\t\t.catch(showError);\n\t\t}\n}\n```\n### 使控制器更专注\n###### [Style [Y037](#style-y037)]\n\n\t- 为一个视图定义一个控制器，不要试图在其他视图中复用控制器，而是将可以复用的逻辑转移到工厂中，保持控制器的简单并专注与当前视图。\n\n\t*Why?*: 在很多的视图上复用控制器是脆弱的，端对端（end-to-end）测试需要保证访问一个复杂的应用时的稳定性\n\n### 分配控制器\n###### [Style [Y038](#style-y038)]\n\n\t- 当一个控制器必须搭配一个视图并且其他组件需要复用其他的控制器或视图，在它的路由中单独定义控制器。\n\n\t注意: 如果视图加载依赖其他视图，这意味着另外的一种途径，尝试使用`ng-controller=\"Avengers as vm\"` 语句.\n","source":"_posts/AngularJS 1x Style Guide.markdown","raw":"---\nlayout:     keynote\ntitle:      \"AngularJS 1x Style Guide\"\nsubtitle:   \"Keynote: AngularJS 1x Style Guide\"\ndate: 2016-06-27 09:27:35\nauthor:     \"\"\ntags:\n    - Angular\n---\n# Angular 1.x 编码规则\n## Angular 团队支持\n<非常感谢Angular团队领导Igor Minar,检查审视，贡献必要的资料\n\n## 目录\n\t1.[单一职责](#single-responsibility)\n\t2.[IIFE](#iife)\n\t3.[Modules](#modules)\n\t4.[Controllers](#controllers)\n\t5.[Services](#services)\n\t6.[Factories](#factories)\n\t7.[数据服务](#dataservices)\n\t8.[Directives](#directives)\n\t9.[Promises解决方案](#promises)\n\t10.[手动依赖注入](#manualdi)\n\t11.[压缩和注解](#minification-and-annotation)\n\t12.[异常处理](#exception-handling)\n\t13.[命名规则](#naming)\n\t14.[应用结构优化准则](#application-structure-lift-principle)\n\t15.[应用结构](#application-structure)\n\t16.[模块化](#modularity)\n\t17.[启动](#startup-logic)\n\t18.[Angular $服务包装](#angular-wrapper-services)\n\t19.[测试](#testing)\n\t20.[动画](#animations)\n\t21.[评论](#comments)\n\t22.[JSHint](#js-hint)\n\t23.[JSCS](#jscs)\n\t24.[常量](#constants)\n\t25.[文件模板和代码片段](#file-templates-and-snippets)\n\t26.[路由](#routing)\n\t27.[自动化任务](#task-automation)\n\t28.[Filter过滤器](#filter)\n\t29.[Angular 文档](#angular-docs)\n\n## 单一职责\n\n### 规则1\n##### [Style [Y001](#style-y001)]\n\n\t- 每个文件仅包含一个组件，并且使其少于400行代码，它的好处在于\n\t\t1.对于测试来说更加容易\n\t\t1.使得代码可读性更强，更好维护，避免团队在源代码控制方面的问题\n\t\t1.可以避免 多个组件在共享变量，创建不必要的闭包，或者不必要的耦合和依赖 时隐藏的错误\n\n```javascript\n/*不规范示例*/\nangular\n\t.module('app',['ngRoute'])\n\t.controller('SomController',SomeController)\n\t.factory('SomeFactory',SomeFactory);\n\n\tfunction SomeController(){}\n\n\tfunction SomeFactory(){}\n```\n\n```javascript\n/*推荐*/\n//app.module.js\nangular\n\t.module('app',['ngRoute']);\n```\n```javascript\n/*some.controller.js*/\nangular\n\t.module('app')\n\t.controller('SomeController',SomeController);\n\n\tfunction SomeController() { }\n```\n```javascript\n/* recommended */\n\n// some.factory.js\nangular\n\t\t.module('app')\n\t\t.factory('someFactory', someFactory);\n\nfunction someFactory() { }\n```\n**[返回顶部](table-of-contents)**\n\n## IIFE (立即执行方法 Immediately Invoked Function Expression(IIFE)).\n### Javascript Scopes\n###### [Style [Y010](#style-y010)]\n\t- 将Angular组件包含在IIFE代码块中，这样的优势在于\n\t1.一个IIFE将变量从全局作用域中移出，这会有效的方式变量和方法之间的命名冲突\n\t1.当你将你的代码从开发板 压缩和打包 到生产服务器上的时候，会有很多全局作用域下的变量发生冲突，\n\t这时IIFE就可以有效的隔离这些变量\n\n\t```javascript\n  /* 不规范 */\n  // logger.js\n  angular\n      .module('app')\n      .factory('logger', logger);\n\n  // logger 方法已经添加到了全局作用域中\n  function logger() { }\n\n  // storage.js\n  angular\n      .module('app')\n      .factory('storage', storage);\n\n  // storage 方法已经添加到了全局作用域中\n  function storage() { }\n  ```\n\n  ```javascript\n  /**\n   * 推荐\n   *\n   * 下面代码中没有全局作用域变量和方法\n   */\n\n  // logger.js\n  (function() {\n      'use strict';\n\n      angular\n          .module('app')\n          .factory('logger', logger);\n\n      function logger() { }\n  })();\n\n  // storage.js\n  (function() {\n      'use strict';\n\n      angular\n          .module('app')\n          .factory('storage', storage);\n\n      function storage() { }\n  })();\n  ```\n\t**[返回顶部](#table-of-contents)**\n## Modules\n\n### 避免命名冲突\n###### [Style [Y020](#style-y020)]\n\t- 使用统一的子模块命名规则可以帮助避免模块命名冲突。分隔符帮助定义模块和他们的子模块之间的层次结构\n\t例如`app`可以作为父模块名，`app.dashboard`和`app.users`模块作为依赖于`app`模块的子模块。\n\n### 定义(or 设置)\n###### [Style [Y021](#style-y021)]\n\n\t- 可以使用模块的setter语法定义模块，而不要使用变量定义模块。\n\t\t\t在单一组件文件中，使用到模块变量的情况会变得非常少。\n\t\t\t```javascript\n\t\t  /* 避免使用 */\n\t\t  var app = angular.module('app', [\n\t\t      'ngAnimate',\n\t\t      'ngRoute',\n\t\t      'app.shared',\n\t\t      'app.dashboard'\n\t\t  ]);\n\t\t  ```\n\n\t\t  ```javascript\n\t\t  /* 推荐方式 */\n\t\t  angular\n\t\t      .module('app', [\n\t\t          'ngAnimate',\n\t\t          'ngRoute',\n\t\t          'app.shared',\n\t\t          'app.dashboard'\n\t\t      ]);\n\t\t  ```\n\n### Getters\n###### [Style [Y022](#style-y022)]\n\t- 当使用一个模块的时候，可以使用getter链而非变量装载。\n\t\t这样可以使项目代码的可读性更高并且避免变量冲突\n\n\t\t```javascript\n\t  /* 避免使用 */\n\t  var app = angular.module('app');\n\t  app.controller('SomeController', SomeController);\n\n\t  function SomeController() { }\n\t  ```\n\n\t  ```javascript\n\t  /* 推荐使用 */\n\t  angular\n\t      .module('app')\n\t      .controller('SomeController', SomeController);\n\n\t  function SomeController() { }\n\t  ```\n### Getter 方法和Setter 方法之间的比较\n###### [Style [Y023](#style-y023)]\n\n```javascript\n/* recommended */\n\n// 创建一个模块\nangular.module('app', []);\n\n// 从模块集合中取出这个模块\nangular.module('app');\n```\n\n### 命名 与 匿名方法之间的比较\n###### [Style [Y024](#style-y024)]\n\n\t- 在回调函数中尽量使用命名方法代替匿名方法，这样会使得代码的可读性更高，并且提升代码可复用的程度\n\t```javascript\n  /* 避免使用 */\n  angular\n      .module('app')\n      .controller('DashboardController', function() { })\n      .factory('logger', function() { });\n  ```\n\n  ```javascript\n  /* 推荐使用 */\n\n  // dashboard.js\n  angular\n      .module('app')\n      .controller('DashboardController', DashboardController);\n\n  function DashboardController() { }\n  ```\n\n  ```javascript\n  // logger.js\n  angular\n      .module('app')\n      .factory('logger', logger);\n\n  function logger() { }\n  ```\n**[Back to top](#table-of-contents)**\n\n## 控制器Controllers\n\n### controllerAs View Syntax\n###### [Style [Y030](#style-y030)]\n\t-使用[`controllerAs`](http://www.johnpapa.net/do-you-like-your-angular-controllers-with-or-without-sugar/) 语句替代`经典控制器$scope`语句\n\t\t1.控制器构造、新建的时候回提供一个简单的实例，而`controllerAs`语句相比`传统$scope 语句`更接近Javascript原声方法\n\t\t1.它会在视图中使用一个虚拟的对象绑定（例如 使用`customer.name` 代替 `name`）,更加贴近上下文关系，\n\t\t增加刻度性，避免引用冲突问题\n\t\t1.帮助避免在视图嵌套控制器中使用`$parent`\n\n\t\t```html\n\t  <!-- avoid -->\n\t  <div ng-controller=\"CustomerController\">\n\t      {{ name }}\n\t  </div>\n\t  ```\n\n\t  ```html\n\t  <!-- recommended -->\n\t  <div ng-controller=\"CustomerController as customer\">\n\t      {{ customer.name }}\n\t  </div>\n\t  ```\n\n### controllerAs 控制器语句\n###### [Style [Y031](#style-y031)]\n\n\t- 使用`controllerAs`语句替代`传统controller中的$scope`\n\n\t- `controllerAs`语句在Controller内部使用`this`将数据绑定在`$scope`上\n\t`controllerAs` 是`$scope`语法糖。你依然可以使用`$scope`方法.\n\n\t*Why?*:`controllerAs`语句是`$scope`基础上的一种语法糖，你可以继续使用`$scope`绑定变量和方法。\n\n\t*Why?*:帮助避免在控制器中使用`$scope`方法，用其他的方式实现或者将他们移动到工厂方法中，并在控制器中引用.控制器应仅在需要的时候使用`$scope`，再实例中，当我们使用[`$emit`](https://docs.angularjs.org/api/ng/type/$rootScope.Scope#$emit), [`$broadcast`](https://docs.angularjs.org/api/ng/type/$rootScope.Scope#$broadcast) 或者 [`$on`](https://docs.angularjs.org/api/ng/type/$rootScope.Scope#$on). 一个变量或者声明一个事件\n\n\t```javascript\n/* 避免使用 */\nfunction CustomerController($scope){\n\t$scope.name = {};\n\t$scope.sendMessage = function(){};\n}\n\n/* 推荐 */\nfunction CustomerController(){\n\tthis.name = {};\n\tthis.sendMessage = function {};\n}\n\t```\n\n### controllerAs 和 VM\n###### [Style [Y032](#style-y032)]\n\n\t- 当使用`controllerAs`语法的时候，捕捉一个变量替代`this`，选择统一的变量名`vm`，代表 ViewModel。\n\n\t*Why?*：`this` 关键字是作为上下文对象，当使用控制器内部的方法有可能会改变它的作用域，捕捉上下文中的`this`避免遇到这种问题\n\n\t```javascript\n\t/* 错误的示例 */\n\tfunction CustomerController(){\n\t\t\tthis.name = {};\n\t\t\tthis.sendMessage = {};\n\t}\n\n\t/* 推荐的方式 */\n\tfunction CustomerController(){\n\t\t\tvar vm = this;\n\t\t\tvm.name = {};\n\t\t\tvm.sendMessage = function(){}\n\t}\n\t```\n\n注意:你通过在代码上添加注释避免任何的[jshint](http://jshint.com/)警告。但是，这不需要将方法使用大写命名，这只是个对于构造方法的惯例。\n\n```javascript\n/* jshint validthis : true */\nvar vm = this;\n```\n\n注意:当在控制器中使用`controller as`创建一个监听时，你可以监听`vm.*`\n(创建监听的时候需要小心监听导致的更多的负载)\n\n```html\n<input ng-model = \"vm.tite\"/>\n```\n\n```javascript\nfunction SomeController($scope,$log){\n\t\tvar vm = this;\n\t\tvm.title = 'Some Title';\n\n\t\t$scope.watch('vm.title',function(){\n\t\t\t\t$log.info('vm.title was %s',original);\n\t\t})\n}\n```\n\n注意:当基于一个庞大的代码库工作时，使用更多的描述性命名可以帮助简化的认知负荷和搜素，避免坑长的名字和繁琐的输入。\n\n```html\n<!-- 避免使用 -->\n<input ng-model=\"customerProductItemVm.title\">\n```\n\n```html\n<!-- 推荐 -->\n<input ng-model=\"productVm.title\">\n\n```\n\n### 将绑定成员提取到首位\n\n\t- 将需要绑定的成员按照字母顺序放在控制器的上方，并且不要扩散到控制器代码\n\n\t*Why?*:将需要绑定的成员防止在首位可以提升代码的可读性，并且帮你快速识别这个控制器需要绑定的成员都有哪些\n\n\t*Why?*:设置匿名行内函数当然可以使得代码简单，但是当哪些方法体多余一行代码的时候，他们会很大程序上降低代码可读性。将方法定义在绑定成员的下方（哪些方法会被提升）将实现细节移动到下方，保持绑定成员在上方，使代码可读性更好。\n\n```javascript\n/* 避免 */\nfunction SessionsController(){\n\tvar vm = this;\n\n\tvm.gotoSession = function(){\n\n\t};\n\n\tvm.refresh = function(){\n\n\t};\n}\n\n```\n\n```javascript\n/* 推荐 */\nfunction SessionsController(){\n\tvar vm = this;\n\n\tvm.gotoSession = gotoSession;\n\tvm.refresh = refresh;\n\tvm.search = search;\n\n\tfunction gotoSession(){}\n\n\tfunction refresh(){}\n\n\tfunction search(){}\n}\n\n```\n\n    ![Controller Using \"Above the Fold\"](https://raw.githubusercontent.com/johnpapa/angular-styleguide/master/a1/assets/above-the-fold-1.png)\n\n注意：如果这个方法的代码只有一行可以将它保持在上方，这样并不影响可读性。\n\n```javascript\n/* 避免 */\nfunction SessionController(data){\n\tvar vm = this;\n\n\tvm.gotoSession = gotoSession;\n\n\tvm.refresh = function(){\n\t\t/**\n\t\t * lines\n\t\t * of\n\t\t * code\n\t\t * affects\n\t\t * readabibity\n\t\t*/\n\t}\n\tvm.search = search;\n\tvm.sessions = [];\n\tvm.title = 'Sessions';\n}\n```\n\n```javascript\n/* 推荐方式 */\nfunction SessionsController(sessionDataService) {\n\t\tvar vm = this;\n\t\tvm.gotoSession = gotoSession;\n\t\tvm.refresh = sessionDataService.refresh; // 1 liner is OK\n\t\tvm.search = search;\n\t\tvm.sessions = [];\n\t\tvm.title = 'Sessions';\n}\n```\n\n### 通过方法定义隐藏实现\n###### [Style [Y034](#style-y034)]\n\n\t- 使用方法定义隐藏方法实现细节。保持你的邦定成员在上方，当你需要在一个控制器中绑定一个方法的时候，它指向出现在这个文件中的一个函数声明。这是直接绑定部分成员，更多细节详见[这篇文章](http://www.johnpapa.net/angular-function-declarations-function-expressions-and-readable-code/)\n\n```javascript\n/* 避免使用 */\nfunction AvengersController(avengersService,logger){\n\t\tvar vm = this;\n\t\tvm.avengers = [];\n\t\tvm.title = 'Avengers';\n\n\t\tvar activate = function(){\n\t\t\t\treturn getAvengers().then(function(){\n\t\t\t\t\t\tlogger.info('Activated Avengers View');\n\t\t\t\t})\n\t\t}\n\n\t\tvar getAvengers = function(){\n\t\t\t\treturn avengersService.getAvengers().then(function(data){\n\t\t\t\t\t\tvm.avengers = data;\n\t\t\t\t\t\treturn vm.avengers;\n\t\t\t\t});\n\t\t}\n\n\t\tvm.getAvengers = getAvengers;\n\n\t\tactivate();\n\n}\n\n注意:在上面的示例中重要的东西都很分散。下面的代码中，注意重要的东西都在上方\n\n```javascript\n/* 推荐\n使用方法定义，绑定成员定义在上方\n*/\n\nfunction AvengersController(avengerService,logger){\n\t\tvar vm = this;\n\t\tvm.avengers = [];\n\t\tvm.getAvengers = getAvengers;\n\t\tvm.title = '';\n\n\t\tactive();\n\n\t\tfunction activate(){\n\t\t\t\treturn getAvengers().then(function(){\n\t\t\t\t\t\tlogger.info('Activated Avengers View');\n\t\t\t\t})\n\t\t}\n\n\t\tfunction geetAvengers(){\n\t\t\t\treturn avengersService.getAvengers().then(function(data){\n\t\t\t\t\t\tvm.avengers = data;\n\t\t\t\t\t\treturn vm.avengers;\n\t\t\t\t});\n\t\t}\n}\n```\n\n### 将控制器移动到服务(Service)中\n###### [Style [Y035](#style-y035)]\n\n\t- 将控制器中的逻辑移动到服务器或者工厂方法中\n\n```javascript\n\n/* avoid */\nfunction OrderController($http, $q, config, userInfo) {\n\t var vm = this;\n\t vm.checkCredit = checkCredit;\n\t vm.isCreditOk;\n\t vm.total = 0;\n\n\t function checkCredit() {\n\t\t\t var settings = {};\n\t\t\t // Get the credit service base URL from config\n\t\t\t // Set credit service required headers\n\t\t\t // Prepare URL query string or data object with request data\n\t\t\t // Add user-identifying info so service gets the right credit limit for this user.\n\t\t\t // Use JSONP for this browser if it doesn't support CORS\n\t\t\t return $http.get(settings)\n\t\t\t\t\t .then(function(data) {\n\t\t\t\t\t\t// Unpack JSON data in the response object\n\t\t\t\t\t\t\t// to find maxRemainingAmount\n\t\t\t\t\t\t\tvm.isCreditOk = vm.total <= maxRemainingAmount\n\t\t\t\t\t })\n\t\t\t\t\t .catch(function(error) {\n\t\t\t\t\t\t\t// Interpret error\n\t\t\t\t\t\t\t// Cope w/ timeout? retry? try alternate service?\n\t\t\t\t\t\t\t// Re-reject with appropriate error for a user to see\n\t\t\t\t\t });\n\t };\n}\n```\n\n```javascript\n/* 推荐 */\nfunction OrderController(creditService){\n\t\tvar vm = this;\n\t\tvm.checkCredit = checkCredit;\n\t\tvm.isCreditOk;\n\t\tvm.total = 0;\n\n\t\tfunction checkCredit(){\n\t\t\t\treturn creditService.isOrderTotalOk(vm.total)\n\t\t\t\t\t.then(function(isOk){ vm.isCreditOk = ok; })\n\t\t\t\t\t.catch(showError);\n\t\t}\n}\n```\n### 使控制器更专注\n###### [Style [Y037](#style-y037)]\n\n\t- 为一个视图定义一个控制器，不要试图在其他视图中复用控制器，而是将可以复用的逻辑转移到工厂中，保持控制器的简单并专注与当前视图。\n\n\t*Why?*: 在很多的视图上复用控制器是脆弱的，端对端（end-to-end）测试需要保证访问一个复杂的应用时的稳定性\n\n### 分配控制器\n###### [Style [Y038](#style-y038)]\n\n\t- 当一个控制器必须搭配一个视图并且其他组件需要复用其他的控制器或视图，在它的路由中单独定义控制器。\n\n\t注意: 如果视图加载依赖其他视图，这意味着另外的一种途径，尝试使用`ng-controller=\"Avengers as vm\"` 语句.\n","slug":"AngularJS 1x Style Guide","published":1,"updated":"2018-01-07T22:28:37.000Z","comments":1,"photos":[],"link":"","_id":"cjc88rlgf0003a1jgpmnvt75w","content":"<h1 id=\"Angular-1-x-编码规则\"><a href=\"#Angular-1-x-编码规则\" class=\"headerlink\" title=\"Angular 1.x 编码规则\"></a>Angular 1.x 编码规则</h1><h2 id=\"Angular-团队支持\"><a href=\"#Angular-团队支持\" class=\"headerlink\" title=\"Angular 团队支持\"></a>Angular 团队支持</h2><p>&lt;非常感谢Angular团队领导Igor Minar,检查审视，贡献必要的资料</p>\n<h2 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h2><pre><code>1.[单一职责](#single-responsibility)\n2.[IIFE](#iife)\n3.[Modules](#modules)\n4.[Controllers](#controllers)\n5.[Services](#services)\n6.[Factories](#factories)\n7.[数据服务](#dataservices)\n8.[Directives](#directives)\n9.[Promises解决方案](#promises)\n10.[手动依赖注入](#manualdi)\n11.[压缩和注解](#minification-and-annotation)\n12.[异常处理](#exception-handling)\n13.[命名规则](#naming)\n14.[应用结构优化准则](#application-structure-lift-principle)\n15.[应用结构](#application-structure)\n16.[模块化](#modularity)\n17.[启动](#startup-logic)\n18.[Angular $服务包装](#angular-wrapper-services)\n19.[测试](#testing)\n20.[动画](#animations)\n21.[评论](#comments)\n22.[JSHint](#js-hint)\n23.[JSCS](#jscs)\n24.[常量](#constants)\n25.[文件模板和代码片段](#file-templates-and-snippets)\n26.[路由](#routing)\n27.[自动化任务](#task-automation)\n28.[Filter过滤器](#filter)\n29.[Angular 文档](#angular-docs)\n</code></pre><h2 id=\"单一职责\"><a href=\"#单一职责\" class=\"headerlink\" title=\"单一职责\"></a>单一职责</h2><h3 id=\"规则1\"><a href=\"#规则1\" class=\"headerlink\" title=\"规则1\"></a>规则1</h3><h5 id=\"Style-Y001\"><a href=\"#Style-Y001\" class=\"headerlink\" title=\"[Style Y001]\"></a>[Style <a href=\"#style-y001\">Y001</a>]</h5><pre><code>- 每个文件仅包含一个组件，并且使其少于400行代码，它的好处在于\n    1.对于测试来说更加容易\n    1.使得代码可读性更强，更好维护，避免团队在源代码控制方面的问题\n    1.可以避免 多个组件在共享变量，创建不必要的闭包，或者不必要的耦合和依赖 时隐藏的错误\n</code></pre><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*不规范示例*/</span></span><br><span class=\"line\">angular</span><br><span class=\"line\">\t.module(<span class=\"string\">'app'</span>,[<span class=\"string\">'ngRoute'</span>])</span><br><span class=\"line\">\t.controller(<span class=\"string\">'SomController'</span>,SomeController)</span><br><span class=\"line\">\t.factory(<span class=\"string\">'SomeFactory'</span>,SomeFactory);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">SomeController</span>(<span class=\"params\"></span>)</span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">SomeFactory</span>(<span class=\"params\"></span>)</span>&#123;&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*推荐*/</span></span><br><span class=\"line\"><span class=\"comment\">//app.module.js</span></span><br><span class=\"line\">angular</span><br><span class=\"line\">\t.module(<span class=\"string\">'app'</span>,[<span class=\"string\">'ngRoute'</span>]);</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*some.controller.js*/</span></span><br><span class=\"line\">angular</span><br><span class=\"line\">\t.module(<span class=\"string\">'app'</span>)</span><br><span class=\"line\">\t.controller(<span class=\"string\">'SomeController'</span>,SomeController);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">SomeController</span>(<span class=\"params\"></span>) </span>&#123; &#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* recommended */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// some.factory.js</span></span><br><span class=\"line\">angular</span><br><span class=\"line\">\t\t.module(<span class=\"string\">'app'</span>)</span><br><span class=\"line\">\t\t.factory(<span class=\"string\">'someFactory'</span>, someFactory);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">someFactory</span>(<span class=\"params\"></span>) </span>&#123; &#125;</span><br></pre></td></tr></table></figure>\n<p><strong><a href=\"table-of-contents\">返回顶部</a></strong></p>\n<h2 id=\"IIFE-立即执行方法-Immediately-Invoked-Function-Expression-IIFE\"><a href=\"#IIFE-立即执行方法-Immediately-Invoked-Function-Expression-IIFE\" class=\"headerlink\" title=\"IIFE (立即执行方法 Immediately Invoked Function Expression(IIFE)).\"></a>IIFE (立即执行方法 Immediately Invoked Function Expression(IIFE)).</h2><h3 id=\"Javascript-Scopes\"><a href=\"#Javascript-Scopes\" class=\"headerlink\" title=\"Javascript Scopes\"></a>Javascript Scopes</h3><h6 id=\"Style-Y010\"><a href=\"#Style-Y010\" class=\"headerlink\" title=\"[Style Y010]\"></a>[Style <a href=\"#style-y010\">Y010</a>]</h6><pre><code>- 将Angular组件包含在IIFE代码块中，这样的优势在于\n1.一个IIFE将变量从全局作用域中移出，这会有效的方式变量和方法之间的命名冲突\n1.当你将你的代码从开发板 压缩和打包 到生产服务器上的时候，会有很多全局作用域下的变量发生冲突，\n这时IIFE就可以有效的隔离这些变量\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 不规范 */</span></span><br><span class=\"line\"><span class=\"comment\">// logger.js</span></span><br><span class=\"line\">angular</span><br><span class=\"line\">    .module(<span class=\"string\">'app'</span>)</span><br><span class=\"line\">    .factory(<span class=\"string\">'logger'</span>, logger);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// logger 方法已经添加到了全局作用域中</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">logger</span>(<span class=\"params\"></span>) </span>&#123; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// storage.js</span></span><br><span class=\"line\">angular</span><br><span class=\"line\">    .module(<span class=\"string\">'app'</span>)</span><br><span class=\"line\">    .factory(<span class=\"string\">'storage'</span>, storage);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// storage 方法已经添加到了全局作用域中</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">storage</span>(<span class=\"params\"></span>) </span>&#123; &#125;</span><br></pre></td></tr></table></figure>\n</code></pre>  <figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 推荐</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * 下面代码中没有全局作用域变量和方法</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// logger.js</span></span><br><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"><span class=\"meta\">    'use strict'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    angular</span><br><span class=\"line\">        .module(<span class=\"string\">'app'</span>)</span><br><span class=\"line\">        .factory(<span class=\"string\">'logger'</span>, logger);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">logger</span>(<span class=\"params\"></span>) </span>&#123; &#125;</span><br><span class=\"line\">&#125;)();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// storage.js</span></span><br><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"><span class=\"meta\">    'use strict'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    angular</span><br><span class=\"line\">        .module(<span class=\"string\">'app'</span>)</span><br><span class=\"line\">        .factory(<span class=\"string\">'storage'</span>, storage);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">storage</span>(<span class=\"params\"></span>) </span>&#123; &#125;</span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure>\n<pre><code>**[返回顶部](#table-of-contents)**\n</code></pre><h2 id=\"Modules\"><a href=\"#Modules\" class=\"headerlink\" title=\"Modules\"></a>Modules</h2><h3 id=\"避免命名冲突\"><a href=\"#避免命名冲突\" class=\"headerlink\" title=\"避免命名冲突\"></a>避免命名冲突</h3><h6 id=\"Style-Y020\"><a href=\"#Style-Y020\" class=\"headerlink\" title=\"[Style Y020]\"></a>[Style <a href=\"#style-y020\">Y020</a>]</h6><pre><code>- 使用统一的子模块命名规则可以帮助避免模块命名冲突。分隔符帮助定义模块和他们的子模块之间的层次结构\n例如`app`可以作为父模块名，`app.dashboard`和`app.users`模块作为依赖于`app`模块的子模块。\n</code></pre><h3 id=\"定义-or-设置\"><a href=\"#定义-or-设置\" class=\"headerlink\" title=\"定义(or 设置)\"></a>定义(or 设置)</h3><h6 id=\"Style-Y021\"><a href=\"#Style-Y021\" class=\"headerlink\" title=\"[Style Y021]\"></a>[Style <a href=\"#style-y021\">Y021</a>]</h6><pre><code>- 可以使用模块的setter语法定义模块，而不要使用变量定义模块。\n        在单一组件文件中，使用到模块变量的情况会变得非常少。\n        <figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 避免使用 */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> app = angular.module(<span class=\"string\">'app'</span>, [</span><br><span class=\"line\">    <span class=\"string\">'ngAnimate'</span>,</span><br><span class=\"line\">    <span class=\"string\">'ngRoute'</span>,</span><br><span class=\"line\">    <span class=\"string\">'app.shared'</span>,</span><br><span class=\"line\">    <span class=\"string\">'app.dashboard'</span></span><br><span class=\"line\">]);</span><br></pre></td></tr></table></figure>\n\n      <figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 推荐方式 */</span></span><br><span class=\"line\">angular</span><br><span class=\"line\">    .module(<span class=\"string\">'app'</span>, [</span><br><span class=\"line\">        <span class=\"string\">'ngAnimate'</span>,</span><br><span class=\"line\">        <span class=\"string\">'ngRoute'</span>,</span><br><span class=\"line\">        <span class=\"string\">'app.shared'</span>,</span><br><span class=\"line\">        <span class=\"string\">'app.dashboard'</span></span><br><span class=\"line\">    ]);</span><br></pre></td></tr></table></figure>\n</code></pre><h3 id=\"Getters\"><a href=\"#Getters\" class=\"headerlink\" title=\"Getters\"></a>Getters</h3><h6 id=\"Style-Y022\"><a href=\"#Style-Y022\" class=\"headerlink\" title=\"[Style Y022]\"></a>[Style <a href=\"#style-y022\">Y022</a>]</h6><pre><code>- 当使用一个模块的时候，可以使用getter链而非变量装载。\n    这样可以使项目代码的可读性更高并且避免变量冲突\n\n    <figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 避免使用 */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> app = angular.module(<span class=\"string\">'app'</span>);</span><br><span class=\"line\">app.controller(<span class=\"string\">'SomeController'</span>, SomeController);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">SomeController</span>(<span class=\"params\"></span>) </span>&#123; &#125;</span><br></pre></td></tr></table></figure>\n\n  <figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 推荐使用 */</span></span><br><span class=\"line\">angular</span><br><span class=\"line\">    .module(<span class=\"string\">'app'</span>)</span><br><span class=\"line\">    .controller(<span class=\"string\">'SomeController'</span>, SomeController);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">SomeController</span>(<span class=\"params\"></span>) </span>&#123; &#125;</span><br></pre></td></tr></table></figure>\n</code></pre><h3 id=\"Getter-方法和Setter-方法之间的比较\"><a href=\"#Getter-方法和Setter-方法之间的比较\" class=\"headerlink\" title=\"Getter 方法和Setter 方法之间的比较\"></a>Getter 方法和Setter 方法之间的比较</h3><h6 id=\"Style-Y023\"><a href=\"#Style-Y023\" class=\"headerlink\" title=\"[Style Y023]\"></a>[Style <a href=\"#style-y023\">Y023</a>]</h6><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* recommended */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 创建一个模块</span></span><br><span class=\"line\">angular.module(<span class=\"string\">'app'</span>, []);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 从模块集合中取出这个模块</span></span><br><span class=\"line\">angular.module(<span class=\"string\">'app'</span>);</span><br></pre></td></tr></table></figure>\n<h3 id=\"命名-与-匿名方法之间的比较\"><a href=\"#命名-与-匿名方法之间的比较\" class=\"headerlink\" title=\"命名 与 匿名方法之间的比较\"></a>命名 与 匿名方法之间的比较</h3><h6 id=\"Style-Y024\"><a href=\"#Style-Y024\" class=\"headerlink\" title=\"[Style Y024]\"></a>[Style <a href=\"#style-y024\">Y024</a>]</h6><pre><code>- 在回调函数中尽量使用命名方法代替匿名方法，这样会使得代码的可读性更高，并且提升代码可复用的程度\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 避免使用 */</span></span><br><span class=\"line\">angular</span><br><span class=\"line\">    .module(<span class=\"string\">'app'</span>)</span><br><span class=\"line\">    .controller(<span class=\"string\">'DashboardController'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; &#125;)</span><br><span class=\"line\">    .factory(<span class=\"string\">'logger'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; &#125;);</span><br></pre></td></tr></table></figure>\n</code></pre>  <figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 推荐使用 */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// dashboard.js</span></span><br><span class=\"line\">angular</span><br><span class=\"line\">    .module(<span class=\"string\">'app'</span>)</span><br><span class=\"line\">    .controller(<span class=\"string\">'DashboardController'</span>, DashboardController);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">DashboardController</span>(<span class=\"params\"></span>) </span>&#123; &#125;</span><br></pre></td></tr></table></figure>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// logger.js</span></span><br><span class=\"line\">angular</span><br><span class=\"line\">    .module(<span class=\"string\">'app'</span>)</span><br><span class=\"line\">    .factory(<span class=\"string\">'logger'</span>, logger);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">logger</span>(<span class=\"params\"></span>) </span>&#123; &#125;</span><br></pre></td></tr></table></figure>\n<p><strong><a href=\"#table-of-contents\">Back to top</a></strong></p>\n<h2 id=\"控制器Controllers\"><a href=\"#控制器Controllers\" class=\"headerlink\" title=\"控制器Controllers\"></a>控制器Controllers</h2><h3 id=\"controllerAs-View-Syntax\"><a href=\"#controllerAs-View-Syntax\" class=\"headerlink\" title=\"controllerAs View Syntax\"></a>controllerAs View Syntax</h3><h6 id=\"Style-Y030\"><a href=\"#Style-Y030\" class=\"headerlink\" title=\"[Style Y030]\"></a>[Style <a href=\"#style-y030\">Y030</a>]</h6><pre><code>-使用[`controllerAs`](http://www.johnpapa.net/do-you-like-your-angular-controllers-with-or-without-sugar/) 语句替代`经典控制器$scope`语句\n    1.控制器构造、新建的时候回提供一个简单的实例，而`controllerAs`语句相比`传统$scope 语句`更接近Javascript原声方法\n    1.它会在视图中使用一个虚拟的对象绑定（例如 使用`customer.name` 代替 `name`）,更加贴近上下文关系，\n    增加刻度性，避免引用冲突问题\n    1.帮助避免在视图嵌套控制器中使用`$parent`\n\n    <figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- avoid --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">ng-controller</span>=<span class=\"string\">\"CustomerController\"</span>&gt;</span></span><br><span class=\"line\">    &#123;&#123; name &#125;&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n  <figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- recommended --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">ng-controller</span>=<span class=\"string\">\"CustomerController as customer\"</span>&gt;</span></span><br><span class=\"line\">    &#123;&#123; customer.name &#125;&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</code></pre><h3 id=\"controllerAs-控制器语句\"><a href=\"#controllerAs-控制器语句\" class=\"headerlink\" title=\"controllerAs 控制器语句\"></a>controllerAs 控制器语句</h3><h6 id=\"Style-Y031\"><a href=\"#Style-Y031\" class=\"headerlink\" title=\"[Style Y031]\"></a>[Style <a href=\"#style-y031\">Y031</a>]</h6><pre><code>- 使用`controllerAs`语句替代`传统controller中的$scope`\n\n- `controllerAs`语句在Controller内部使用`this`将数据绑定在`$scope`上\n`controllerAs` 是`$scope`语法糖。你依然可以使用`$scope`方法.\n\n*Why?*:`controllerAs`语句是`$scope`基础上的一种语法糖，你可以继续使用`$scope`绑定变量和方法。\n\n*Why?*:帮助避免在控制器中使用`$scope`方法，用其他的方式实现或者将他们移动到工厂方法中，并在控制器中引用.控制器应仅在需要的时候使用`$scope`，再实例中，当我们使用[`$emit`](https://docs.angularjs.org/api/ng/type/$rootScope.Scope#$emit), [`$broadcast`](https://docs.angularjs.org/api/ng/type/$rootScope.Scope#$broadcast) 或者 [`$on`](https://docs.angularjs.org/api/ng/type/$rootScope.Scope#$on). 一个变量或者声明一个事件\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 避免使用 */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">CustomerController</span>(<span class=\"params\">$scope</span>)</span>&#123;</span><br><span class=\"line\">\t$scope.name = &#123;&#125;;</span><br><span class=\"line\">\t$scope.sendMessage = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 推荐 */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">CustomerController</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.name = &#123;&#125;;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.sendMessage = <span class=\"function\"><span class=\"keyword\">function</span> </span>&#123;&#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</code></pre><h3 id=\"controllerAs-和-VM\"><a href=\"#controllerAs-和-VM\" class=\"headerlink\" title=\"controllerAs 和 VM\"></a>controllerAs 和 VM</h3><h6 id=\"Style-Y032\"><a href=\"#Style-Y032\" class=\"headerlink\" title=\"[Style Y032]\"></a>[Style <a href=\"#style-y032\">Y032</a>]</h6><pre><code>- 当使用`controllerAs`语法的时候，捕捉一个变量替代`this`，选择统一的变量名`vm`，代表 ViewModel。\n\n*Why?*：`this` 关键字是作为上下文对象，当使用控制器内部的方法有可能会改变它的作用域，捕捉上下文中的`this`避免遇到这种问题\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 错误的示例 */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">CustomerController</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.name = &#123;&#125;;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.sendMessage = &#123;&#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 推荐的方式 */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">CustomerController</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> vm = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">\t\tvm.name = &#123;&#125;;</span><br><span class=\"line\">\t\tvm.sendMessage = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</code></pre><p>注意:你通过在代码上添加注释避免任何的<a href=\"http://jshint.com/\" target=\"_blank\" rel=\"noopener\">jshint</a>警告。但是，这不需要将方法使用大写命名，这只是个对于构造方法的惯例。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* jshint validthis : true */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> vm = <span class=\"keyword\">this</span>;</span><br></pre></td></tr></table></figure>\n<p>注意:当在控制器中使用<code>controller as</code>创建一个监听时，你可以监听<code>vm.*</code><br>(创建监听的时候需要小心监听导致的更多的负载)</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">ng-model</span> = <span class=\"string\">\"vm.tite\"</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">SomeController</span>(<span class=\"params\">$scope,$log</span>)</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> vm = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">\t\tvm.title = <span class=\"string\">'Some Title'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t$scope.watch(<span class=\"string\">'vm.title'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t\t\t\t$log.info(<span class=\"string\">'vm.title was %s'</span>,original);</span><br><span class=\"line\">\t\t&#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>注意:当基于一个庞大的代码库工作时，使用更多的描述性命名可以帮助简化的认知负荷和搜素，避免坑长的名字和繁琐的输入。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 避免使用 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">ng-model</span>=<span class=\"string\">\"customerProductItemVm.title\"</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 推荐 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">ng-model</span>=<span class=\"string\">\"productVm.title\"</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"将绑定成员提取到首位\"><a href=\"#将绑定成员提取到首位\" class=\"headerlink\" title=\"将绑定成员提取到首位\"></a>将绑定成员提取到首位</h3><pre><code>- 将需要绑定的成员按照字母顺序放在控制器的上方，并且不要扩散到控制器代码\n\n*Why?*:将需要绑定的成员防止在首位可以提升代码的可读性，并且帮你快速识别这个控制器需要绑定的成员都有哪些\n\n*Why?*:设置匿名行内函数当然可以使得代码简单，但是当哪些方法体多余一行代码的时候，他们会很大程序上降低代码可读性。将方法定义在绑定成员的下方（哪些方法会被提升）将实现细节移动到下方，保持绑定成员在上方，使代码可读性更好。\n</code></pre><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 避免 */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">SessionsController</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> vm = <span class=\"keyword\">this</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\tvm.gotoSession = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">\tvm.refresh = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 推荐 */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">SessionsController</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> vm = <span class=\"keyword\">this</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\tvm.gotoSession = gotoSession;</span><br><span class=\"line\">\tvm.refresh = refresh;</span><br><span class=\"line\">\tvm.search = search;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">gotoSession</span>(<span class=\"params\"></span>)</span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">refresh</span>(<span class=\"params\"></span>)</span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">search</span>(<span class=\"params\"></span>)</span>&#123;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<pre><code>![Controller Using &quot;Above the Fold&quot;](https://raw.githubusercontent.com/johnpapa/angular-styleguide/master/a1/assets/above-the-fold-1.png)\n</code></pre><p>注意：如果这个方法的代码只有一行可以将它保持在上方，这样并不影响可读性。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 避免 */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">SessionController</span>(<span class=\"params\">data</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> vm = <span class=\"keyword\">this</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\tvm.gotoSession = gotoSession;</span><br><span class=\"line\"></span><br><span class=\"line\">\tvm.refresh = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t\t * lines</span></span><br><span class=\"line\"><span class=\"comment\">\t\t * of</span></span><br><span class=\"line\"><span class=\"comment\">\t\t * code</span></span><br><span class=\"line\"><span class=\"comment\">\t\t * affects</span></span><br><span class=\"line\"><span class=\"comment\">\t\t * readabibity</span></span><br><span class=\"line\"><span class=\"comment\">\t\t*/</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tvm.search = search;</span><br><span class=\"line\">\tvm.sessions = [];</span><br><span class=\"line\">\tvm.title = <span class=\"string\">'Sessions'</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 推荐方式 */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">SessionsController</span>(<span class=\"params\">sessionDataService</span>) </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> vm = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">\t\tvm.gotoSession = gotoSession;</span><br><span class=\"line\">\t\tvm.refresh = sessionDataService.refresh; <span class=\"comment\">// 1 liner is OK</span></span><br><span class=\"line\">\t\tvm.search = search;</span><br><span class=\"line\">\t\tvm.sessions = [];</span><br><span class=\"line\">\t\tvm.title = <span class=\"string\">'Sessions'</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"通过方法定义隐藏实现\"><a href=\"#通过方法定义隐藏实现\" class=\"headerlink\" title=\"通过方法定义隐藏实现\"></a>通过方法定义隐藏实现</h3><h6 id=\"Style-Y034\"><a href=\"#Style-Y034\" class=\"headerlink\" title=\"[Style Y034]\"></a>[Style <a href=\"#style-y034\">Y034</a>]</h6><pre><code>- 使用方法定义隐藏方法实现细节。保持你的邦定成员在上方，当你需要在一个控制器中绑定一个方法的时候，它指向出现在这个文件中的一个函数声明。这是直接绑定部分成员，更多细节详见[这篇文章](http://www.johnpapa.net/angular-function-declarations-function-expressions-and-readable-code/)\n</code></pre><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 避免使用 */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">AvengersController</span>(<span class=\"params\">avengersService,logger</span>)</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> vm = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">\t\tvm.avengers = [];</span><br><span class=\"line\">\t\tvm.title = <span class=\"string\">'Avengers'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> activate = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> getAvengers().then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t\t\t\t\t\tlogger.info(<span class=\"string\">'Activated Avengers View'</span>);</span><br><span class=\"line\">\t\t\t\t&#125;)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> getAvengers = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> avengersService.getAvengers().then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>)</span>&#123;</span><br><span class=\"line\">\t\t\t\t\t\tvm.avengers = data;</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">return</span> vm.avengers;</span><br><span class=\"line\">\t\t\t\t&#125;);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tvm.getAvengers = getAvengers;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tactivate();</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">注意:在上面的示例中重要的东西都很分散。下面的代码中，注意重要的东西都在上方</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">``</span><span class=\"string\">`javascript</span></span><br><span class=\"line\"><span class=\"string\">/* 推荐</span></span><br><span class=\"line\"><span class=\"string\">使用方法定义，绑定成员定义在上方</span></span><br><span class=\"line\"><span class=\"string\">*/</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">function AvengersController(avengerService,logger)&#123;</span></span><br><span class=\"line\"><span class=\"string\">\t\tvar vm = this;</span></span><br><span class=\"line\"><span class=\"string\">\t\tvm.avengers = [];</span></span><br><span class=\"line\"><span class=\"string\">\t\tvm.getAvengers = getAvengers;</span></span><br><span class=\"line\"><span class=\"string\">\t\tvm.title = '';</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">\t\tactive();</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">\t\tfunction activate()&#123;</span></span><br><span class=\"line\"><span class=\"string\">\t\t\t\treturn getAvengers().then(function()&#123;</span></span><br><span class=\"line\"><span class=\"string\">\t\t\t\t\t\tlogger.info('Activated Avengers View');</span></span><br><span class=\"line\"><span class=\"string\">\t\t\t\t&#125;)</span></span><br><span class=\"line\"><span class=\"string\">\t\t&#125;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">\t\tfunction geetAvengers()&#123;</span></span><br><span class=\"line\"><span class=\"string\">\t\t\t\treturn avengersService.getAvengers().then(function(data)&#123;</span></span><br><span class=\"line\"><span class=\"string\">\t\t\t\t\t\tvm.avengers = data;</span></span><br><span class=\"line\"><span class=\"string\">\t\t\t\t\t\treturn vm.avengers;</span></span><br><span class=\"line\"><span class=\"string\">\t\t\t\t&#125;);</span></span><br><span class=\"line\"><span class=\"string\">\t\t&#125;</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"将控制器移动到服务-Service-中\"><a href=\"#将控制器移动到服务-Service-中\" class=\"headerlink\" title=\"将控制器移动到服务(Service)中\"></a>将控制器移动到服务(Service)中</h3><h6 id=\"Style-Y035\"><a href=\"#Style-Y035\" class=\"headerlink\" title=\"[Style Y035]\"></a>[Style <a href=\"#style-y035\">Y035</a>]</h6><pre><code>- 将控制器中的逻辑移动到服务器或者工厂方法中\n</code></pre><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* avoid */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">OrderController</span>(<span class=\"params\">$http, $q, config, userInfo</span>) </span>&#123;</span><br><span class=\"line\">\t <span class=\"keyword\">var</span> vm = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">\t vm.checkCredit = checkCredit;</span><br><span class=\"line\">\t vm.isCreditOk;</span><br><span class=\"line\">\t vm.total = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">checkCredit</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t\t\t <span class=\"keyword\">var</span> settings = &#123;&#125;;</span><br><span class=\"line\">\t\t\t <span class=\"comment\">// Get the credit service base URL from config</span></span><br><span class=\"line\">\t\t\t <span class=\"comment\">// Set credit service required headers</span></span><br><span class=\"line\">\t\t\t <span class=\"comment\">// Prepare URL query string or data object with request data</span></span><br><span class=\"line\">\t\t\t <span class=\"comment\">// Add user-identifying info so service gets the right credit limit for this user.</span></span><br><span class=\"line\">\t\t\t <span class=\"comment\">// Use JSONP for this browser if it doesn't support CORS</span></span><br><span class=\"line\">\t\t\t <span class=\"keyword\">return</span> $http.get(settings)</span><br><span class=\"line\">\t\t\t\t\t .then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>) </span>&#123;</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"comment\">// Unpack JSON data in the response object</span></span><br><span class=\"line\">\t\t\t\t\t\t\t<span class=\"comment\">// to find maxRemainingAmount</span></span><br><span class=\"line\">\t\t\t\t\t\t\tvm.isCreditOk = vm.total &lt;= maxRemainingAmount</span><br><span class=\"line\">\t\t\t\t\t &#125;)</span><br><span class=\"line\">\t\t\t\t\t .catch(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">error</span>) </span>&#123;</span><br><span class=\"line\">\t\t\t\t\t\t\t<span class=\"comment\">// Interpret error</span></span><br><span class=\"line\">\t\t\t\t\t\t\t<span class=\"comment\">// Cope w/ timeout? retry? try alternate service?</span></span><br><span class=\"line\">\t\t\t\t\t\t\t<span class=\"comment\">// Re-reject with appropriate error for a user to see</span></span><br><span class=\"line\">\t\t\t\t\t &#125;);</span><br><span class=\"line\">\t &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 推荐 */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">OrderController</span>(<span class=\"params\">creditService</span>)</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> vm = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">\t\tvm.checkCredit = checkCredit;</span><br><span class=\"line\">\t\tvm.isCreditOk;</span><br><span class=\"line\">\t\tvm.total = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">checkCredit</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> creditService.isOrderTotalOk(vm.total)</span><br><span class=\"line\">\t\t\t\t\t.then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">isOk</span>)</span>&#123; vm.isCreditOk = ok; &#125;)</span><br><span class=\"line\">\t\t\t\t\t.catch(showError);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"使控制器更专注\"><a href=\"#使控制器更专注\" class=\"headerlink\" title=\"使控制器更专注\"></a>使控制器更专注</h3><h6 id=\"Style-Y037\"><a href=\"#Style-Y037\" class=\"headerlink\" title=\"[Style Y037]\"></a>[Style <a href=\"#style-y037\">Y037</a>]</h6><pre><code>- 为一个视图定义一个控制器，不要试图在其他视图中复用控制器，而是将可以复用的逻辑转移到工厂中，保持控制器的简单并专注与当前视图。\n\n*Why?*: 在很多的视图上复用控制器是脆弱的，端对端（end-to-end）测试需要保证访问一个复杂的应用时的稳定性\n</code></pre><h3 id=\"分配控制器\"><a href=\"#分配控制器\" class=\"headerlink\" title=\"分配控制器\"></a>分配控制器</h3><h6 id=\"Style-Y038\"><a href=\"#Style-Y038\" class=\"headerlink\" title=\"[Style Y038]\"></a>[Style <a href=\"#style-y038\">Y038</a>]</h6><pre><code>- 当一个控制器必须搭配一个视图并且其他组件需要复用其他的控制器或视图，在它的路由中单独定义控制器。\n\n注意: 如果视图加载依赖其他视图，这意味着另外的一种途径，尝试使用`ng-controller=&quot;Avengers as vm&quot;` 语句.\n</code></pre>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Angular-1-x-编码规则\"><a href=\"#Angular-1-x-编码规则\" class=\"headerlink\" title=\"Angular 1.x 编码规则\"></a>Angular 1.x 编码规则</h1><h2 id=\"Angular-团队支持\"><a href=\"#Angular-团队支持\" class=\"headerlink\" title=\"Angular 团队支持\"></a>Angular 团队支持</h2><p>&lt;非常感谢Angular团队领导Igor Minar,检查审视，贡献必要的资料</p>\n<h2 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h2><pre><code>1.[单一职责](#single-responsibility)\n2.[IIFE](#iife)\n3.[Modules](#modules)\n4.[Controllers](#controllers)\n5.[Services](#services)\n6.[Factories](#factories)\n7.[数据服务](#dataservices)\n8.[Directives](#directives)\n9.[Promises解决方案](#promises)\n10.[手动依赖注入](#manualdi)\n11.[压缩和注解](#minification-and-annotation)\n12.[异常处理](#exception-handling)\n13.[命名规则](#naming)\n14.[应用结构优化准则](#application-structure-lift-principle)\n15.[应用结构](#application-structure)\n16.[模块化](#modularity)\n17.[启动](#startup-logic)\n18.[Angular $服务包装](#angular-wrapper-services)\n19.[测试](#testing)\n20.[动画](#animations)\n21.[评论](#comments)\n22.[JSHint](#js-hint)\n23.[JSCS](#jscs)\n24.[常量](#constants)\n25.[文件模板和代码片段](#file-templates-and-snippets)\n26.[路由](#routing)\n27.[自动化任务](#task-automation)\n28.[Filter过滤器](#filter)\n29.[Angular 文档](#angular-docs)\n</code></pre><h2 id=\"单一职责\"><a href=\"#单一职责\" class=\"headerlink\" title=\"单一职责\"></a>单一职责</h2><h3 id=\"规则1\"><a href=\"#规则1\" class=\"headerlink\" title=\"规则1\"></a>规则1</h3><h5 id=\"Style-Y001\"><a href=\"#Style-Y001\" class=\"headerlink\" title=\"[Style Y001]\"></a>[Style <a href=\"#style-y001\">Y001</a>]</h5><pre><code>- 每个文件仅包含一个组件，并且使其少于400行代码，它的好处在于\n    1.对于测试来说更加容易\n    1.使得代码可读性更强，更好维护，避免团队在源代码控制方面的问题\n    1.可以避免 多个组件在共享变量，创建不必要的闭包，或者不必要的耦合和依赖 时隐藏的错误\n</code></pre><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*不规范示例*/</span></span><br><span class=\"line\">angular</span><br><span class=\"line\">\t.module(<span class=\"string\">'app'</span>,[<span class=\"string\">'ngRoute'</span>])</span><br><span class=\"line\">\t.controller(<span class=\"string\">'SomController'</span>,SomeController)</span><br><span class=\"line\">\t.factory(<span class=\"string\">'SomeFactory'</span>,SomeFactory);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">SomeController</span>(<span class=\"params\"></span>)</span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">SomeFactory</span>(<span class=\"params\"></span>)</span>&#123;&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*推荐*/</span></span><br><span class=\"line\"><span class=\"comment\">//app.module.js</span></span><br><span class=\"line\">angular</span><br><span class=\"line\">\t.module(<span class=\"string\">'app'</span>,[<span class=\"string\">'ngRoute'</span>]);</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*some.controller.js*/</span></span><br><span class=\"line\">angular</span><br><span class=\"line\">\t.module(<span class=\"string\">'app'</span>)</span><br><span class=\"line\">\t.controller(<span class=\"string\">'SomeController'</span>,SomeController);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">SomeController</span>(<span class=\"params\"></span>) </span>&#123; &#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* recommended */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// some.factory.js</span></span><br><span class=\"line\">angular</span><br><span class=\"line\">\t\t.module(<span class=\"string\">'app'</span>)</span><br><span class=\"line\">\t\t.factory(<span class=\"string\">'someFactory'</span>, someFactory);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">someFactory</span>(<span class=\"params\"></span>) </span>&#123; &#125;</span><br></pre></td></tr></table></figure>\n<p><strong><a href=\"table-of-contents\">返回顶部</a></strong></p>\n<h2 id=\"IIFE-立即执行方法-Immediately-Invoked-Function-Expression-IIFE\"><a href=\"#IIFE-立即执行方法-Immediately-Invoked-Function-Expression-IIFE\" class=\"headerlink\" title=\"IIFE (立即执行方法 Immediately Invoked Function Expression(IIFE)).\"></a>IIFE (立即执行方法 Immediately Invoked Function Expression(IIFE)).</h2><h3 id=\"Javascript-Scopes\"><a href=\"#Javascript-Scopes\" class=\"headerlink\" title=\"Javascript Scopes\"></a>Javascript Scopes</h3><h6 id=\"Style-Y010\"><a href=\"#Style-Y010\" class=\"headerlink\" title=\"[Style Y010]\"></a>[Style <a href=\"#style-y010\">Y010</a>]</h6><pre><code>- 将Angular组件包含在IIFE代码块中，这样的优势在于\n1.一个IIFE将变量从全局作用域中移出，这会有效的方式变量和方法之间的命名冲突\n1.当你将你的代码从开发板 压缩和打包 到生产服务器上的时候，会有很多全局作用域下的变量发生冲突，\n这时IIFE就可以有效的隔离这些变量\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 不规范 */</span></span><br><span class=\"line\"><span class=\"comment\">// logger.js</span></span><br><span class=\"line\">angular</span><br><span class=\"line\">    .module(<span class=\"string\">'app'</span>)</span><br><span class=\"line\">    .factory(<span class=\"string\">'logger'</span>, logger);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// logger 方法已经添加到了全局作用域中</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">logger</span>(<span class=\"params\"></span>) </span>&#123; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// storage.js</span></span><br><span class=\"line\">angular</span><br><span class=\"line\">    .module(<span class=\"string\">'app'</span>)</span><br><span class=\"line\">    .factory(<span class=\"string\">'storage'</span>, storage);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// storage 方法已经添加到了全局作用域中</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">storage</span>(<span class=\"params\"></span>) </span>&#123; &#125;</span><br></pre></td></tr></table></figure>\n</code></pre>  <figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 推荐</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * 下面代码中没有全局作用域变量和方法</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// logger.js</span></span><br><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"><span class=\"meta\">    'use strict'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    angular</span><br><span class=\"line\">        .module(<span class=\"string\">'app'</span>)</span><br><span class=\"line\">        .factory(<span class=\"string\">'logger'</span>, logger);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">logger</span>(<span class=\"params\"></span>) </span>&#123; &#125;</span><br><span class=\"line\">&#125;)();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// storage.js</span></span><br><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"><span class=\"meta\">    'use strict'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    angular</span><br><span class=\"line\">        .module(<span class=\"string\">'app'</span>)</span><br><span class=\"line\">        .factory(<span class=\"string\">'storage'</span>, storage);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">storage</span>(<span class=\"params\"></span>) </span>&#123; &#125;</span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure>\n<pre><code>**[返回顶部](#table-of-contents)**\n</code></pre><h2 id=\"Modules\"><a href=\"#Modules\" class=\"headerlink\" title=\"Modules\"></a>Modules</h2><h3 id=\"避免命名冲突\"><a href=\"#避免命名冲突\" class=\"headerlink\" title=\"避免命名冲突\"></a>避免命名冲突</h3><h6 id=\"Style-Y020\"><a href=\"#Style-Y020\" class=\"headerlink\" title=\"[Style Y020]\"></a>[Style <a href=\"#style-y020\">Y020</a>]</h6><pre><code>- 使用统一的子模块命名规则可以帮助避免模块命名冲突。分隔符帮助定义模块和他们的子模块之间的层次结构\n例如`app`可以作为父模块名，`app.dashboard`和`app.users`模块作为依赖于`app`模块的子模块。\n</code></pre><h3 id=\"定义-or-设置\"><a href=\"#定义-or-设置\" class=\"headerlink\" title=\"定义(or 设置)\"></a>定义(or 设置)</h3><h6 id=\"Style-Y021\"><a href=\"#Style-Y021\" class=\"headerlink\" title=\"[Style Y021]\"></a>[Style <a href=\"#style-y021\">Y021</a>]</h6><pre><code>- 可以使用模块的setter语法定义模块，而不要使用变量定义模块。\n        在单一组件文件中，使用到模块变量的情况会变得非常少。\n        <figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 避免使用 */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> app = angular.module(<span class=\"string\">'app'</span>, [</span><br><span class=\"line\">    <span class=\"string\">'ngAnimate'</span>,</span><br><span class=\"line\">    <span class=\"string\">'ngRoute'</span>,</span><br><span class=\"line\">    <span class=\"string\">'app.shared'</span>,</span><br><span class=\"line\">    <span class=\"string\">'app.dashboard'</span></span><br><span class=\"line\">]);</span><br></pre></td></tr></table></figure>\n\n      <figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 推荐方式 */</span></span><br><span class=\"line\">angular</span><br><span class=\"line\">    .module(<span class=\"string\">'app'</span>, [</span><br><span class=\"line\">        <span class=\"string\">'ngAnimate'</span>,</span><br><span class=\"line\">        <span class=\"string\">'ngRoute'</span>,</span><br><span class=\"line\">        <span class=\"string\">'app.shared'</span>,</span><br><span class=\"line\">        <span class=\"string\">'app.dashboard'</span></span><br><span class=\"line\">    ]);</span><br></pre></td></tr></table></figure>\n</code></pre><h3 id=\"Getters\"><a href=\"#Getters\" class=\"headerlink\" title=\"Getters\"></a>Getters</h3><h6 id=\"Style-Y022\"><a href=\"#Style-Y022\" class=\"headerlink\" title=\"[Style Y022]\"></a>[Style <a href=\"#style-y022\">Y022</a>]</h6><pre><code>- 当使用一个模块的时候，可以使用getter链而非变量装载。\n    这样可以使项目代码的可读性更高并且避免变量冲突\n\n    <figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 避免使用 */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> app = angular.module(<span class=\"string\">'app'</span>);</span><br><span class=\"line\">app.controller(<span class=\"string\">'SomeController'</span>, SomeController);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">SomeController</span>(<span class=\"params\"></span>) </span>&#123; &#125;</span><br></pre></td></tr></table></figure>\n\n  <figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 推荐使用 */</span></span><br><span class=\"line\">angular</span><br><span class=\"line\">    .module(<span class=\"string\">'app'</span>)</span><br><span class=\"line\">    .controller(<span class=\"string\">'SomeController'</span>, SomeController);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">SomeController</span>(<span class=\"params\"></span>) </span>&#123; &#125;</span><br></pre></td></tr></table></figure>\n</code></pre><h3 id=\"Getter-方法和Setter-方法之间的比较\"><a href=\"#Getter-方法和Setter-方法之间的比较\" class=\"headerlink\" title=\"Getter 方法和Setter 方法之间的比较\"></a>Getter 方法和Setter 方法之间的比较</h3><h6 id=\"Style-Y023\"><a href=\"#Style-Y023\" class=\"headerlink\" title=\"[Style Y023]\"></a>[Style <a href=\"#style-y023\">Y023</a>]</h6><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* recommended */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 创建一个模块</span></span><br><span class=\"line\">angular.module(<span class=\"string\">'app'</span>, []);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 从模块集合中取出这个模块</span></span><br><span class=\"line\">angular.module(<span class=\"string\">'app'</span>);</span><br></pre></td></tr></table></figure>\n<h3 id=\"命名-与-匿名方法之间的比较\"><a href=\"#命名-与-匿名方法之间的比较\" class=\"headerlink\" title=\"命名 与 匿名方法之间的比较\"></a>命名 与 匿名方法之间的比较</h3><h6 id=\"Style-Y024\"><a href=\"#Style-Y024\" class=\"headerlink\" title=\"[Style Y024]\"></a>[Style <a href=\"#style-y024\">Y024</a>]</h6><pre><code>- 在回调函数中尽量使用命名方法代替匿名方法，这样会使得代码的可读性更高，并且提升代码可复用的程度\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 避免使用 */</span></span><br><span class=\"line\">angular</span><br><span class=\"line\">    .module(<span class=\"string\">'app'</span>)</span><br><span class=\"line\">    .controller(<span class=\"string\">'DashboardController'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; &#125;)</span><br><span class=\"line\">    .factory(<span class=\"string\">'logger'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; &#125;);</span><br></pre></td></tr></table></figure>\n</code></pre>  <figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 推荐使用 */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// dashboard.js</span></span><br><span class=\"line\">angular</span><br><span class=\"line\">    .module(<span class=\"string\">'app'</span>)</span><br><span class=\"line\">    .controller(<span class=\"string\">'DashboardController'</span>, DashboardController);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">DashboardController</span>(<span class=\"params\"></span>) </span>&#123; &#125;</span><br></pre></td></tr></table></figure>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// logger.js</span></span><br><span class=\"line\">angular</span><br><span class=\"line\">    .module(<span class=\"string\">'app'</span>)</span><br><span class=\"line\">    .factory(<span class=\"string\">'logger'</span>, logger);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">logger</span>(<span class=\"params\"></span>) </span>&#123; &#125;</span><br></pre></td></tr></table></figure>\n<p><strong><a href=\"#table-of-contents\">Back to top</a></strong></p>\n<h2 id=\"控制器Controllers\"><a href=\"#控制器Controllers\" class=\"headerlink\" title=\"控制器Controllers\"></a>控制器Controllers</h2><h3 id=\"controllerAs-View-Syntax\"><a href=\"#controllerAs-View-Syntax\" class=\"headerlink\" title=\"controllerAs View Syntax\"></a>controllerAs View Syntax</h3><h6 id=\"Style-Y030\"><a href=\"#Style-Y030\" class=\"headerlink\" title=\"[Style Y030]\"></a>[Style <a href=\"#style-y030\">Y030</a>]</h6><pre><code>-使用[`controllerAs`](http://www.johnpapa.net/do-you-like-your-angular-controllers-with-or-without-sugar/) 语句替代`经典控制器$scope`语句\n    1.控制器构造、新建的时候回提供一个简单的实例，而`controllerAs`语句相比`传统$scope 语句`更接近Javascript原声方法\n    1.它会在视图中使用一个虚拟的对象绑定（例如 使用`customer.name` 代替 `name`）,更加贴近上下文关系，\n    增加刻度性，避免引用冲突问题\n    1.帮助避免在视图嵌套控制器中使用`$parent`\n\n    <figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- avoid --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">ng-controller</span>=<span class=\"string\">\"CustomerController\"</span>&gt;</span></span><br><span class=\"line\">    &#123;&#123; name &#125;&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n  <figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- recommended --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">ng-controller</span>=<span class=\"string\">\"CustomerController as customer\"</span>&gt;</span></span><br><span class=\"line\">    &#123;&#123; customer.name &#125;&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</code></pre><h3 id=\"controllerAs-控制器语句\"><a href=\"#controllerAs-控制器语句\" class=\"headerlink\" title=\"controllerAs 控制器语句\"></a>controllerAs 控制器语句</h3><h6 id=\"Style-Y031\"><a href=\"#Style-Y031\" class=\"headerlink\" title=\"[Style Y031]\"></a>[Style <a href=\"#style-y031\">Y031</a>]</h6><pre><code>- 使用`controllerAs`语句替代`传统controller中的$scope`\n\n- `controllerAs`语句在Controller内部使用`this`将数据绑定在`$scope`上\n`controllerAs` 是`$scope`语法糖。你依然可以使用`$scope`方法.\n\n*Why?*:`controllerAs`语句是`$scope`基础上的一种语法糖，你可以继续使用`$scope`绑定变量和方法。\n\n*Why?*:帮助避免在控制器中使用`$scope`方法，用其他的方式实现或者将他们移动到工厂方法中，并在控制器中引用.控制器应仅在需要的时候使用`$scope`，再实例中，当我们使用[`$emit`](https://docs.angularjs.org/api/ng/type/$rootScope.Scope#$emit), [`$broadcast`](https://docs.angularjs.org/api/ng/type/$rootScope.Scope#$broadcast) 或者 [`$on`](https://docs.angularjs.org/api/ng/type/$rootScope.Scope#$on). 一个变量或者声明一个事件\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 避免使用 */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">CustomerController</span>(<span class=\"params\">$scope</span>)</span>&#123;</span><br><span class=\"line\">\t$scope.name = &#123;&#125;;</span><br><span class=\"line\">\t$scope.sendMessage = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 推荐 */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">CustomerController</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.name = &#123;&#125;;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.sendMessage = <span class=\"function\"><span class=\"keyword\">function</span> </span>&#123;&#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</code></pre><h3 id=\"controllerAs-和-VM\"><a href=\"#controllerAs-和-VM\" class=\"headerlink\" title=\"controllerAs 和 VM\"></a>controllerAs 和 VM</h3><h6 id=\"Style-Y032\"><a href=\"#Style-Y032\" class=\"headerlink\" title=\"[Style Y032]\"></a>[Style <a href=\"#style-y032\">Y032</a>]</h6><pre><code>- 当使用`controllerAs`语法的时候，捕捉一个变量替代`this`，选择统一的变量名`vm`，代表 ViewModel。\n\n*Why?*：`this` 关键字是作为上下文对象，当使用控制器内部的方法有可能会改变它的作用域，捕捉上下文中的`this`避免遇到这种问题\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 错误的示例 */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">CustomerController</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.name = &#123;&#125;;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.sendMessage = &#123;&#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 推荐的方式 */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">CustomerController</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> vm = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">\t\tvm.name = &#123;&#125;;</span><br><span class=\"line\">\t\tvm.sendMessage = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</code></pre><p>注意:你通过在代码上添加注释避免任何的<a href=\"http://jshint.com/\" target=\"_blank\" rel=\"noopener\">jshint</a>警告。但是，这不需要将方法使用大写命名，这只是个对于构造方法的惯例。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* jshint validthis : true */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> vm = <span class=\"keyword\">this</span>;</span><br></pre></td></tr></table></figure>\n<p>注意:当在控制器中使用<code>controller as</code>创建一个监听时，你可以监听<code>vm.*</code><br>(创建监听的时候需要小心监听导致的更多的负载)</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">ng-model</span> = <span class=\"string\">\"vm.tite\"</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">SomeController</span>(<span class=\"params\">$scope,$log</span>)</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> vm = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">\t\tvm.title = <span class=\"string\">'Some Title'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t$scope.watch(<span class=\"string\">'vm.title'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t\t\t\t$log.info(<span class=\"string\">'vm.title was %s'</span>,original);</span><br><span class=\"line\">\t\t&#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>注意:当基于一个庞大的代码库工作时，使用更多的描述性命名可以帮助简化的认知负荷和搜素，避免坑长的名字和繁琐的输入。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 避免使用 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">ng-model</span>=<span class=\"string\">\"customerProductItemVm.title\"</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 推荐 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">ng-model</span>=<span class=\"string\">\"productVm.title\"</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"将绑定成员提取到首位\"><a href=\"#将绑定成员提取到首位\" class=\"headerlink\" title=\"将绑定成员提取到首位\"></a>将绑定成员提取到首位</h3><pre><code>- 将需要绑定的成员按照字母顺序放在控制器的上方，并且不要扩散到控制器代码\n\n*Why?*:将需要绑定的成员防止在首位可以提升代码的可读性，并且帮你快速识别这个控制器需要绑定的成员都有哪些\n\n*Why?*:设置匿名行内函数当然可以使得代码简单，但是当哪些方法体多余一行代码的时候，他们会很大程序上降低代码可读性。将方法定义在绑定成员的下方（哪些方法会被提升）将实现细节移动到下方，保持绑定成员在上方，使代码可读性更好。\n</code></pre><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 避免 */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">SessionsController</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> vm = <span class=\"keyword\">this</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\tvm.gotoSession = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">\tvm.refresh = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 推荐 */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">SessionsController</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> vm = <span class=\"keyword\">this</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\tvm.gotoSession = gotoSession;</span><br><span class=\"line\">\tvm.refresh = refresh;</span><br><span class=\"line\">\tvm.search = search;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">gotoSession</span>(<span class=\"params\"></span>)</span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">refresh</span>(<span class=\"params\"></span>)</span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">search</span>(<span class=\"params\"></span>)</span>&#123;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<pre><code>![Controller Using &quot;Above the Fold&quot;](https://raw.githubusercontent.com/johnpapa/angular-styleguide/master/a1/assets/above-the-fold-1.png)\n</code></pre><p>注意：如果这个方法的代码只有一行可以将它保持在上方，这样并不影响可读性。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 避免 */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">SessionController</span>(<span class=\"params\">data</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> vm = <span class=\"keyword\">this</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\tvm.gotoSession = gotoSession;</span><br><span class=\"line\"></span><br><span class=\"line\">\tvm.refresh = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t\t * lines</span></span><br><span class=\"line\"><span class=\"comment\">\t\t * of</span></span><br><span class=\"line\"><span class=\"comment\">\t\t * code</span></span><br><span class=\"line\"><span class=\"comment\">\t\t * affects</span></span><br><span class=\"line\"><span class=\"comment\">\t\t * readabibity</span></span><br><span class=\"line\"><span class=\"comment\">\t\t*/</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tvm.search = search;</span><br><span class=\"line\">\tvm.sessions = [];</span><br><span class=\"line\">\tvm.title = <span class=\"string\">'Sessions'</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 推荐方式 */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">SessionsController</span>(<span class=\"params\">sessionDataService</span>) </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> vm = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">\t\tvm.gotoSession = gotoSession;</span><br><span class=\"line\">\t\tvm.refresh = sessionDataService.refresh; <span class=\"comment\">// 1 liner is OK</span></span><br><span class=\"line\">\t\tvm.search = search;</span><br><span class=\"line\">\t\tvm.sessions = [];</span><br><span class=\"line\">\t\tvm.title = <span class=\"string\">'Sessions'</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"通过方法定义隐藏实现\"><a href=\"#通过方法定义隐藏实现\" class=\"headerlink\" title=\"通过方法定义隐藏实现\"></a>通过方法定义隐藏实现</h3><h6 id=\"Style-Y034\"><a href=\"#Style-Y034\" class=\"headerlink\" title=\"[Style Y034]\"></a>[Style <a href=\"#style-y034\">Y034</a>]</h6><pre><code>- 使用方法定义隐藏方法实现细节。保持你的邦定成员在上方，当你需要在一个控制器中绑定一个方法的时候，它指向出现在这个文件中的一个函数声明。这是直接绑定部分成员，更多细节详见[这篇文章](http://www.johnpapa.net/angular-function-declarations-function-expressions-and-readable-code/)\n</code></pre><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 避免使用 */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">AvengersController</span>(<span class=\"params\">avengersService,logger</span>)</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> vm = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">\t\tvm.avengers = [];</span><br><span class=\"line\">\t\tvm.title = <span class=\"string\">'Avengers'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> activate = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> getAvengers().then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t\t\t\t\t\tlogger.info(<span class=\"string\">'Activated Avengers View'</span>);</span><br><span class=\"line\">\t\t\t\t&#125;)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> getAvengers = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> avengersService.getAvengers().then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>)</span>&#123;</span><br><span class=\"line\">\t\t\t\t\t\tvm.avengers = data;</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">return</span> vm.avengers;</span><br><span class=\"line\">\t\t\t\t&#125;);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tvm.getAvengers = getAvengers;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tactivate();</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">注意:在上面的示例中重要的东西都很分散。下面的代码中，注意重要的东西都在上方</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">``</span><span class=\"string\">`javascript</span></span><br><span class=\"line\"><span class=\"string\">/* 推荐</span></span><br><span class=\"line\"><span class=\"string\">使用方法定义，绑定成员定义在上方</span></span><br><span class=\"line\"><span class=\"string\">*/</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">function AvengersController(avengerService,logger)&#123;</span></span><br><span class=\"line\"><span class=\"string\">\t\tvar vm = this;</span></span><br><span class=\"line\"><span class=\"string\">\t\tvm.avengers = [];</span></span><br><span class=\"line\"><span class=\"string\">\t\tvm.getAvengers = getAvengers;</span></span><br><span class=\"line\"><span class=\"string\">\t\tvm.title = '';</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">\t\tactive();</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">\t\tfunction activate()&#123;</span></span><br><span class=\"line\"><span class=\"string\">\t\t\t\treturn getAvengers().then(function()&#123;</span></span><br><span class=\"line\"><span class=\"string\">\t\t\t\t\t\tlogger.info('Activated Avengers View');</span></span><br><span class=\"line\"><span class=\"string\">\t\t\t\t&#125;)</span></span><br><span class=\"line\"><span class=\"string\">\t\t&#125;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">\t\tfunction geetAvengers()&#123;</span></span><br><span class=\"line\"><span class=\"string\">\t\t\t\treturn avengersService.getAvengers().then(function(data)&#123;</span></span><br><span class=\"line\"><span class=\"string\">\t\t\t\t\t\tvm.avengers = data;</span></span><br><span class=\"line\"><span class=\"string\">\t\t\t\t\t\treturn vm.avengers;</span></span><br><span class=\"line\"><span class=\"string\">\t\t\t\t&#125;);</span></span><br><span class=\"line\"><span class=\"string\">\t\t&#125;</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"将控制器移动到服务-Service-中\"><a href=\"#将控制器移动到服务-Service-中\" class=\"headerlink\" title=\"将控制器移动到服务(Service)中\"></a>将控制器移动到服务(Service)中</h3><h6 id=\"Style-Y035\"><a href=\"#Style-Y035\" class=\"headerlink\" title=\"[Style Y035]\"></a>[Style <a href=\"#style-y035\">Y035</a>]</h6><pre><code>- 将控制器中的逻辑移动到服务器或者工厂方法中\n</code></pre><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* avoid */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">OrderController</span>(<span class=\"params\">$http, $q, config, userInfo</span>) </span>&#123;</span><br><span class=\"line\">\t <span class=\"keyword\">var</span> vm = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">\t vm.checkCredit = checkCredit;</span><br><span class=\"line\">\t vm.isCreditOk;</span><br><span class=\"line\">\t vm.total = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">checkCredit</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t\t\t <span class=\"keyword\">var</span> settings = &#123;&#125;;</span><br><span class=\"line\">\t\t\t <span class=\"comment\">// Get the credit service base URL from config</span></span><br><span class=\"line\">\t\t\t <span class=\"comment\">// Set credit service required headers</span></span><br><span class=\"line\">\t\t\t <span class=\"comment\">// Prepare URL query string or data object with request data</span></span><br><span class=\"line\">\t\t\t <span class=\"comment\">// Add user-identifying info so service gets the right credit limit for this user.</span></span><br><span class=\"line\">\t\t\t <span class=\"comment\">// Use JSONP for this browser if it doesn't support CORS</span></span><br><span class=\"line\">\t\t\t <span class=\"keyword\">return</span> $http.get(settings)</span><br><span class=\"line\">\t\t\t\t\t .then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>) </span>&#123;</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"comment\">// Unpack JSON data in the response object</span></span><br><span class=\"line\">\t\t\t\t\t\t\t<span class=\"comment\">// to find maxRemainingAmount</span></span><br><span class=\"line\">\t\t\t\t\t\t\tvm.isCreditOk = vm.total &lt;= maxRemainingAmount</span><br><span class=\"line\">\t\t\t\t\t &#125;)</span><br><span class=\"line\">\t\t\t\t\t .catch(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">error</span>) </span>&#123;</span><br><span class=\"line\">\t\t\t\t\t\t\t<span class=\"comment\">// Interpret error</span></span><br><span class=\"line\">\t\t\t\t\t\t\t<span class=\"comment\">// Cope w/ timeout? retry? try alternate service?</span></span><br><span class=\"line\">\t\t\t\t\t\t\t<span class=\"comment\">// Re-reject with appropriate error for a user to see</span></span><br><span class=\"line\">\t\t\t\t\t &#125;);</span><br><span class=\"line\">\t &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 推荐 */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">OrderController</span>(<span class=\"params\">creditService</span>)</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> vm = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">\t\tvm.checkCredit = checkCredit;</span><br><span class=\"line\">\t\tvm.isCreditOk;</span><br><span class=\"line\">\t\tvm.total = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">checkCredit</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> creditService.isOrderTotalOk(vm.total)</span><br><span class=\"line\">\t\t\t\t\t.then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">isOk</span>)</span>&#123; vm.isCreditOk = ok; &#125;)</span><br><span class=\"line\">\t\t\t\t\t.catch(showError);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"使控制器更专注\"><a href=\"#使控制器更专注\" class=\"headerlink\" title=\"使控制器更专注\"></a>使控制器更专注</h3><h6 id=\"Style-Y037\"><a href=\"#Style-Y037\" class=\"headerlink\" title=\"[Style Y037]\"></a>[Style <a href=\"#style-y037\">Y037</a>]</h6><pre><code>- 为一个视图定义一个控制器，不要试图在其他视图中复用控制器，而是将可以复用的逻辑转移到工厂中，保持控制器的简单并专注与当前视图。\n\n*Why?*: 在很多的视图上复用控制器是脆弱的，端对端（end-to-end）测试需要保证访问一个复杂的应用时的稳定性\n</code></pre><h3 id=\"分配控制器\"><a href=\"#分配控制器\" class=\"headerlink\" title=\"分配控制器\"></a>分配控制器</h3><h6 id=\"Style-Y038\"><a href=\"#Style-Y038\" class=\"headerlink\" title=\"[Style Y038]\"></a>[Style <a href=\"#style-y038\">Y038</a>]</h6><pre><code>- 当一个控制器必须搭配一个视图并且其他组件需要复用其他的控制器或视图，在它的路由中单独定义控制器。\n\n注意: 如果视图加载依赖其他视图，这意味着另外的一种途径，尝试使用`ng-controller=&quot;Avengers as vm&quot;` 语句.\n</code></pre>"},{"title":"CSS布局方式 之 圣杯布局和双飞翼布局","date":"2016-06-27T01:27:35.000Z","subtitle":"CSS布局方式 之 圣杯布局和双飞翼布局","iframe":null,"author":"","header-img":"post-bg-js-version.jpg","_content":"\n# CSS布局方式 之 圣杯布局和双飞翼布局\n\n## 圣杯布局\n\n在各种布局的技术实现中，可以发现以下三种技术被经常使用：\n\n - 浮动 float\n - 负边距 negative margin\n - 相对定位 relative position\n\n这时实现布局的三个最基本的原子技术，只要巧妙组合就可以拼出各种布局的实现方案。\n\nDOM 结构：\n```html\n\n<div id=\"page\">\n  <div id=\"hd\"></div>\n  <div id=\"bd\">\n    <div class=\"main\"></div>        \n    <div class=\"sub\"></div>        \n    <div class=\"extra\"></div>    \n  </div>   \n  <div id=\"ft\"></div>\n</div>\n\n```\n\n利用浮动元素的负边距来定位：\n\n```css\n\n.main{\n  float:left;\n  width:100%;\n}\n.sub{\n  float:left;\n  width:190px;\n  margin-left:-100%;\n}\n.extra{\n  float:left;\n  width:190px;\n  margin-left:-190px;\n}\n\n```\n\n可以看出以上代码已经让 `sub` 和 `extra` 到达了正确的位置。剩下的问题是如何让 `main` 也定位到正确的位置。一个自然的想法是，给 `main` 的容器 `#bd` 添加 `padding`:\n\n```CSS\n#bd{\n  padding:0 230px 0 190px;\n}\n```\n\n这样能让 `main` 定位到正确的位置，但是 sub 和 extra 的位置就不对了，这时一个思考关卡，既然 sub 和 extra 的位置不对，那就想办法调整到正确的位置，这里可以使用相对定位：\n\n```css\n\n.sub{\n  float:left;\n  width:190px;\n  margin-left:-100%;\n  position:relative;\n  left:-190px;\n\n}\n\n.extra{\n  float:left;\n  width:230px;\n  margin-left:-230px;\n  position:relative;\n  right:-230px;\n}\n```\n\n很显然，这就是经典的 `圣杯布局` 在不添加任何额外标签的假设上圣杯布局是我所有的想法中最接近完美的。\n\n## 双飞翼布局\n\n既然不添加额外标签时完美布局实现如此困难，那么如果允许添加一个额外变迁呢？在淘宝 UED 内部的讨论中，给 `main` 添加了一层包裹：\n\n```html\n<div id=\"main\" class=\"column\">\n  <div id=\"main-content\">#main</div>\n</div>\n\n```\n\n里层 `main-content` 的作用就是将 main 定位到合适的位置，并方便设置 padding 等属性：\n\n```html\n<div id=\"page\">\n  <div id=\"bd\">\n    <div class=\"main\"></div>\n  </div>\n</div>\n```\n\nCSS仅需增加一行:\n\n```CSS\n.main-wrap{  margin:0 230px 0 190px;}\n```\n\n双飞翼布局目前只用到了浮动和负边距，如果引入相对定位，还可以实现三栏布局的各种组合：\n\n```css\n.extra{\n  float:left;\n  width:230px;\n  margin-left:-100%;\n  position:relative;\n  left:190px;\n}\n.main-wrap{\n  margin-left:430px;\n}\n```\n","source":"_posts/CSS布局方式-之-圣杯布局和双飞翼布局.md","raw":"---\ntitle: CSS布局方式 之 圣杯布局和双飞翼布局\ndate: 2016-06-27 09:27:35\nsubtitle:   \"CSS布局方式 之 圣杯布局和双飞翼布局\"\niframe:     \nauthor:     \"\"\nheader-img: \"post-bg-js-version.jpg\"\ntags:\n    - HTML布局\n    - 前端\n---\n\n# CSS布局方式 之 圣杯布局和双飞翼布局\n\n## 圣杯布局\n\n在各种布局的技术实现中，可以发现以下三种技术被经常使用：\n\n - 浮动 float\n - 负边距 negative margin\n - 相对定位 relative position\n\n这时实现布局的三个最基本的原子技术，只要巧妙组合就可以拼出各种布局的实现方案。\n\nDOM 结构：\n```html\n\n<div id=\"page\">\n  <div id=\"hd\"></div>\n  <div id=\"bd\">\n    <div class=\"main\"></div>        \n    <div class=\"sub\"></div>        \n    <div class=\"extra\"></div>    \n  </div>   \n  <div id=\"ft\"></div>\n</div>\n\n```\n\n利用浮动元素的负边距来定位：\n\n```css\n\n.main{\n  float:left;\n  width:100%;\n}\n.sub{\n  float:left;\n  width:190px;\n  margin-left:-100%;\n}\n.extra{\n  float:left;\n  width:190px;\n  margin-left:-190px;\n}\n\n```\n\n可以看出以上代码已经让 `sub` 和 `extra` 到达了正确的位置。剩下的问题是如何让 `main` 也定位到正确的位置。一个自然的想法是，给 `main` 的容器 `#bd` 添加 `padding`:\n\n```CSS\n#bd{\n  padding:0 230px 0 190px;\n}\n```\n\n这样能让 `main` 定位到正确的位置，但是 sub 和 extra 的位置就不对了，这时一个思考关卡，既然 sub 和 extra 的位置不对，那就想办法调整到正确的位置，这里可以使用相对定位：\n\n```css\n\n.sub{\n  float:left;\n  width:190px;\n  margin-left:-100%;\n  position:relative;\n  left:-190px;\n\n}\n\n.extra{\n  float:left;\n  width:230px;\n  margin-left:-230px;\n  position:relative;\n  right:-230px;\n}\n```\n\n很显然，这就是经典的 `圣杯布局` 在不添加任何额外标签的假设上圣杯布局是我所有的想法中最接近完美的。\n\n## 双飞翼布局\n\n既然不添加额外标签时完美布局实现如此困难，那么如果允许添加一个额外变迁呢？在淘宝 UED 内部的讨论中，给 `main` 添加了一层包裹：\n\n```html\n<div id=\"main\" class=\"column\">\n  <div id=\"main-content\">#main</div>\n</div>\n\n```\n\n里层 `main-content` 的作用就是将 main 定位到合适的位置，并方便设置 padding 等属性：\n\n```html\n<div id=\"page\">\n  <div id=\"bd\">\n    <div class=\"main\"></div>\n  </div>\n</div>\n```\n\nCSS仅需增加一行:\n\n```CSS\n.main-wrap{  margin:0 230px 0 190px;}\n```\n\n双飞翼布局目前只用到了浮动和负边距，如果引入相对定位，还可以实现三栏布局的各种组合：\n\n```css\n.extra{\n  float:left;\n  width:230px;\n  margin-left:-100%;\n  position:relative;\n  left:190px;\n}\n.main-wrap{\n  margin-left:430px;\n}\n```\n","slug":"CSS布局方式-之-圣杯布局和双飞翼布局","published":1,"updated":"2018-01-07T22:28:37.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjc88rlgk0006a1jg4450w7q7","content":"<h1 id=\"CSS布局方式-之-圣杯布局和双飞翼布局\"><a href=\"#CSS布局方式-之-圣杯布局和双飞翼布局\" class=\"headerlink\" title=\"CSS布局方式 之 圣杯布局和双飞翼布局\"></a>CSS布局方式 之 圣杯布局和双飞翼布局</h1><h2 id=\"圣杯布局\"><a href=\"#圣杯布局\" class=\"headerlink\" title=\"圣杯布局\"></a>圣杯布局</h2><p>在各种布局的技术实现中，可以发现以下三种技术被经常使用：</p>\n<ul>\n<li>浮动 float</li>\n<li>负边距 negative margin</li>\n<li>相对定位 relative position</li>\n</ul>\n<p>这时实现布局的三个最基本的原子技术，只要巧妙组合就可以拼出各种布局的实现方案。</p>\n<p>DOM 结构：<br><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"page\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"hd\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"bd\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"main\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span>        </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"sub\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span>        </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"extra\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span>    </span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span>   </span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"ft\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>利用浮动元素的负边距来定位：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.main</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">float</span>:left;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>:<span class=\"number\">100%</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.sub</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">float</span>:left;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>:<span class=\"number\">190px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">margin-left</span>:-<span class=\"number\">100%</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.extra</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">float</span>:left;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>:<span class=\"number\">190px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">margin-left</span>:-<span class=\"number\">190px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>可以看出以上代码已经让 <code>sub</code> 和 <code>extra</code> 到达了正确的位置。剩下的问题是如何让 <code>main</code> 也定位到正确的位置。一个自然的想法是，给 <code>main</code> 的容器 <code>#bd</code> 添加 <code>padding</code>:</p>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-id\">#bd</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">padding</span>:<span class=\"number\">0</span> <span class=\"number\">230px</span> <span class=\"number\">0</span> <span class=\"number\">190px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这样能让 <code>main</code> 定位到正确的位置，但是 sub 和 extra 的位置就不对了，这时一个思考关卡，既然 sub 和 extra 的位置不对，那就想办法调整到正确的位置，这里可以使用相对定位：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.sub</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">float</span>:left;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>:<span class=\"number\">190px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">margin-left</span>:-<span class=\"number\">100%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>:relative;</span><br><span class=\"line\">  <span class=\"attribute\">left</span>:-<span class=\"number\">190px</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.extra</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">float</span>:left;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>:<span class=\"number\">230px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">margin-left</span>:-<span class=\"number\">230px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>:relative;</span><br><span class=\"line\">  <span class=\"attribute\">right</span>:-<span class=\"number\">230px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>很显然，这就是经典的 <code>圣杯布局</code> 在不添加任何额外标签的假设上圣杯布局是我所有的想法中最接近完美的。</p>\n<h2 id=\"双飞翼布局\"><a href=\"#双飞翼布局\" class=\"headerlink\" title=\"双飞翼布局\"></a>双飞翼布局</h2><p>既然不添加额外标签时完美布局实现如此困难，那么如果允许添加一个额外变迁呢？在淘宝 UED 内部的讨论中，给 <code>main</code> 添加了一层包裹：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"main\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"column\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"main-content\"</span>&gt;</span>#main<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>里层 <code>main-content</code> 的作用就是将 main 定位到合适的位置，并方便设置 padding 等属性：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"page\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"bd\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"main\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>CSS仅需增加一行:</p>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.main-wrap</span>&#123;  <span class=\"attribute\">margin</span>:<span class=\"number\">0</span> <span class=\"number\">230px</span> <span class=\"number\">0</span> <span class=\"number\">190px</span>;&#125;</span><br></pre></td></tr></table></figure>\n<p>双飞翼布局目前只用到了浮动和负边距，如果引入相对定位，还可以实现三栏布局的各种组合：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.extra</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">float</span>:left;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>:<span class=\"number\">230px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">margin-left</span>:-<span class=\"number\">100%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>:relative;</span><br><span class=\"line\">  <span class=\"attribute\">left</span>:<span class=\"number\">190px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.main-wrap</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">margin-left</span>:<span class=\"number\">430px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"CSS布局方式-之-圣杯布局和双飞翼布局\"><a href=\"#CSS布局方式-之-圣杯布局和双飞翼布局\" class=\"headerlink\" title=\"CSS布局方式 之 圣杯布局和双飞翼布局\"></a>CSS布局方式 之 圣杯布局和双飞翼布局</h1><h2 id=\"圣杯布局\"><a href=\"#圣杯布局\" class=\"headerlink\" title=\"圣杯布局\"></a>圣杯布局</h2><p>在各种布局的技术实现中，可以发现以下三种技术被经常使用：</p>\n<ul>\n<li>浮动 float</li>\n<li>负边距 negative margin</li>\n<li>相对定位 relative position</li>\n</ul>\n<p>这时实现布局的三个最基本的原子技术，只要巧妙组合就可以拼出各种布局的实现方案。</p>\n<p>DOM 结构：<br><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"page\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"hd\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"bd\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"main\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span>        </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"sub\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span>        </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"extra\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span>    </span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span>   </span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"ft\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>利用浮动元素的负边距来定位：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.main</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">float</span>:left;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>:<span class=\"number\">100%</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.sub</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">float</span>:left;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>:<span class=\"number\">190px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">margin-left</span>:-<span class=\"number\">100%</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.extra</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">float</span>:left;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>:<span class=\"number\">190px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">margin-left</span>:-<span class=\"number\">190px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>可以看出以上代码已经让 <code>sub</code> 和 <code>extra</code> 到达了正确的位置。剩下的问题是如何让 <code>main</code> 也定位到正确的位置。一个自然的想法是，给 <code>main</code> 的容器 <code>#bd</code> 添加 <code>padding</code>:</p>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-id\">#bd</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">padding</span>:<span class=\"number\">0</span> <span class=\"number\">230px</span> <span class=\"number\">0</span> <span class=\"number\">190px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这样能让 <code>main</code> 定位到正确的位置，但是 sub 和 extra 的位置就不对了，这时一个思考关卡，既然 sub 和 extra 的位置不对，那就想办法调整到正确的位置，这里可以使用相对定位：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.sub</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">float</span>:left;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>:<span class=\"number\">190px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">margin-left</span>:-<span class=\"number\">100%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>:relative;</span><br><span class=\"line\">  <span class=\"attribute\">left</span>:-<span class=\"number\">190px</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.extra</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">float</span>:left;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>:<span class=\"number\">230px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">margin-left</span>:-<span class=\"number\">230px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>:relative;</span><br><span class=\"line\">  <span class=\"attribute\">right</span>:-<span class=\"number\">230px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>很显然，这就是经典的 <code>圣杯布局</code> 在不添加任何额外标签的假设上圣杯布局是我所有的想法中最接近完美的。</p>\n<h2 id=\"双飞翼布局\"><a href=\"#双飞翼布局\" class=\"headerlink\" title=\"双飞翼布局\"></a>双飞翼布局</h2><p>既然不添加额外标签时完美布局实现如此困难，那么如果允许添加一个额外变迁呢？在淘宝 UED 内部的讨论中，给 <code>main</code> 添加了一层包裹：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"main\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"column\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"main-content\"</span>&gt;</span>#main<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>里层 <code>main-content</code> 的作用就是将 main 定位到合适的位置，并方便设置 padding 等属性：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"page\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"bd\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"main\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>CSS仅需增加一行:</p>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.main-wrap</span>&#123;  <span class=\"attribute\">margin</span>:<span class=\"number\">0</span> <span class=\"number\">230px</span> <span class=\"number\">0</span> <span class=\"number\">190px</span>;&#125;</span><br></pre></td></tr></table></figure>\n<p>双飞翼布局目前只用到了浮动和负边距，如果引入相对定位，还可以实现三栏布局的各种组合：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.extra</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">float</span>:left;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>:<span class=\"number\">230px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">margin-left</span>:-<span class=\"number\">100%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>:relative;</span><br><span class=\"line\">  <span class=\"attribute\">left</span>:<span class=\"number\">190px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.main-wrap</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">margin-left</span>:<span class=\"number\">430px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"CAP(Consistency,Availability,Partition Tolerance)理论学习","date":"2016-07-13T05:57:49.000Z","subtitle":"CSS布局方式 之 圣杯布局和双飞翼布局","iframe":null,"author":"","header-img":"post-bg-js-version.jpg","_content":"# CAP 理论简述\n\n海量数据管理中一致性理论，包括:`CAP理论`，`BAS理论`，`数据一致性理论模型`，以及现有的经典数据一致性技术。其中 CAP(Consistency,Availability,Partition Tolerance)，理论是NoSQL 数据库管理系统构建的基础。\nCAP定律说的是在一个分布式计算机系统中，一致性、可用性和分区容错性这三种保证无法同时得到满足，最多满足两个。该定律作为猜想在2000年提出，2002年被证实。\n\n![CAP 定律](1.png)\n\n强一致性(Consistency)：系统在执行过某项操作后仍然处于一致的状态。在分布式系统中，更新操作执行成功后所有用户都应该读取到最新的值，这样的系统被认为是具有强一致性的。\n\n可用性(Availability)：每一个操作总是能够在一定的时间内返回结果，这里需要注意的是`一定的时间内` 和 `返回结果`。一定的时间内指的是，在`可容忍的范围`内返回结果，结果可以使成功或失败。\n\n分区容错性(Partition Tolerance)：理解为在存在网络分区的情况下，仍然可以接受请求（瞒住一致性和可用性）。这里的网络分区是指由于某种原因，网络被分成若干个 `孤立`的区域，而区域之间互不相通。还有一些人将分区容错性理解为系统对节点动态加入和离开的能力，因为节点的加入和离开可以认为是集群内部的网络分区。\n\n放弃P：如果想避免分区容错性问题的发生，一种做法是将所有的数据（与实务相关的）都放在一台机器上。虽然无法 100% 保证系统不会出错，但不会碰到由于分区带来的负面效果。当然这个选择会严重的影响系统的拓展性。\n\n放弃A：对于放弃`分区容错性`来说，反面就是放弃`可用性`。一旦遇到分区容错故障，那么受到影响的服务需要等待一定的时间，因此在等待期间系统无法对外提供服务。\n\n放弃C：这里所说的放弃 `一致性`，并不是完全放弃数据的一致性，而是放弃数据的强一致性，而保留数据的最终一致性。以网路购物为例，对剩下一件库存的商品，如果同时接受了两份订单，那么较晚的订单将被告知商品告罄。\n\n# 二、CAP的理解\n\n常见的理解及分析:\n目前流行的对CAP理论解释的情形是从同一数据在网络环境中存在多个副本出发为前提。为了保证数据不会丢失，同时也是为了增加并发访问量（读写分离），在企业级的数据管理方案中，一般必须考虑数据的冗余存储问题，二者应该是通过在网络上的其他独立物理存储节点上保留另一份或多分数据副本来实现的（如图）。因为在同一个存储节点上的数据冗余明显不能解决单点故障问题，这与通过多节点集群来提供更好的计算可用性的道理是相同的。\n\n![数据备份](2.jpg)\n\n如上图情况，数据在节点A、B、C上保留三份，如果对节点A上的数据进行了修改，然后再让客户端通过网络对该数据进行读取。那么客户端的读取操作什么时候返回呢？\n\n一种情况是要求节点A、B、C的三分数据完全一致后返回。也就是说，这时从任何一个网络节点读取的数据都是一样的，这就是`强一致性读`。很明显，这时数据读取的 `Latency` 要高一些（因为要等数据在网络中的复制），同时A、B、C三个节点中任何一个宕机都会导致数据不可用。也就是说，要保证强数据一致性，网络中的副本越多，数据的可用性就越差。\n\n另一种情况是，允许读操作立即返回，容忍B节点的读取与A节点不一致的情况发生。这样一来，可用性显然得到提高，网络中的副本也可以多一些，唯一得不到保证的是数据一致性。当然，对写操作同样也有多个节点一致性的情况，再次不再赘述。\n\n可以看出，上述对CAP理论的解释主要是从网络上多个节点之间的读写一致性触发考虑问题的。而这一点，对于关系型数据库意味着什么呢？当然我们通常所说的`Standby`(关于分布式事务，涉及到更多考虑)情况。对此，在实践中我们大多已经采取了弱一致性的`异步延时同步方案`以提高可用性。这种情况并存在关系型数据库为保证C、A而放弃P 的情况；而对海量数据管理的需求，关系型数据库扩展过程中所遇到的性能瓶颈，似乎也并不是CAP理论中所描述的那种原因造成的。那么，上述流行的说法中所描述的关系型数据库为保证C、A而牺牲P到底是指什么呢？\n\n如果只将CAP当作分布式系统中多个数据副本之间的 `读写一致性问题` 的通用理论对待，那么就可以得出结论：CAP既适用于 `NoSQL数据库`，也适用于`关系型数据库`。它是NoSQL数据库、关系型数据库，乃至一切分布式系统在设计数据多个副本之间读写一致性问题时需要遵循的共同原则。\n\n## 例子\n\n我们采用的数据库方案一般是 `一写多读模式`。多台读机器 会从写机器 同步数据，这是为了 `可用性原则`，任何时候，你都可读取数据，没有任何 `延迟（A属性）`。但是 `数据一致性` 便受到了挑战（C）。多台机器目前基本上是必选了（P）。\n\n### 两种重要的分布式场景\n\n关于对CAP理论中 `一致性C` 的理解，除了上述数据副本之间的读写一致性以外，分布式环境中还有两种非常重要的场景，如果不对它们进行认识与讨论，就永远无法全面地理解CAP，当然也就无法根据CAP做出正确的解释。\n\n### 1.分布式环境中的事务场景\n\n我们知道，在关系型数据库的事务操作遵循 `ACID原则`，其中的一致性C，主要是指一个事务中相关联的数据在事务操作结束后是 `一致的`。所谓ACID原则，是指在写入/异动资料的过程中，为保证交易正确可靠所必须具备的四个特性：即`原子性（Atomicity，或称不可分割性）`、`一致性（Consistency）`、`隔离性（Isolation，又称独立性）`和`持久性（Durability）`。\n\n例如银行的一个存款交易事务，将导致交易流水表增加一条记录。同时，必须导致账户表余额发生变化，这两个操作必须是一个事务中全部完成，保证相关数据的一致性。而前文解释的CAP理论中的C是指对一个数据多个备份的读写一致性。表面上看，这两者不是一回事，但实际上，却是本质基本相同的事物：数据请求会等待多个相关数据操作全部完成才返回。对分布式系统来讲，这就是我们通常所说的分布式事务问题。 　　 众所周知，分布式事务一般采用两阶段提交策略来实现，这是一个非常耗时的复杂过程，会严重影响系统效率，在实践中我们尽量避免使用它。在实践过程中，如果我们为了扩展数据容量将数据分布式存储，而事务的要求又完全不能降低。那么，系统的可用性一定会大大降低，在现实中我们一般都采用对这些数据不分散存储的策略。\n\n当然，我们也可以说，最常使用的关系型数据库，因为这个原因，扩展性（分区可容忍性P）受到了限制，这是完全符合CAP理论的。但同时我们应该意识到，这对NoSQL数据库也是一样的。如果NoSQL数据库也要求严格的分布式事务功能，情况并不会比关系型数据库好多少。只是在NoSQL的设计中，我们往往会弱化甚至去除事务的功能，该问题才表现得不那么明显而已。\n\n因此，在扩展性问题上，如果要说关系型数据库是为了保证C、A而牺牲P，在尽量避免分布式事务这一点上来看，应该是正确的。也就是说：关系型数据库应该具有强大的事务功能，如果分区扩展，可用性就会降低；而NoSQL数据库干脆弱化甚至去除了事务功能，因此，分区的可扩展性就大大增加了。\n\n总结\n\n也就是说，未分区的关系型数据库是 满足了`CA理论`，但摒弃了`P理论`。\n\n### 2.分布式环境中的关联场景\n\n初看起来，关系型数据库中常用的多表关联操作与CAP理论就更加不沾边了。但仔细考虑，也可以用它来解释数据库分区扩展对关联所带来的影响。对一个数据库来讲，采用了分区扩展策略来扩充容量，数据分散存储了，很显然多表关联的性能就会下降，因为我们必须在网络上进行大量的数据迁移操作，这与CAP理论中数据副本之间的同步操作本质上也是相同的。\n\n因此，如果要保证系统的高可用性，需要同时实现强大的多表关系操作的关系型数据库在分区可扩展性上就遇到了极大的限制（即使是那些采用了各种优秀解决方案的MPP架构的关系型数据库，如TeraData，Netezza等，其水平可扩展性也是远远不如NoSQL数据库的），而NoSQL数据库则干脆在设计上弱化甚至去除了多表关联操作。那么，从这一点上来理解\"NoSQL数据库是为了保证A与P，而牺牲C\"的说法，也是可以讲得通的。当然，我们应该理解，关联问题在很多情况下不是并行处理的优点所在，这在很大程度上与Amdahl定律相符合。\n\n所以，从事务与关联的角度来看关系型数据库的分区可扩展性为什么受限的原因是最为清楚的。而NoSQL数据库也正是因为弱化，甚至去除了像事务与关联（全面地讲，其实还有索引等特性）等在分布式环境中会严重影响系统可用性的功能，才获得了更好的水平可扩展性。\n\n那么，如果将事务与关联也纳入CAP理论中一致性C的范畴的话，问题就很清楚了：关于“关系型数据库为了保证一致性C与可用性A，而不得不牺牲分区可容忍性P”的说法便是正确的了。但关于\"NoSQL选择了C与P，或者A与P\"的说法则是错误的，所有的NoSQL数据库在设计策略的大方向上都是选择了A与P（虽然对同一数据多个副本的读写一致性问题的设计各有不同），从来没有完全选择C与P的情况存在。\n\n现在看来，如果理解CAP理论只是指多个数据副本之间读写一致性的问题，那么它对关系型数据库与NoSQL数据库来讲是完全一样的，它只是运行在分布式环境中的数据管理设施在设计读写一致性问题时需要遵循的一个原则而已，却并不是NoSQL数据库具有优秀的水平可扩展性的真正原因。而如果将CAP理论中的一致性C理解为读写一致性、事务与关联操作的综合，则可以认为关系型数据库选择了C与A，而NoSQL数据库则全都是选择了A与P，但并没有选择C与P的情况存在。\n\n总结\n\nnosql 更关注的是A与P，而mysql则更关注的是 A与C\n\n### 三 一致性分类\n\n对于分布式数据系统，分区容忍性是基本要求，否则就失去了价值。因此设计分布式数据系统，就是在一致性和可用性之间取一个平衡。对于大多数WEB应用，其实并不需要强一致性，因此牺牲一致性而换取高可用性，是多数分布式数据库产品的方向。\n\n当然，牺牲一致性，并不是完全不管数据的一致性，否则数据是混乱的，那么系统可用性再高分布式再好也没有了价值。牺牲一致性，只是不再要求关系型数据库中的强一致性，而是只要系统能达到最终一致性即可，考虑到客户体验，这个最终一致的时间窗口，要尽可能的对用户透明，也就是需要保障“用户感知到的一致性”。通常是通过数据的多份异步复制来实现系统的高可用和数据的最终一致性的，“用户感知到的一致性”的时间窗口则取决于数据复制到一致状态的时间。\n\n对于一致性，可以分为从客户端和服务端两个不同的视角。从客户端来看，一致性主要指的是多并发访问时更新过的数据如何获取的问题。从服务端来看，则是更新如何复制分布到整个系统，以保证数据最终一致。一致性是因为有并发读写才有的问题，因此在理解一致性的问题时，一定要注意结合考虑并发读写的场景。\n\n从客户端角度，多进程并发访问时，更新过的数据在不同进程如何获取的不同策略，决定了不同的一致性。对于关系型数据库， 要求更新过的数据能被后续的访问都能看到，这是强一致性。如果能容忍后续的部分或者全部访问不到，则是弱一致性。如果经过一段时间后要求能访问到更新后的数据，则是最终一致性。\n\n在MongoDB中可以通过配置让复制集成员内部支持强一致性，这时可以设置一个写成功数，只有写操作成功树满足设定的值时才会向客户端返回结果。\n\n最终一致性根据更新数据后各进程访问到数据的时间和方式的不同，又可以区分为：\n\n因果一致性(CAUSAL CONSISTENCY)，如果进程A通知进程B它已更新了一个数据项，那么进程B的后续访问将返回更新后的值，且一次写入将保证取代前一次写入。与进程A无因果关系的进程C的访问遵守一般的最终一致性规则。读己之所写（READ-YOUR-WRITES）一致性，当进程A自己更新一个数据项之后，它总是访问到更新过的值，绝不会看到旧值。这是因果一致性模型的一个特例。\n\n会话（SESSION）一致性，这是上一个模型的实用版本，它把访问存储系统的进程放到会话的上下文中。只要会话还存在，系统就保证“读己之所写”一致性。如果由于某些失败情形令会话终止，就要建立新的会话，而且系统的保证不会延续到新的会话。单调（MONOTONIC）读一致性，如果进程已经看到过数据对象的某个值，那么任何后续访问都不会返回在那个值之前的值。单调写一致性，系统保证来自同一个进程的写操作顺序执行。要是系统不能保证这种程度的一致性，就非常难以编程了。\n\n上述最终一致性的不同方式可以进行组合，例如`单调读一致性`和`读己之所写一致性`就可以组合实现。并且从实践的角度来看，这两者的组合，读取自己更新的数据，和一旦读取到最新的版本不会再读取旧版本，对于此架构上的程序开发来说，会少很多额外的烦恼。\n\n从服务端角度，如何尽快将更新后的数据分布到整个系统，降低达到最终一致性的时间窗口，是提高系统的可用度和用户体验非常重要的方面。对于分布式数据系统：N — 数据复制的份数,W — 更新数据是需要保证写完成的节点数,R — 读取数据的时候需要读取的节点数，如果W+R>N，写的节点和读的节点重叠，则是强一致性。例如对于典型的一主一备同步复制的关系型数据库，N=2,W=2,R=1，则不管读的是主库还是备库的数据，都是一致的。如果W+R<=N，则是弱一致性。例如对于一主一备异步复制的关系型数据库，N=2,W=1,R=1，则如果读的是备库，就可能无法读取主库已经更新过的数据，所以是弱一致性。\n\n对于分布式系统，为了保证高可用性，一般设置N>=3。不同的N,W,R组合，是在可用性和一致性之间取一个平衡，以适应不同的应用场景。如果N=W,R=1，任何一个写节点失效，都会导致写失败，因此可用性会降低，但是由于数据分布的N个节点是同步写入的，因此可以保证强一致性。如果N=R,W=1，只需要一个节点写入成功即可，写性能和可用性都比较高。但是读取其他节点的进程可能不能获取更新后的数据，因此是弱一致性。这种情况下，如果W<(N+1)/2，并且写入的节点不重叠的话，则会存在写冲突。\n\n四 传统数据库与NoSQL数据库\n传统的关系型数据库在功能支持上通常很宽泛，从简单的键值查询，到复杂的多表联合查询再到事务机制的支持。而与之不同的是，NoSQL系统通常注重性能和扩展性，而非事务机制（事务就是强一致性的体现）。\n\n传统的SQL数据库的事务通常都是支持ACID的强事务机制。A代表原子性，即在事务中执行多个操作是原子性的，要么事务中的操作全部执行，要么一个都不执行;C代表一致性，即保证进行事务的过程中整个数据加的状态是一致的，不会出现数据花掉的情况;I代表隔离性，即两个事务不会相互影响，覆盖彼此数据等;D表示持久化，即事务一量完成，那么数据应该是被写到安全的，持久化存储的设备上（比如磁盘）。\n\nNoSQL系统仅提供对行级别的原子性保证，也就是说同时对同一个Key下的数据进行的两个操作，在实际执行的时候是会串行的执行，保证了每一个Key-Value对不会被破坏。例如MongoDB数据库，它是不支持事务机制的，同时也不提倡多表关联的复杂模式设计，它只保证对单个文档(相当于关系数据库中的记录)读写的原子性。\n\n转自:http://www.liaoqiqi.com/post/251\n","source":"_posts/CAP-Consistency-Availability-Partition-Tolerance-理论学习.md","raw":"---\ntitle: 'CAP(Consistency,Availability,Partition Tolerance)理论学习'\ndate: 2016-07-13 13:57:49\nsubtitle:   \"CSS布局方式 之 圣杯布局和双飞翼布局\"\niframe:     \nauthor:     \"\"\nheader-img: \"post-bg-js-version.jpg\"\ntags:\n    - HTML布局\n    - 前端\n---\n# CAP 理论简述\n\n海量数据管理中一致性理论，包括:`CAP理论`，`BAS理论`，`数据一致性理论模型`，以及现有的经典数据一致性技术。其中 CAP(Consistency,Availability,Partition Tolerance)，理论是NoSQL 数据库管理系统构建的基础。\nCAP定律说的是在一个分布式计算机系统中，一致性、可用性和分区容错性这三种保证无法同时得到满足，最多满足两个。该定律作为猜想在2000年提出，2002年被证实。\n\n![CAP 定律](1.png)\n\n强一致性(Consistency)：系统在执行过某项操作后仍然处于一致的状态。在分布式系统中，更新操作执行成功后所有用户都应该读取到最新的值，这样的系统被认为是具有强一致性的。\n\n可用性(Availability)：每一个操作总是能够在一定的时间内返回结果，这里需要注意的是`一定的时间内` 和 `返回结果`。一定的时间内指的是，在`可容忍的范围`内返回结果，结果可以使成功或失败。\n\n分区容错性(Partition Tolerance)：理解为在存在网络分区的情况下，仍然可以接受请求（瞒住一致性和可用性）。这里的网络分区是指由于某种原因，网络被分成若干个 `孤立`的区域，而区域之间互不相通。还有一些人将分区容错性理解为系统对节点动态加入和离开的能力，因为节点的加入和离开可以认为是集群内部的网络分区。\n\n放弃P：如果想避免分区容错性问题的发生，一种做法是将所有的数据（与实务相关的）都放在一台机器上。虽然无法 100% 保证系统不会出错，但不会碰到由于分区带来的负面效果。当然这个选择会严重的影响系统的拓展性。\n\n放弃A：对于放弃`分区容错性`来说，反面就是放弃`可用性`。一旦遇到分区容错故障，那么受到影响的服务需要等待一定的时间，因此在等待期间系统无法对外提供服务。\n\n放弃C：这里所说的放弃 `一致性`，并不是完全放弃数据的一致性，而是放弃数据的强一致性，而保留数据的最终一致性。以网路购物为例，对剩下一件库存的商品，如果同时接受了两份订单，那么较晚的订单将被告知商品告罄。\n\n# 二、CAP的理解\n\n常见的理解及分析:\n目前流行的对CAP理论解释的情形是从同一数据在网络环境中存在多个副本出发为前提。为了保证数据不会丢失，同时也是为了增加并发访问量（读写分离），在企业级的数据管理方案中，一般必须考虑数据的冗余存储问题，二者应该是通过在网络上的其他独立物理存储节点上保留另一份或多分数据副本来实现的（如图）。因为在同一个存储节点上的数据冗余明显不能解决单点故障问题，这与通过多节点集群来提供更好的计算可用性的道理是相同的。\n\n![数据备份](2.jpg)\n\n如上图情况，数据在节点A、B、C上保留三份，如果对节点A上的数据进行了修改，然后再让客户端通过网络对该数据进行读取。那么客户端的读取操作什么时候返回呢？\n\n一种情况是要求节点A、B、C的三分数据完全一致后返回。也就是说，这时从任何一个网络节点读取的数据都是一样的，这就是`强一致性读`。很明显，这时数据读取的 `Latency` 要高一些（因为要等数据在网络中的复制），同时A、B、C三个节点中任何一个宕机都会导致数据不可用。也就是说，要保证强数据一致性，网络中的副本越多，数据的可用性就越差。\n\n另一种情况是，允许读操作立即返回，容忍B节点的读取与A节点不一致的情况发生。这样一来，可用性显然得到提高，网络中的副本也可以多一些，唯一得不到保证的是数据一致性。当然，对写操作同样也有多个节点一致性的情况，再次不再赘述。\n\n可以看出，上述对CAP理论的解释主要是从网络上多个节点之间的读写一致性触发考虑问题的。而这一点，对于关系型数据库意味着什么呢？当然我们通常所说的`Standby`(关于分布式事务，涉及到更多考虑)情况。对此，在实践中我们大多已经采取了弱一致性的`异步延时同步方案`以提高可用性。这种情况并存在关系型数据库为保证C、A而放弃P 的情况；而对海量数据管理的需求，关系型数据库扩展过程中所遇到的性能瓶颈，似乎也并不是CAP理论中所描述的那种原因造成的。那么，上述流行的说法中所描述的关系型数据库为保证C、A而牺牲P到底是指什么呢？\n\n如果只将CAP当作分布式系统中多个数据副本之间的 `读写一致性问题` 的通用理论对待，那么就可以得出结论：CAP既适用于 `NoSQL数据库`，也适用于`关系型数据库`。它是NoSQL数据库、关系型数据库，乃至一切分布式系统在设计数据多个副本之间读写一致性问题时需要遵循的共同原则。\n\n## 例子\n\n我们采用的数据库方案一般是 `一写多读模式`。多台读机器 会从写机器 同步数据，这是为了 `可用性原则`，任何时候，你都可读取数据，没有任何 `延迟（A属性）`。但是 `数据一致性` 便受到了挑战（C）。多台机器目前基本上是必选了（P）。\n\n### 两种重要的分布式场景\n\n关于对CAP理论中 `一致性C` 的理解，除了上述数据副本之间的读写一致性以外，分布式环境中还有两种非常重要的场景，如果不对它们进行认识与讨论，就永远无法全面地理解CAP，当然也就无法根据CAP做出正确的解释。\n\n### 1.分布式环境中的事务场景\n\n我们知道，在关系型数据库的事务操作遵循 `ACID原则`，其中的一致性C，主要是指一个事务中相关联的数据在事务操作结束后是 `一致的`。所谓ACID原则，是指在写入/异动资料的过程中，为保证交易正确可靠所必须具备的四个特性：即`原子性（Atomicity，或称不可分割性）`、`一致性（Consistency）`、`隔离性（Isolation，又称独立性）`和`持久性（Durability）`。\n\n例如银行的一个存款交易事务，将导致交易流水表增加一条记录。同时，必须导致账户表余额发生变化，这两个操作必须是一个事务中全部完成，保证相关数据的一致性。而前文解释的CAP理论中的C是指对一个数据多个备份的读写一致性。表面上看，这两者不是一回事，但实际上，却是本质基本相同的事物：数据请求会等待多个相关数据操作全部完成才返回。对分布式系统来讲，这就是我们通常所说的分布式事务问题。 　　 众所周知，分布式事务一般采用两阶段提交策略来实现，这是一个非常耗时的复杂过程，会严重影响系统效率，在实践中我们尽量避免使用它。在实践过程中，如果我们为了扩展数据容量将数据分布式存储，而事务的要求又完全不能降低。那么，系统的可用性一定会大大降低，在现实中我们一般都采用对这些数据不分散存储的策略。\n\n当然，我们也可以说，最常使用的关系型数据库，因为这个原因，扩展性（分区可容忍性P）受到了限制，这是完全符合CAP理论的。但同时我们应该意识到，这对NoSQL数据库也是一样的。如果NoSQL数据库也要求严格的分布式事务功能，情况并不会比关系型数据库好多少。只是在NoSQL的设计中，我们往往会弱化甚至去除事务的功能，该问题才表现得不那么明显而已。\n\n因此，在扩展性问题上，如果要说关系型数据库是为了保证C、A而牺牲P，在尽量避免分布式事务这一点上来看，应该是正确的。也就是说：关系型数据库应该具有强大的事务功能，如果分区扩展，可用性就会降低；而NoSQL数据库干脆弱化甚至去除了事务功能，因此，分区的可扩展性就大大增加了。\n\n总结\n\n也就是说，未分区的关系型数据库是 满足了`CA理论`，但摒弃了`P理论`。\n\n### 2.分布式环境中的关联场景\n\n初看起来，关系型数据库中常用的多表关联操作与CAP理论就更加不沾边了。但仔细考虑，也可以用它来解释数据库分区扩展对关联所带来的影响。对一个数据库来讲，采用了分区扩展策略来扩充容量，数据分散存储了，很显然多表关联的性能就会下降，因为我们必须在网络上进行大量的数据迁移操作，这与CAP理论中数据副本之间的同步操作本质上也是相同的。\n\n因此，如果要保证系统的高可用性，需要同时实现强大的多表关系操作的关系型数据库在分区可扩展性上就遇到了极大的限制（即使是那些采用了各种优秀解决方案的MPP架构的关系型数据库，如TeraData，Netezza等，其水平可扩展性也是远远不如NoSQL数据库的），而NoSQL数据库则干脆在设计上弱化甚至去除了多表关联操作。那么，从这一点上来理解\"NoSQL数据库是为了保证A与P，而牺牲C\"的说法，也是可以讲得通的。当然，我们应该理解，关联问题在很多情况下不是并行处理的优点所在，这在很大程度上与Amdahl定律相符合。\n\n所以，从事务与关联的角度来看关系型数据库的分区可扩展性为什么受限的原因是最为清楚的。而NoSQL数据库也正是因为弱化，甚至去除了像事务与关联（全面地讲，其实还有索引等特性）等在分布式环境中会严重影响系统可用性的功能，才获得了更好的水平可扩展性。\n\n那么，如果将事务与关联也纳入CAP理论中一致性C的范畴的话，问题就很清楚了：关于“关系型数据库为了保证一致性C与可用性A，而不得不牺牲分区可容忍性P”的说法便是正确的了。但关于\"NoSQL选择了C与P，或者A与P\"的说法则是错误的，所有的NoSQL数据库在设计策略的大方向上都是选择了A与P（虽然对同一数据多个副本的读写一致性问题的设计各有不同），从来没有完全选择C与P的情况存在。\n\n现在看来，如果理解CAP理论只是指多个数据副本之间读写一致性的问题，那么它对关系型数据库与NoSQL数据库来讲是完全一样的，它只是运行在分布式环境中的数据管理设施在设计读写一致性问题时需要遵循的一个原则而已，却并不是NoSQL数据库具有优秀的水平可扩展性的真正原因。而如果将CAP理论中的一致性C理解为读写一致性、事务与关联操作的综合，则可以认为关系型数据库选择了C与A，而NoSQL数据库则全都是选择了A与P，但并没有选择C与P的情况存在。\n\n总结\n\nnosql 更关注的是A与P，而mysql则更关注的是 A与C\n\n### 三 一致性分类\n\n对于分布式数据系统，分区容忍性是基本要求，否则就失去了价值。因此设计分布式数据系统，就是在一致性和可用性之间取一个平衡。对于大多数WEB应用，其实并不需要强一致性，因此牺牲一致性而换取高可用性，是多数分布式数据库产品的方向。\n\n当然，牺牲一致性，并不是完全不管数据的一致性，否则数据是混乱的，那么系统可用性再高分布式再好也没有了价值。牺牲一致性，只是不再要求关系型数据库中的强一致性，而是只要系统能达到最终一致性即可，考虑到客户体验，这个最终一致的时间窗口，要尽可能的对用户透明，也就是需要保障“用户感知到的一致性”。通常是通过数据的多份异步复制来实现系统的高可用和数据的最终一致性的，“用户感知到的一致性”的时间窗口则取决于数据复制到一致状态的时间。\n\n对于一致性，可以分为从客户端和服务端两个不同的视角。从客户端来看，一致性主要指的是多并发访问时更新过的数据如何获取的问题。从服务端来看，则是更新如何复制分布到整个系统，以保证数据最终一致。一致性是因为有并发读写才有的问题，因此在理解一致性的问题时，一定要注意结合考虑并发读写的场景。\n\n从客户端角度，多进程并发访问时，更新过的数据在不同进程如何获取的不同策略，决定了不同的一致性。对于关系型数据库， 要求更新过的数据能被后续的访问都能看到，这是强一致性。如果能容忍后续的部分或者全部访问不到，则是弱一致性。如果经过一段时间后要求能访问到更新后的数据，则是最终一致性。\n\n在MongoDB中可以通过配置让复制集成员内部支持强一致性，这时可以设置一个写成功数，只有写操作成功树满足设定的值时才会向客户端返回结果。\n\n最终一致性根据更新数据后各进程访问到数据的时间和方式的不同，又可以区分为：\n\n因果一致性(CAUSAL CONSISTENCY)，如果进程A通知进程B它已更新了一个数据项，那么进程B的后续访问将返回更新后的值，且一次写入将保证取代前一次写入。与进程A无因果关系的进程C的访问遵守一般的最终一致性规则。读己之所写（READ-YOUR-WRITES）一致性，当进程A自己更新一个数据项之后，它总是访问到更新过的值，绝不会看到旧值。这是因果一致性模型的一个特例。\n\n会话（SESSION）一致性，这是上一个模型的实用版本，它把访问存储系统的进程放到会话的上下文中。只要会话还存在，系统就保证“读己之所写”一致性。如果由于某些失败情形令会话终止，就要建立新的会话，而且系统的保证不会延续到新的会话。单调（MONOTONIC）读一致性，如果进程已经看到过数据对象的某个值，那么任何后续访问都不会返回在那个值之前的值。单调写一致性，系统保证来自同一个进程的写操作顺序执行。要是系统不能保证这种程度的一致性，就非常难以编程了。\n\n上述最终一致性的不同方式可以进行组合，例如`单调读一致性`和`读己之所写一致性`就可以组合实现。并且从实践的角度来看，这两者的组合，读取自己更新的数据，和一旦读取到最新的版本不会再读取旧版本，对于此架构上的程序开发来说，会少很多额外的烦恼。\n\n从服务端角度，如何尽快将更新后的数据分布到整个系统，降低达到最终一致性的时间窗口，是提高系统的可用度和用户体验非常重要的方面。对于分布式数据系统：N — 数据复制的份数,W — 更新数据是需要保证写完成的节点数,R — 读取数据的时候需要读取的节点数，如果W+R>N，写的节点和读的节点重叠，则是强一致性。例如对于典型的一主一备同步复制的关系型数据库，N=2,W=2,R=1，则不管读的是主库还是备库的数据，都是一致的。如果W+R<=N，则是弱一致性。例如对于一主一备异步复制的关系型数据库，N=2,W=1,R=1，则如果读的是备库，就可能无法读取主库已经更新过的数据，所以是弱一致性。\n\n对于分布式系统，为了保证高可用性，一般设置N>=3。不同的N,W,R组合，是在可用性和一致性之间取一个平衡，以适应不同的应用场景。如果N=W,R=1，任何一个写节点失效，都会导致写失败，因此可用性会降低，但是由于数据分布的N个节点是同步写入的，因此可以保证强一致性。如果N=R,W=1，只需要一个节点写入成功即可，写性能和可用性都比较高。但是读取其他节点的进程可能不能获取更新后的数据，因此是弱一致性。这种情况下，如果W<(N+1)/2，并且写入的节点不重叠的话，则会存在写冲突。\n\n四 传统数据库与NoSQL数据库\n传统的关系型数据库在功能支持上通常很宽泛，从简单的键值查询，到复杂的多表联合查询再到事务机制的支持。而与之不同的是，NoSQL系统通常注重性能和扩展性，而非事务机制（事务就是强一致性的体现）。\n\n传统的SQL数据库的事务通常都是支持ACID的强事务机制。A代表原子性，即在事务中执行多个操作是原子性的，要么事务中的操作全部执行，要么一个都不执行;C代表一致性，即保证进行事务的过程中整个数据加的状态是一致的，不会出现数据花掉的情况;I代表隔离性，即两个事务不会相互影响，覆盖彼此数据等;D表示持久化，即事务一量完成，那么数据应该是被写到安全的，持久化存储的设备上（比如磁盘）。\n\nNoSQL系统仅提供对行级别的原子性保证，也就是说同时对同一个Key下的数据进行的两个操作，在实际执行的时候是会串行的执行，保证了每一个Key-Value对不会被破坏。例如MongoDB数据库，它是不支持事务机制的，同时也不提倡多表关联的复杂模式设计，它只保证对单个文档(相当于关系数据库中的记录)读写的原子性。\n\n转自:http://www.liaoqiqi.com/post/251\n","slug":"CAP-Consistency-Availability-Partition-Tolerance-理论学习","published":1,"updated":"2018-01-07T22:28:37.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjc88rlgn0007a1jg8ukcdsqt","content":"<h1 id=\"CAP-理论简述\"><a href=\"#CAP-理论简述\" class=\"headerlink\" title=\"CAP 理论简述\"></a>CAP 理论简述</h1><p>海量数据管理中一致性理论，包括:<code>CAP理论</code>，<code>BAS理论</code>，<code>数据一致性理论模型</code>，以及现有的经典数据一致性技术。其中 CAP(Consistency,Availability,Partition Tolerance)，理论是NoSQL 数据库管理系统构建的基础。<br>CAP定律说的是在一个分布式计算机系统中，一致性、可用性和分区容错性这三种保证无法同时得到满足，最多满足两个。该定律作为猜想在2000年提出，2002年被证实。</p>\n<p><img src=\"1.png\" alt=\"CAP 定律\"></p>\n<p>强一致性(Consistency)：系统在执行过某项操作后仍然处于一致的状态。在分布式系统中，更新操作执行成功后所有用户都应该读取到最新的值，这样的系统被认为是具有强一致性的。</p>\n<p>可用性(Availability)：每一个操作总是能够在一定的时间内返回结果，这里需要注意的是<code>一定的时间内</code> 和 <code>返回结果</code>。一定的时间内指的是，在<code>可容忍的范围</code>内返回结果，结果可以使成功或失败。</p>\n<p>分区容错性(Partition Tolerance)：理解为在存在网络分区的情况下，仍然可以接受请求（瞒住一致性和可用性）。这里的网络分区是指由于某种原因，网络被分成若干个 <code>孤立</code>的区域，而区域之间互不相通。还有一些人将分区容错性理解为系统对节点动态加入和离开的能力，因为节点的加入和离开可以认为是集群内部的网络分区。</p>\n<p>放弃P：如果想避免分区容错性问题的发生，一种做法是将所有的数据（与实务相关的）都放在一台机器上。虽然无法 100% 保证系统不会出错，但不会碰到由于分区带来的负面效果。当然这个选择会严重的影响系统的拓展性。</p>\n<p>放弃A：对于放弃<code>分区容错性</code>来说，反面就是放弃<code>可用性</code>。一旦遇到分区容错故障，那么受到影响的服务需要等待一定的时间，因此在等待期间系统无法对外提供服务。</p>\n<p>放弃C：这里所说的放弃 <code>一致性</code>，并不是完全放弃数据的一致性，而是放弃数据的强一致性，而保留数据的最终一致性。以网路购物为例，对剩下一件库存的商品，如果同时接受了两份订单，那么较晚的订单将被告知商品告罄。</p>\n<h1 id=\"二、CAP的理解\"><a href=\"#二、CAP的理解\" class=\"headerlink\" title=\"二、CAP的理解\"></a>二、CAP的理解</h1><p>常见的理解及分析:<br>目前流行的对CAP理论解释的情形是从同一数据在网络环境中存在多个副本出发为前提。为了保证数据不会丢失，同时也是为了增加并发访问量（读写分离），在企业级的数据管理方案中，一般必须考虑数据的冗余存储问题，二者应该是通过在网络上的其他独立物理存储节点上保留另一份或多分数据副本来实现的（如图）。因为在同一个存储节点上的数据冗余明显不能解决单点故障问题，这与通过多节点集群来提供更好的计算可用性的道理是相同的。</p>\n<p><img src=\"2.jpg\" alt=\"数据备份\"></p>\n<p>如上图情况，数据在节点A、B、C上保留三份，如果对节点A上的数据进行了修改，然后再让客户端通过网络对该数据进行读取。那么客户端的读取操作什么时候返回呢？</p>\n<p>一种情况是要求节点A、B、C的三分数据完全一致后返回。也就是说，这时从任何一个网络节点读取的数据都是一样的，这就是<code>强一致性读</code>。很明显，这时数据读取的 <code>Latency</code> 要高一些（因为要等数据在网络中的复制），同时A、B、C三个节点中任何一个宕机都会导致数据不可用。也就是说，要保证强数据一致性，网络中的副本越多，数据的可用性就越差。</p>\n<p>另一种情况是，允许读操作立即返回，容忍B节点的读取与A节点不一致的情况发生。这样一来，可用性显然得到提高，网络中的副本也可以多一些，唯一得不到保证的是数据一致性。当然，对写操作同样也有多个节点一致性的情况，再次不再赘述。</p>\n<p>可以看出，上述对CAP理论的解释主要是从网络上多个节点之间的读写一致性触发考虑问题的。而这一点，对于关系型数据库意味着什么呢？当然我们通常所说的<code>Standby</code>(关于分布式事务，涉及到更多考虑)情况。对此，在实践中我们大多已经采取了弱一致性的<code>异步延时同步方案</code>以提高可用性。这种情况并存在关系型数据库为保证C、A而放弃P 的情况；而对海量数据管理的需求，关系型数据库扩展过程中所遇到的性能瓶颈，似乎也并不是CAP理论中所描述的那种原因造成的。那么，上述流行的说法中所描述的关系型数据库为保证C、A而牺牲P到底是指什么呢？</p>\n<p>如果只将CAP当作分布式系统中多个数据副本之间的 <code>读写一致性问题</code> 的通用理论对待，那么就可以得出结论：CAP既适用于 <code>NoSQL数据库</code>，也适用于<code>关系型数据库</code>。它是NoSQL数据库、关系型数据库，乃至一切分布式系统在设计数据多个副本之间读写一致性问题时需要遵循的共同原则。</p>\n<h2 id=\"例子\"><a href=\"#例子\" class=\"headerlink\" title=\"例子\"></a>例子</h2><p>我们采用的数据库方案一般是 <code>一写多读模式</code>。多台读机器 会从写机器 同步数据，这是为了 <code>可用性原则</code>，任何时候，你都可读取数据，没有任何 <code>延迟（A属性）</code>。但是 <code>数据一致性</code> 便受到了挑战（C）。多台机器目前基本上是必选了（P）。</p>\n<h3 id=\"两种重要的分布式场景\"><a href=\"#两种重要的分布式场景\" class=\"headerlink\" title=\"两种重要的分布式场景\"></a>两种重要的分布式场景</h3><p>关于对CAP理论中 <code>一致性C</code> 的理解，除了上述数据副本之间的读写一致性以外，分布式环境中还有两种非常重要的场景，如果不对它们进行认识与讨论，就永远无法全面地理解CAP，当然也就无法根据CAP做出正确的解释。</p>\n<h3 id=\"1-分布式环境中的事务场景\"><a href=\"#1-分布式环境中的事务场景\" class=\"headerlink\" title=\"1.分布式环境中的事务场景\"></a>1.分布式环境中的事务场景</h3><p>我们知道，在关系型数据库的事务操作遵循 <code>ACID原则</code>，其中的一致性C，主要是指一个事务中相关联的数据在事务操作结束后是 <code>一致的</code>。所谓ACID原则，是指在写入/异动资料的过程中，为保证交易正确可靠所必须具备的四个特性：即<code>原子性（Atomicity，或称不可分割性）</code>、<code>一致性（Consistency）</code>、<code>隔离性（Isolation，又称独立性）</code>和<code>持久性（Durability）</code>。</p>\n<p>例如银行的一个存款交易事务，将导致交易流水表增加一条记录。同时，必须导致账户表余额发生变化，这两个操作必须是一个事务中全部完成，保证相关数据的一致性。而前文解释的CAP理论中的C是指对一个数据多个备份的读写一致性。表面上看，这两者不是一回事，但实际上，却是本质基本相同的事物：数据请求会等待多个相关数据操作全部完成才返回。对分布式系统来讲，这就是我们通常所说的分布式事务问题。 　　 众所周知，分布式事务一般采用两阶段提交策略来实现，这是一个非常耗时的复杂过程，会严重影响系统效率，在实践中我们尽量避免使用它。在实践过程中，如果我们为了扩展数据容量将数据分布式存储，而事务的要求又完全不能降低。那么，系统的可用性一定会大大降低，在现实中我们一般都采用对这些数据不分散存储的策略。</p>\n<p>当然，我们也可以说，最常使用的关系型数据库，因为这个原因，扩展性（分区可容忍性P）受到了限制，这是完全符合CAP理论的。但同时我们应该意识到，这对NoSQL数据库也是一样的。如果NoSQL数据库也要求严格的分布式事务功能，情况并不会比关系型数据库好多少。只是在NoSQL的设计中，我们往往会弱化甚至去除事务的功能，该问题才表现得不那么明显而已。</p>\n<p>因此，在扩展性问题上，如果要说关系型数据库是为了保证C、A而牺牲P，在尽量避免分布式事务这一点上来看，应该是正确的。也就是说：关系型数据库应该具有强大的事务功能，如果分区扩展，可用性就会降低；而NoSQL数据库干脆弱化甚至去除了事务功能，因此，分区的可扩展性就大大增加了。</p>\n<p>总结</p>\n<p>也就是说，未分区的关系型数据库是 满足了<code>CA理论</code>，但摒弃了<code>P理论</code>。</p>\n<h3 id=\"2-分布式环境中的关联场景\"><a href=\"#2-分布式环境中的关联场景\" class=\"headerlink\" title=\"2.分布式环境中的关联场景\"></a>2.分布式环境中的关联场景</h3><p>初看起来，关系型数据库中常用的多表关联操作与CAP理论就更加不沾边了。但仔细考虑，也可以用它来解释数据库分区扩展对关联所带来的影响。对一个数据库来讲，采用了分区扩展策略来扩充容量，数据分散存储了，很显然多表关联的性能就会下降，因为我们必须在网络上进行大量的数据迁移操作，这与CAP理论中数据副本之间的同步操作本质上也是相同的。</p>\n<p>因此，如果要保证系统的高可用性，需要同时实现强大的多表关系操作的关系型数据库在分区可扩展性上就遇到了极大的限制（即使是那些采用了各种优秀解决方案的MPP架构的关系型数据库，如TeraData，Netezza等，其水平可扩展性也是远远不如NoSQL数据库的），而NoSQL数据库则干脆在设计上弱化甚至去除了多表关联操作。那么，从这一点上来理解”NoSQL数据库是为了保证A与P，而牺牲C”的说法，也是可以讲得通的。当然，我们应该理解，关联问题在很多情况下不是并行处理的优点所在，这在很大程度上与Amdahl定律相符合。</p>\n<p>所以，从事务与关联的角度来看关系型数据库的分区可扩展性为什么受限的原因是最为清楚的。而NoSQL数据库也正是因为弱化，甚至去除了像事务与关联（全面地讲，其实还有索引等特性）等在分布式环境中会严重影响系统可用性的功能，才获得了更好的水平可扩展性。</p>\n<p>那么，如果将事务与关联也纳入CAP理论中一致性C的范畴的话，问题就很清楚了：关于“关系型数据库为了保证一致性C与可用性A，而不得不牺牲分区可容忍性P”的说法便是正确的了。但关于”NoSQL选择了C与P，或者A与P”的说法则是错误的，所有的NoSQL数据库在设计策略的大方向上都是选择了A与P（虽然对同一数据多个副本的读写一致性问题的设计各有不同），从来没有完全选择C与P的情况存在。</p>\n<p>现在看来，如果理解CAP理论只是指多个数据副本之间读写一致性的问题，那么它对关系型数据库与NoSQL数据库来讲是完全一样的，它只是运行在分布式环境中的数据管理设施在设计读写一致性问题时需要遵循的一个原则而已，却并不是NoSQL数据库具有优秀的水平可扩展性的真正原因。而如果将CAP理论中的一致性C理解为读写一致性、事务与关联操作的综合，则可以认为关系型数据库选择了C与A，而NoSQL数据库则全都是选择了A与P，但并没有选择C与P的情况存在。</p>\n<p>总结</p>\n<p>nosql 更关注的是A与P，而mysql则更关注的是 A与C</p>\n<h3 id=\"三-一致性分类\"><a href=\"#三-一致性分类\" class=\"headerlink\" title=\"三 一致性分类\"></a>三 一致性分类</h3><p>对于分布式数据系统，分区容忍性是基本要求，否则就失去了价值。因此设计分布式数据系统，就是在一致性和可用性之间取一个平衡。对于大多数WEB应用，其实并不需要强一致性，因此牺牲一致性而换取高可用性，是多数分布式数据库产品的方向。</p>\n<p>当然，牺牲一致性，并不是完全不管数据的一致性，否则数据是混乱的，那么系统可用性再高分布式再好也没有了价值。牺牲一致性，只是不再要求关系型数据库中的强一致性，而是只要系统能达到最终一致性即可，考虑到客户体验，这个最终一致的时间窗口，要尽可能的对用户透明，也就是需要保障“用户感知到的一致性”。通常是通过数据的多份异步复制来实现系统的高可用和数据的最终一致性的，“用户感知到的一致性”的时间窗口则取决于数据复制到一致状态的时间。</p>\n<p>对于一致性，可以分为从客户端和服务端两个不同的视角。从客户端来看，一致性主要指的是多并发访问时更新过的数据如何获取的问题。从服务端来看，则是更新如何复制分布到整个系统，以保证数据最终一致。一致性是因为有并发读写才有的问题，因此在理解一致性的问题时，一定要注意结合考虑并发读写的场景。</p>\n<p>从客户端角度，多进程并发访问时，更新过的数据在不同进程如何获取的不同策略，决定了不同的一致性。对于关系型数据库， 要求更新过的数据能被后续的访问都能看到，这是强一致性。如果能容忍后续的部分或者全部访问不到，则是弱一致性。如果经过一段时间后要求能访问到更新后的数据，则是最终一致性。</p>\n<p>在MongoDB中可以通过配置让复制集成员内部支持强一致性，这时可以设置一个写成功数，只有写操作成功树满足设定的值时才会向客户端返回结果。</p>\n<p>最终一致性根据更新数据后各进程访问到数据的时间和方式的不同，又可以区分为：</p>\n<p>因果一致性(CAUSAL CONSISTENCY)，如果进程A通知进程B它已更新了一个数据项，那么进程B的后续访问将返回更新后的值，且一次写入将保证取代前一次写入。与进程A无因果关系的进程C的访问遵守一般的最终一致性规则。读己之所写（READ-YOUR-WRITES）一致性，当进程A自己更新一个数据项之后，它总是访问到更新过的值，绝不会看到旧值。这是因果一致性模型的一个特例。</p>\n<p>会话（SESSION）一致性，这是上一个模型的实用版本，它把访问存储系统的进程放到会话的上下文中。只要会话还存在，系统就保证“读己之所写”一致性。如果由于某些失败情形令会话终止，就要建立新的会话，而且系统的保证不会延续到新的会话。单调（MONOTONIC）读一致性，如果进程已经看到过数据对象的某个值，那么任何后续访问都不会返回在那个值之前的值。单调写一致性，系统保证来自同一个进程的写操作顺序执行。要是系统不能保证这种程度的一致性，就非常难以编程了。</p>\n<p>上述最终一致性的不同方式可以进行组合，例如<code>单调读一致性</code>和<code>读己之所写一致性</code>就可以组合实现。并且从实践的角度来看，这两者的组合，读取自己更新的数据，和一旦读取到最新的版本不会再读取旧版本，对于此架构上的程序开发来说，会少很多额外的烦恼。</p>\n<p>从服务端角度，如何尽快将更新后的数据分布到整个系统，降低达到最终一致性的时间窗口，是提高系统的可用度和用户体验非常重要的方面。对于分布式数据系统：N — 数据复制的份数,W — 更新数据是需要保证写完成的节点数,R — 读取数据的时候需要读取的节点数，如果W+R&gt;N，写的节点和读的节点重叠，则是强一致性。例如对于典型的一主一备同步复制的关系型数据库，N=2,W=2,R=1，则不管读的是主库还是备库的数据，都是一致的。如果W+R&lt;=N，则是弱一致性。例如对于一主一备异步复制的关系型数据库，N=2,W=1,R=1，则如果读的是备库，就可能无法读取主库已经更新过的数据，所以是弱一致性。</p>\n<p>对于分布式系统，为了保证高可用性，一般设置N&gt;=3。不同的N,W,R组合，是在可用性和一致性之间取一个平衡，以适应不同的应用场景。如果N=W,R=1，任何一个写节点失效，都会导致写失败，因此可用性会降低，但是由于数据分布的N个节点是同步写入的，因此可以保证强一致性。如果N=R,W=1，只需要一个节点写入成功即可，写性能和可用性都比较高。但是读取其他节点的进程可能不能获取更新后的数据，因此是弱一致性。这种情况下，如果W&lt;(N+1)/2，并且写入的节点不重叠的话，则会存在写冲突。</p>\n<p>四 传统数据库与NoSQL数据库<br>传统的关系型数据库在功能支持上通常很宽泛，从简单的键值查询，到复杂的多表联合查询再到事务机制的支持。而与之不同的是，NoSQL系统通常注重性能和扩展性，而非事务机制（事务就是强一致性的体现）。</p>\n<p>传统的SQL数据库的事务通常都是支持ACID的强事务机制。A代表原子性，即在事务中执行多个操作是原子性的，要么事务中的操作全部执行，要么一个都不执行;C代表一致性，即保证进行事务的过程中整个数据加的状态是一致的，不会出现数据花掉的情况;I代表隔离性，即两个事务不会相互影响，覆盖彼此数据等;D表示持久化，即事务一量完成，那么数据应该是被写到安全的，持久化存储的设备上（比如磁盘）。</p>\n<p>NoSQL系统仅提供对行级别的原子性保证，也就是说同时对同一个Key下的数据进行的两个操作，在实际执行的时候是会串行的执行，保证了每一个Key-Value对不会被破坏。例如MongoDB数据库，它是不支持事务机制的，同时也不提倡多表关联的复杂模式设计，它只保证对单个文档(相当于关系数据库中的记录)读写的原子性。</p>\n<p>转自:<a href=\"http://www.liaoqiqi.com/post/251\" target=\"_blank\" rel=\"noopener\">http://www.liaoqiqi.com/post/251</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"CAP-理论简述\"><a href=\"#CAP-理论简述\" class=\"headerlink\" title=\"CAP 理论简述\"></a>CAP 理论简述</h1><p>海量数据管理中一致性理论，包括:<code>CAP理论</code>，<code>BAS理论</code>，<code>数据一致性理论模型</code>，以及现有的经典数据一致性技术。其中 CAP(Consistency,Availability,Partition Tolerance)，理论是NoSQL 数据库管理系统构建的基础。<br>CAP定律说的是在一个分布式计算机系统中，一致性、可用性和分区容错性这三种保证无法同时得到满足，最多满足两个。该定律作为猜想在2000年提出，2002年被证实。</p>\n<p><img src=\"1.png\" alt=\"CAP 定律\"></p>\n<p>强一致性(Consistency)：系统在执行过某项操作后仍然处于一致的状态。在分布式系统中，更新操作执行成功后所有用户都应该读取到最新的值，这样的系统被认为是具有强一致性的。</p>\n<p>可用性(Availability)：每一个操作总是能够在一定的时间内返回结果，这里需要注意的是<code>一定的时间内</code> 和 <code>返回结果</code>。一定的时间内指的是，在<code>可容忍的范围</code>内返回结果，结果可以使成功或失败。</p>\n<p>分区容错性(Partition Tolerance)：理解为在存在网络分区的情况下，仍然可以接受请求（瞒住一致性和可用性）。这里的网络分区是指由于某种原因，网络被分成若干个 <code>孤立</code>的区域，而区域之间互不相通。还有一些人将分区容错性理解为系统对节点动态加入和离开的能力，因为节点的加入和离开可以认为是集群内部的网络分区。</p>\n<p>放弃P：如果想避免分区容错性问题的发生，一种做法是将所有的数据（与实务相关的）都放在一台机器上。虽然无法 100% 保证系统不会出错，但不会碰到由于分区带来的负面效果。当然这个选择会严重的影响系统的拓展性。</p>\n<p>放弃A：对于放弃<code>分区容错性</code>来说，反面就是放弃<code>可用性</code>。一旦遇到分区容错故障，那么受到影响的服务需要等待一定的时间，因此在等待期间系统无法对外提供服务。</p>\n<p>放弃C：这里所说的放弃 <code>一致性</code>，并不是完全放弃数据的一致性，而是放弃数据的强一致性，而保留数据的最终一致性。以网路购物为例，对剩下一件库存的商品，如果同时接受了两份订单，那么较晚的订单将被告知商品告罄。</p>\n<h1 id=\"二、CAP的理解\"><a href=\"#二、CAP的理解\" class=\"headerlink\" title=\"二、CAP的理解\"></a>二、CAP的理解</h1><p>常见的理解及分析:<br>目前流行的对CAP理论解释的情形是从同一数据在网络环境中存在多个副本出发为前提。为了保证数据不会丢失，同时也是为了增加并发访问量（读写分离），在企业级的数据管理方案中，一般必须考虑数据的冗余存储问题，二者应该是通过在网络上的其他独立物理存储节点上保留另一份或多分数据副本来实现的（如图）。因为在同一个存储节点上的数据冗余明显不能解决单点故障问题，这与通过多节点集群来提供更好的计算可用性的道理是相同的。</p>\n<p><img src=\"2.jpg\" alt=\"数据备份\"></p>\n<p>如上图情况，数据在节点A、B、C上保留三份，如果对节点A上的数据进行了修改，然后再让客户端通过网络对该数据进行读取。那么客户端的读取操作什么时候返回呢？</p>\n<p>一种情况是要求节点A、B、C的三分数据完全一致后返回。也就是说，这时从任何一个网络节点读取的数据都是一样的，这就是<code>强一致性读</code>。很明显，这时数据读取的 <code>Latency</code> 要高一些（因为要等数据在网络中的复制），同时A、B、C三个节点中任何一个宕机都会导致数据不可用。也就是说，要保证强数据一致性，网络中的副本越多，数据的可用性就越差。</p>\n<p>另一种情况是，允许读操作立即返回，容忍B节点的读取与A节点不一致的情况发生。这样一来，可用性显然得到提高，网络中的副本也可以多一些，唯一得不到保证的是数据一致性。当然，对写操作同样也有多个节点一致性的情况，再次不再赘述。</p>\n<p>可以看出，上述对CAP理论的解释主要是从网络上多个节点之间的读写一致性触发考虑问题的。而这一点，对于关系型数据库意味着什么呢？当然我们通常所说的<code>Standby</code>(关于分布式事务，涉及到更多考虑)情况。对此，在实践中我们大多已经采取了弱一致性的<code>异步延时同步方案</code>以提高可用性。这种情况并存在关系型数据库为保证C、A而放弃P 的情况；而对海量数据管理的需求，关系型数据库扩展过程中所遇到的性能瓶颈，似乎也并不是CAP理论中所描述的那种原因造成的。那么，上述流行的说法中所描述的关系型数据库为保证C、A而牺牲P到底是指什么呢？</p>\n<p>如果只将CAP当作分布式系统中多个数据副本之间的 <code>读写一致性问题</code> 的通用理论对待，那么就可以得出结论：CAP既适用于 <code>NoSQL数据库</code>，也适用于<code>关系型数据库</code>。它是NoSQL数据库、关系型数据库，乃至一切分布式系统在设计数据多个副本之间读写一致性问题时需要遵循的共同原则。</p>\n<h2 id=\"例子\"><a href=\"#例子\" class=\"headerlink\" title=\"例子\"></a>例子</h2><p>我们采用的数据库方案一般是 <code>一写多读模式</code>。多台读机器 会从写机器 同步数据，这是为了 <code>可用性原则</code>，任何时候，你都可读取数据，没有任何 <code>延迟（A属性）</code>。但是 <code>数据一致性</code> 便受到了挑战（C）。多台机器目前基本上是必选了（P）。</p>\n<h3 id=\"两种重要的分布式场景\"><a href=\"#两种重要的分布式场景\" class=\"headerlink\" title=\"两种重要的分布式场景\"></a>两种重要的分布式场景</h3><p>关于对CAP理论中 <code>一致性C</code> 的理解，除了上述数据副本之间的读写一致性以外，分布式环境中还有两种非常重要的场景，如果不对它们进行认识与讨论，就永远无法全面地理解CAP，当然也就无法根据CAP做出正确的解释。</p>\n<h3 id=\"1-分布式环境中的事务场景\"><a href=\"#1-分布式环境中的事务场景\" class=\"headerlink\" title=\"1.分布式环境中的事务场景\"></a>1.分布式环境中的事务场景</h3><p>我们知道，在关系型数据库的事务操作遵循 <code>ACID原则</code>，其中的一致性C，主要是指一个事务中相关联的数据在事务操作结束后是 <code>一致的</code>。所谓ACID原则，是指在写入/异动资料的过程中，为保证交易正确可靠所必须具备的四个特性：即<code>原子性（Atomicity，或称不可分割性）</code>、<code>一致性（Consistency）</code>、<code>隔离性（Isolation，又称独立性）</code>和<code>持久性（Durability）</code>。</p>\n<p>例如银行的一个存款交易事务，将导致交易流水表增加一条记录。同时，必须导致账户表余额发生变化，这两个操作必须是一个事务中全部完成，保证相关数据的一致性。而前文解释的CAP理论中的C是指对一个数据多个备份的读写一致性。表面上看，这两者不是一回事，但实际上，却是本质基本相同的事物：数据请求会等待多个相关数据操作全部完成才返回。对分布式系统来讲，这就是我们通常所说的分布式事务问题。 　　 众所周知，分布式事务一般采用两阶段提交策略来实现，这是一个非常耗时的复杂过程，会严重影响系统效率，在实践中我们尽量避免使用它。在实践过程中，如果我们为了扩展数据容量将数据分布式存储，而事务的要求又完全不能降低。那么，系统的可用性一定会大大降低，在现实中我们一般都采用对这些数据不分散存储的策略。</p>\n<p>当然，我们也可以说，最常使用的关系型数据库，因为这个原因，扩展性（分区可容忍性P）受到了限制，这是完全符合CAP理论的。但同时我们应该意识到，这对NoSQL数据库也是一样的。如果NoSQL数据库也要求严格的分布式事务功能，情况并不会比关系型数据库好多少。只是在NoSQL的设计中，我们往往会弱化甚至去除事务的功能，该问题才表现得不那么明显而已。</p>\n<p>因此，在扩展性问题上，如果要说关系型数据库是为了保证C、A而牺牲P，在尽量避免分布式事务这一点上来看，应该是正确的。也就是说：关系型数据库应该具有强大的事务功能，如果分区扩展，可用性就会降低；而NoSQL数据库干脆弱化甚至去除了事务功能，因此，分区的可扩展性就大大增加了。</p>\n<p>总结</p>\n<p>也就是说，未分区的关系型数据库是 满足了<code>CA理论</code>，但摒弃了<code>P理论</code>。</p>\n<h3 id=\"2-分布式环境中的关联场景\"><a href=\"#2-分布式环境中的关联场景\" class=\"headerlink\" title=\"2.分布式环境中的关联场景\"></a>2.分布式环境中的关联场景</h3><p>初看起来，关系型数据库中常用的多表关联操作与CAP理论就更加不沾边了。但仔细考虑，也可以用它来解释数据库分区扩展对关联所带来的影响。对一个数据库来讲，采用了分区扩展策略来扩充容量，数据分散存储了，很显然多表关联的性能就会下降，因为我们必须在网络上进行大量的数据迁移操作，这与CAP理论中数据副本之间的同步操作本质上也是相同的。</p>\n<p>因此，如果要保证系统的高可用性，需要同时实现强大的多表关系操作的关系型数据库在分区可扩展性上就遇到了极大的限制（即使是那些采用了各种优秀解决方案的MPP架构的关系型数据库，如TeraData，Netezza等，其水平可扩展性也是远远不如NoSQL数据库的），而NoSQL数据库则干脆在设计上弱化甚至去除了多表关联操作。那么，从这一点上来理解”NoSQL数据库是为了保证A与P，而牺牲C”的说法，也是可以讲得通的。当然，我们应该理解，关联问题在很多情况下不是并行处理的优点所在，这在很大程度上与Amdahl定律相符合。</p>\n<p>所以，从事务与关联的角度来看关系型数据库的分区可扩展性为什么受限的原因是最为清楚的。而NoSQL数据库也正是因为弱化，甚至去除了像事务与关联（全面地讲，其实还有索引等特性）等在分布式环境中会严重影响系统可用性的功能，才获得了更好的水平可扩展性。</p>\n<p>那么，如果将事务与关联也纳入CAP理论中一致性C的范畴的话，问题就很清楚了：关于“关系型数据库为了保证一致性C与可用性A，而不得不牺牲分区可容忍性P”的说法便是正确的了。但关于”NoSQL选择了C与P，或者A与P”的说法则是错误的，所有的NoSQL数据库在设计策略的大方向上都是选择了A与P（虽然对同一数据多个副本的读写一致性问题的设计各有不同），从来没有完全选择C与P的情况存在。</p>\n<p>现在看来，如果理解CAP理论只是指多个数据副本之间读写一致性的问题，那么它对关系型数据库与NoSQL数据库来讲是完全一样的，它只是运行在分布式环境中的数据管理设施在设计读写一致性问题时需要遵循的一个原则而已，却并不是NoSQL数据库具有优秀的水平可扩展性的真正原因。而如果将CAP理论中的一致性C理解为读写一致性、事务与关联操作的综合，则可以认为关系型数据库选择了C与A，而NoSQL数据库则全都是选择了A与P，但并没有选择C与P的情况存在。</p>\n<p>总结</p>\n<p>nosql 更关注的是A与P，而mysql则更关注的是 A与C</p>\n<h3 id=\"三-一致性分类\"><a href=\"#三-一致性分类\" class=\"headerlink\" title=\"三 一致性分类\"></a>三 一致性分类</h3><p>对于分布式数据系统，分区容忍性是基本要求，否则就失去了价值。因此设计分布式数据系统，就是在一致性和可用性之间取一个平衡。对于大多数WEB应用，其实并不需要强一致性，因此牺牲一致性而换取高可用性，是多数分布式数据库产品的方向。</p>\n<p>当然，牺牲一致性，并不是完全不管数据的一致性，否则数据是混乱的，那么系统可用性再高分布式再好也没有了价值。牺牲一致性，只是不再要求关系型数据库中的强一致性，而是只要系统能达到最终一致性即可，考虑到客户体验，这个最终一致的时间窗口，要尽可能的对用户透明，也就是需要保障“用户感知到的一致性”。通常是通过数据的多份异步复制来实现系统的高可用和数据的最终一致性的，“用户感知到的一致性”的时间窗口则取决于数据复制到一致状态的时间。</p>\n<p>对于一致性，可以分为从客户端和服务端两个不同的视角。从客户端来看，一致性主要指的是多并发访问时更新过的数据如何获取的问题。从服务端来看，则是更新如何复制分布到整个系统，以保证数据最终一致。一致性是因为有并发读写才有的问题，因此在理解一致性的问题时，一定要注意结合考虑并发读写的场景。</p>\n<p>从客户端角度，多进程并发访问时，更新过的数据在不同进程如何获取的不同策略，决定了不同的一致性。对于关系型数据库， 要求更新过的数据能被后续的访问都能看到，这是强一致性。如果能容忍后续的部分或者全部访问不到，则是弱一致性。如果经过一段时间后要求能访问到更新后的数据，则是最终一致性。</p>\n<p>在MongoDB中可以通过配置让复制集成员内部支持强一致性，这时可以设置一个写成功数，只有写操作成功树满足设定的值时才会向客户端返回结果。</p>\n<p>最终一致性根据更新数据后各进程访问到数据的时间和方式的不同，又可以区分为：</p>\n<p>因果一致性(CAUSAL CONSISTENCY)，如果进程A通知进程B它已更新了一个数据项，那么进程B的后续访问将返回更新后的值，且一次写入将保证取代前一次写入。与进程A无因果关系的进程C的访问遵守一般的最终一致性规则。读己之所写（READ-YOUR-WRITES）一致性，当进程A自己更新一个数据项之后，它总是访问到更新过的值，绝不会看到旧值。这是因果一致性模型的一个特例。</p>\n<p>会话（SESSION）一致性，这是上一个模型的实用版本，它把访问存储系统的进程放到会话的上下文中。只要会话还存在，系统就保证“读己之所写”一致性。如果由于某些失败情形令会话终止，就要建立新的会话，而且系统的保证不会延续到新的会话。单调（MONOTONIC）读一致性，如果进程已经看到过数据对象的某个值，那么任何后续访问都不会返回在那个值之前的值。单调写一致性，系统保证来自同一个进程的写操作顺序执行。要是系统不能保证这种程度的一致性，就非常难以编程了。</p>\n<p>上述最终一致性的不同方式可以进行组合，例如<code>单调读一致性</code>和<code>读己之所写一致性</code>就可以组合实现。并且从实践的角度来看，这两者的组合，读取自己更新的数据，和一旦读取到最新的版本不会再读取旧版本，对于此架构上的程序开发来说，会少很多额外的烦恼。</p>\n<p>从服务端角度，如何尽快将更新后的数据分布到整个系统，降低达到最终一致性的时间窗口，是提高系统的可用度和用户体验非常重要的方面。对于分布式数据系统：N — 数据复制的份数,W — 更新数据是需要保证写完成的节点数,R — 读取数据的时候需要读取的节点数，如果W+R&gt;N，写的节点和读的节点重叠，则是强一致性。例如对于典型的一主一备同步复制的关系型数据库，N=2,W=2,R=1，则不管读的是主库还是备库的数据，都是一致的。如果W+R&lt;=N，则是弱一致性。例如对于一主一备异步复制的关系型数据库，N=2,W=1,R=1，则如果读的是备库，就可能无法读取主库已经更新过的数据，所以是弱一致性。</p>\n<p>对于分布式系统，为了保证高可用性，一般设置N&gt;=3。不同的N,W,R组合，是在可用性和一致性之间取一个平衡，以适应不同的应用场景。如果N=W,R=1，任何一个写节点失效，都会导致写失败，因此可用性会降低，但是由于数据分布的N个节点是同步写入的，因此可以保证强一致性。如果N=R,W=1，只需要一个节点写入成功即可，写性能和可用性都比较高。但是读取其他节点的进程可能不能获取更新后的数据，因此是弱一致性。这种情况下，如果W&lt;(N+1)/2，并且写入的节点不重叠的话，则会存在写冲突。</p>\n<p>四 传统数据库与NoSQL数据库<br>传统的关系型数据库在功能支持上通常很宽泛，从简单的键值查询，到复杂的多表联合查询再到事务机制的支持。而与之不同的是，NoSQL系统通常注重性能和扩展性，而非事务机制（事务就是强一致性的体现）。</p>\n<p>传统的SQL数据库的事务通常都是支持ACID的强事务机制。A代表原子性，即在事务中执行多个操作是原子性的，要么事务中的操作全部执行，要么一个都不执行;C代表一致性，即保证进行事务的过程中整个数据加的状态是一致的，不会出现数据花掉的情况;I代表隔离性，即两个事务不会相互影响，覆盖彼此数据等;D表示持久化，即事务一量完成，那么数据应该是被写到安全的，持久化存储的设备上（比如磁盘）。</p>\n<p>NoSQL系统仅提供对行级别的原子性保证，也就是说同时对同一个Key下的数据进行的两个操作，在实际执行的时候是会串行的执行，保证了每一个Key-Value对不会被破坏。例如MongoDB数据库，它是不支持事务机制的，同时也不提倡多表关联的复杂模式设计，它只保证对单个文档(相当于关系数据库中的记录)读写的原子性。</p>\n<p>转自:<a href=\"http://www.liaoqiqi.com/post/251\" target=\"_blank\" rel=\"noopener\">http://www.liaoqiqi.com/post/251</a></p>\n"},{"layout":"keynote","title":"Correlation Analysis","subtitle":"Correlation Analysis","iframe":null,"date":"2016-06-27T01:27:35.000Z","author":"","header-img":"post-bg-js-version.jpg","_content":"\n# Correlation Analysis\n\n## Instrution\n\n关联分析是指从数据集中挖掘出频繁项集，然后从频繁项集中提取出事物之间的强关联规则，辅助决策。\n\neg：下面是一个超市的几名顾客交易信息：\n\nTID         Item\n001       Cola,Egg,Ham\n002\t      Cola, Diaper, Beer\n003\t      Cola, Diaper, Beer, Ham\n004\t      Diaper, Beer\n\nTID 代表流水号，Items代表一次交易的商品\n\n我们对这个数据集进行关联分析，可以找出关联规则 `{Diaper}->{Bear}`。它代表的意义是：购买了 Diaper 的顾客会购买 Beer。这个关系不是必然的，但是可能性很大，这就已经足够用来辅助商家调整 Diaper 和 Beer 的摆放位置了，或者进行捆绑促销来提高销售量。\n\n## 关联分析 相关名词定义\n\n 1. 事务：每一条交易称为一个事务，例如上述实例中的数据集就是四个事务\n\n 2. 项：交易的每一个物品称为一个项，例如Cola、Egg等\n\n 3. 项集：包含另个或多个项的集合叫做项集，例如 {Cola,Egg,Ham}\n\n 4. k-项集：包含k个项的集合叫做`k-项集`，例如 `{Cola}` 叫做 `1-项集`，\n `{Cola,Egg}` 叫做 `2-项集`。\n\n 5. 支持度计数：一个项集出现在几个事务当中，它的支持度计数就是几。例如 `{Diaper,Beer}` 出现在事务 002、003、004 中，所以他的支持度计数是 3\n\n 6. 支持度：支持度计数除于总的事物数。例如上述实例中总的事物数为4，`{Diaper,Beer}` 的支持度计数为3，所以他的支持度是 `3/4=75%`，说明有 75% 的人同时买了 Diaper 和 Beer\n\n 7. 频繁项集：支持度大于或等于某个阈值的项集就叫做 `频繁项集`。例如阈值设为 50% 时，因为{Diaper,Beer} 的支持度是 75%，所以它是频繁项集。\n\n 8. 前件和后件：对于规则 {Diaper}->{Beer}，{Diaper}叫做前件，{Beer}叫做后件。\n\n 9. 置信度：对于规则 {Diaper}->{Beer}，{Diaper,Beer}的支持度除于 {Diaper} 的支持度计数，为这个规则的置信度。例如规则 {Diaper}->{Beer}，{Diaper,Beer}的支持度计数除于{Diaper}的支持度计数，为这个规则的置信度。例如规则{Diaper}->{Beer} 的置信度为 3/3=100%。说明买了Diaper 的人 100% 也买了 Beer。\n\n 10. 强关联规则：大于或等于最小支持度阈值和最小置信度阈值的规则叫做强关联规则。关联分析的最终目标就是要找出强关联规则。\n\n 我们容易发现，如果一个项集是频繁项集，则它的子项也都是频繁项集。如果一个项集是非频繁项集，则它的 超集也一定是非频繁项集。例如 {Diaper, Beer}是频繁项集，则{Diaper}、{Beer}也都是频繁项集。{Egg}是非频繁项集，则{Cola, Egg}也是非频繁项集。\n\n### 关联分析\n\n关联分析的两个步骤\n\n    1. 利用支持度找出数据集中的 `频繁项集`\n    2. 利用置信度从频繁项集中提取出 `强关联规则`\n\n## 频繁项集的挖掘\n\n### Apriori Algorithm\n\nApriori Algorithm 的思路是先找出 `候选项集`，然后根据 `最小支持度阈值` 筛选出 `频繁项集`。\n\n    eg. 先找出所有的 `1-项集`，然后筛选出里面的 `频繁1-项集`；根据`频繁1-项集` 生成候选的 `2-项集`，然后筛选里面的 `频繁2-项集`；再根据 `频繁2-项集` 生成候选的 `3-项集`，从里面筛选出频繁 `3-项集`；.......\n\nApriori 算法的缺点是需要不断扫描数据集，不断地求候选集的支持度从而判断它时候是频繁项集，当数据量大的时候，这种算法的效率将会非常低。\n\n### FP-Growth Algorithm\n\nFP-Growth 算法只需要扫描两次数据集，它的思路是把构造一棵 FP-Tree ，把数据集中的数据映射到树上，在根据这颗 `FP-Tree` 找出所有频繁项集。\n\n关于FP-Growth，[FP-Growth算法的介绍](http://blog.csdn.net/Bone_ACE/article/details/46669699)、[FP-Growth算法的Python实现](http://blog.csdn.net/bone_ace/article/details/46746727)\n\n转载于 [CSDN](http://blog.csdn.net/bone_ace/article/details/46648965) 感谢原作者\n","source":"_posts/Correlation-Analysis.md","raw":"---\nlayout:     keynote\ntitle:      \"Correlation Analysis\"\nsubtitle:   \"Correlation Analysis\"\niframe:     \ndate:  2016-06-27 09:27:35\nauthor:     \"\"\nheader-img: \"post-bg-js-version.jpg\"\ntags:\n    - Analysis\n---\n\n# Correlation Analysis\n\n## Instrution\n\n关联分析是指从数据集中挖掘出频繁项集，然后从频繁项集中提取出事物之间的强关联规则，辅助决策。\n\neg：下面是一个超市的几名顾客交易信息：\n\nTID         Item\n001       Cola,Egg,Ham\n002\t      Cola, Diaper, Beer\n003\t      Cola, Diaper, Beer, Ham\n004\t      Diaper, Beer\n\nTID 代表流水号，Items代表一次交易的商品\n\n我们对这个数据集进行关联分析，可以找出关联规则 `{Diaper}->{Bear}`。它代表的意义是：购买了 Diaper 的顾客会购买 Beer。这个关系不是必然的，但是可能性很大，这就已经足够用来辅助商家调整 Diaper 和 Beer 的摆放位置了，或者进行捆绑促销来提高销售量。\n\n## 关联分析 相关名词定义\n\n 1. 事务：每一条交易称为一个事务，例如上述实例中的数据集就是四个事务\n\n 2. 项：交易的每一个物品称为一个项，例如Cola、Egg等\n\n 3. 项集：包含另个或多个项的集合叫做项集，例如 {Cola,Egg,Ham}\n\n 4. k-项集：包含k个项的集合叫做`k-项集`，例如 `{Cola}` 叫做 `1-项集`，\n `{Cola,Egg}` 叫做 `2-项集`。\n\n 5. 支持度计数：一个项集出现在几个事务当中，它的支持度计数就是几。例如 `{Diaper,Beer}` 出现在事务 002、003、004 中，所以他的支持度计数是 3\n\n 6. 支持度：支持度计数除于总的事物数。例如上述实例中总的事物数为4，`{Diaper,Beer}` 的支持度计数为3，所以他的支持度是 `3/4=75%`，说明有 75% 的人同时买了 Diaper 和 Beer\n\n 7. 频繁项集：支持度大于或等于某个阈值的项集就叫做 `频繁项集`。例如阈值设为 50% 时，因为{Diaper,Beer} 的支持度是 75%，所以它是频繁项集。\n\n 8. 前件和后件：对于规则 {Diaper}->{Beer}，{Diaper}叫做前件，{Beer}叫做后件。\n\n 9. 置信度：对于规则 {Diaper}->{Beer}，{Diaper,Beer}的支持度除于 {Diaper} 的支持度计数，为这个规则的置信度。例如规则 {Diaper}->{Beer}，{Diaper,Beer}的支持度计数除于{Diaper}的支持度计数，为这个规则的置信度。例如规则{Diaper}->{Beer} 的置信度为 3/3=100%。说明买了Diaper 的人 100% 也买了 Beer。\n\n 10. 强关联规则：大于或等于最小支持度阈值和最小置信度阈值的规则叫做强关联规则。关联分析的最终目标就是要找出强关联规则。\n\n 我们容易发现，如果一个项集是频繁项集，则它的子项也都是频繁项集。如果一个项集是非频繁项集，则它的 超集也一定是非频繁项集。例如 {Diaper, Beer}是频繁项集，则{Diaper}、{Beer}也都是频繁项集。{Egg}是非频繁项集，则{Cola, Egg}也是非频繁项集。\n\n### 关联分析\n\n关联分析的两个步骤\n\n    1. 利用支持度找出数据集中的 `频繁项集`\n    2. 利用置信度从频繁项集中提取出 `强关联规则`\n\n## 频繁项集的挖掘\n\n### Apriori Algorithm\n\nApriori Algorithm 的思路是先找出 `候选项集`，然后根据 `最小支持度阈值` 筛选出 `频繁项集`。\n\n    eg. 先找出所有的 `1-项集`，然后筛选出里面的 `频繁1-项集`；根据`频繁1-项集` 生成候选的 `2-项集`，然后筛选里面的 `频繁2-项集`；再根据 `频繁2-项集` 生成候选的 `3-项集`，从里面筛选出频繁 `3-项集`；.......\n\nApriori 算法的缺点是需要不断扫描数据集，不断地求候选集的支持度从而判断它时候是频繁项集，当数据量大的时候，这种算法的效率将会非常低。\n\n### FP-Growth Algorithm\n\nFP-Growth 算法只需要扫描两次数据集，它的思路是把构造一棵 FP-Tree ，把数据集中的数据映射到树上，在根据这颗 `FP-Tree` 找出所有频繁项集。\n\n关于FP-Growth，[FP-Growth算法的介绍](http://blog.csdn.net/Bone_ACE/article/details/46669699)、[FP-Growth算法的Python实现](http://blog.csdn.net/bone_ace/article/details/46746727)\n\n转载于 [CSDN](http://blog.csdn.net/bone_ace/article/details/46648965) 感谢原作者\n","slug":"Correlation-Analysis","published":1,"updated":"2018-01-07T22:28:37.000Z","comments":1,"photos":[],"link":"","_id":"cjc88rlgo0008a1jgv0levmjd","content":"<h1 id=\"Correlation-Analysis\"><a href=\"#Correlation-Analysis\" class=\"headerlink\" title=\"Correlation Analysis\"></a>Correlation Analysis</h1><h2 id=\"Instrution\"><a href=\"#Instrution\" class=\"headerlink\" title=\"Instrution\"></a>Instrution</h2><p>关联分析是指从数据集中挖掘出频繁项集，然后从频繁项集中提取出事物之间的强关联规则，辅助决策。</p>\n<p>eg：下面是一个超市的几名顾客交易信息：</p>\n<p>TID         Item<br>001       Cola,Egg,Ham<br>002          Cola, Diaper, Beer<br>003          Cola, Diaper, Beer, Ham<br>004          Diaper, Beer</p>\n<p>TID 代表流水号，Items代表一次交易的商品</p>\n<p>我们对这个数据集进行关联分析，可以找出关联规则 <code>{Diaper}-&gt;{Bear}</code>。它代表的意义是：购买了 Diaper 的顾客会购买 Beer。这个关系不是必然的，但是可能性很大，这就已经足够用来辅助商家调整 Diaper 和 Beer 的摆放位置了，或者进行捆绑促销来提高销售量。</p>\n<h2 id=\"关联分析-相关名词定义\"><a href=\"#关联分析-相关名词定义\" class=\"headerlink\" title=\"关联分析 相关名词定义\"></a>关联分析 相关名词定义</h2><ol>\n<li><p>事务：每一条交易称为一个事务，例如上述实例中的数据集就是四个事务</p>\n</li>\n<li><p>项：交易的每一个物品称为一个项，例如Cola、Egg等</p>\n</li>\n<li><p>项集：包含另个或多个项的集合叫做项集，例如 {Cola,Egg,Ham}</p>\n</li>\n<li><p>k-项集：包含k个项的集合叫做<code>k-项集</code>，例如 <code>{Cola}</code> 叫做 <code>1-项集</code>，<br><code>{Cola,Egg}</code> 叫做 <code>2-项集</code>。</p>\n</li>\n<li><p>支持度计数：一个项集出现在几个事务当中，它的支持度计数就是几。例如 <code>{Diaper,Beer}</code> 出现在事务 002、003、004 中，所以他的支持度计数是 3</p>\n</li>\n<li><p>支持度：支持度计数除于总的事物数。例如上述实例中总的事物数为4，<code>{Diaper,Beer}</code> 的支持度计数为3，所以他的支持度是 <code>3/4=75%</code>，说明有 75% 的人同时买了 Diaper 和 Beer</p>\n</li>\n<li><p>频繁项集：支持度大于或等于某个阈值的项集就叫做 <code>频繁项集</code>。例如阈值设为 50% 时，因为{Diaper,Beer} 的支持度是 75%，所以它是频繁项集。</p>\n</li>\n<li><p>前件和后件：对于规则 {Diaper}-&gt;{Beer}，{Diaper}叫做前件，{Beer}叫做后件。</p>\n</li>\n<li><p>置信度：对于规则 {Diaper}-&gt;{Beer}，{Diaper,Beer}的支持度除于 {Diaper} 的支持度计数，为这个规则的置信度。例如规则 {Diaper}-&gt;{Beer}，{Diaper,Beer}的支持度计数除于{Diaper}的支持度计数，为这个规则的置信度。例如规则{Diaper}-&gt;{Beer} 的置信度为 3/3=100%。说明买了Diaper 的人 100% 也买了 Beer。</p>\n</li>\n<li><p>强关联规则：大于或等于最小支持度阈值和最小置信度阈值的规则叫做强关联规则。关联分析的最终目标就是要找出强关联规则。</p>\n<p>我们容易发现，如果一个项集是频繁项集，则它的子项也都是频繁项集。如果一个项集是非频繁项集，则它的 超集也一定是非频繁项集。例如 {Diaper, Beer}是频繁项集，则{Diaper}、{Beer}也都是频繁项集。{Egg}是非频繁项集，则{Cola, Egg}也是非频繁项集。</p>\n</li>\n</ol>\n<h3 id=\"关联分析\"><a href=\"#关联分析\" class=\"headerlink\" title=\"关联分析\"></a>关联分析</h3><p>关联分析的两个步骤</p>\n<pre><code>1. 利用支持度找出数据集中的 `频繁项集`\n2. 利用置信度从频繁项集中提取出 `强关联规则`\n</code></pre><h2 id=\"频繁项集的挖掘\"><a href=\"#频繁项集的挖掘\" class=\"headerlink\" title=\"频繁项集的挖掘\"></a>频繁项集的挖掘</h2><h3 id=\"Apriori-Algorithm\"><a href=\"#Apriori-Algorithm\" class=\"headerlink\" title=\"Apriori Algorithm\"></a>Apriori Algorithm</h3><p>Apriori Algorithm 的思路是先找出 <code>候选项集</code>，然后根据 <code>最小支持度阈值</code> 筛选出 <code>频繁项集</code>。</p>\n<pre><code>eg. 先找出所有的 `1-项集`，然后筛选出里面的 `频繁1-项集`；根据`频繁1-项集` 生成候选的 `2-项集`，然后筛选里面的 `频繁2-项集`；再根据 `频繁2-项集` 生成候选的 `3-项集`，从里面筛选出频繁 `3-项集`；.......\n</code></pre><p>Apriori 算法的缺点是需要不断扫描数据集，不断地求候选集的支持度从而判断它时候是频繁项集，当数据量大的时候，这种算法的效率将会非常低。</p>\n<h3 id=\"FP-Growth-Algorithm\"><a href=\"#FP-Growth-Algorithm\" class=\"headerlink\" title=\"FP-Growth Algorithm\"></a>FP-Growth Algorithm</h3><p>FP-Growth 算法只需要扫描两次数据集，它的思路是把构造一棵 FP-Tree ，把数据集中的数据映射到树上，在根据这颗 <code>FP-Tree</code> 找出所有频繁项集。</p>\n<p>关于FP-Growth，<a href=\"http://blog.csdn.net/Bone_ACE/article/details/46669699\" target=\"_blank\" rel=\"noopener\">FP-Growth算法的介绍</a>、<a href=\"http://blog.csdn.net/bone_ace/article/details/46746727\" target=\"_blank\" rel=\"noopener\">FP-Growth算法的Python实现</a></p>\n<p>转载于 <a href=\"http://blog.csdn.net/bone_ace/article/details/46648965\" target=\"_blank\" rel=\"noopener\">CSDN</a> 感谢原作者</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Correlation-Analysis\"><a href=\"#Correlation-Analysis\" class=\"headerlink\" title=\"Correlation Analysis\"></a>Correlation Analysis</h1><h2 id=\"Instrution\"><a href=\"#Instrution\" class=\"headerlink\" title=\"Instrution\"></a>Instrution</h2><p>关联分析是指从数据集中挖掘出频繁项集，然后从频繁项集中提取出事物之间的强关联规则，辅助决策。</p>\n<p>eg：下面是一个超市的几名顾客交易信息：</p>\n<p>TID         Item<br>001       Cola,Egg,Ham<br>002          Cola, Diaper, Beer<br>003          Cola, Diaper, Beer, Ham<br>004          Diaper, Beer</p>\n<p>TID 代表流水号，Items代表一次交易的商品</p>\n<p>我们对这个数据集进行关联分析，可以找出关联规则 <code>{Diaper}-&gt;{Bear}</code>。它代表的意义是：购买了 Diaper 的顾客会购买 Beer。这个关系不是必然的，但是可能性很大，这就已经足够用来辅助商家调整 Diaper 和 Beer 的摆放位置了，或者进行捆绑促销来提高销售量。</p>\n<h2 id=\"关联分析-相关名词定义\"><a href=\"#关联分析-相关名词定义\" class=\"headerlink\" title=\"关联分析 相关名词定义\"></a>关联分析 相关名词定义</h2><ol>\n<li><p>事务：每一条交易称为一个事务，例如上述实例中的数据集就是四个事务</p>\n</li>\n<li><p>项：交易的每一个物品称为一个项，例如Cola、Egg等</p>\n</li>\n<li><p>项集：包含另个或多个项的集合叫做项集，例如 {Cola,Egg,Ham}</p>\n</li>\n<li><p>k-项集：包含k个项的集合叫做<code>k-项集</code>，例如 <code>{Cola}</code> 叫做 <code>1-项集</code>，<br><code>{Cola,Egg}</code> 叫做 <code>2-项集</code>。</p>\n</li>\n<li><p>支持度计数：一个项集出现在几个事务当中，它的支持度计数就是几。例如 <code>{Diaper,Beer}</code> 出现在事务 002、003、004 中，所以他的支持度计数是 3</p>\n</li>\n<li><p>支持度：支持度计数除于总的事物数。例如上述实例中总的事物数为4，<code>{Diaper,Beer}</code> 的支持度计数为3，所以他的支持度是 <code>3/4=75%</code>，说明有 75% 的人同时买了 Diaper 和 Beer</p>\n</li>\n<li><p>频繁项集：支持度大于或等于某个阈值的项集就叫做 <code>频繁项集</code>。例如阈值设为 50% 时，因为{Diaper,Beer} 的支持度是 75%，所以它是频繁项集。</p>\n</li>\n<li><p>前件和后件：对于规则 {Diaper}-&gt;{Beer}，{Diaper}叫做前件，{Beer}叫做后件。</p>\n</li>\n<li><p>置信度：对于规则 {Diaper}-&gt;{Beer}，{Diaper,Beer}的支持度除于 {Diaper} 的支持度计数，为这个规则的置信度。例如规则 {Diaper}-&gt;{Beer}，{Diaper,Beer}的支持度计数除于{Diaper}的支持度计数，为这个规则的置信度。例如规则{Diaper}-&gt;{Beer} 的置信度为 3/3=100%。说明买了Diaper 的人 100% 也买了 Beer。</p>\n</li>\n<li><p>强关联规则：大于或等于最小支持度阈值和最小置信度阈值的规则叫做强关联规则。关联分析的最终目标就是要找出强关联规则。</p>\n<p>我们容易发现，如果一个项集是频繁项集，则它的子项也都是频繁项集。如果一个项集是非频繁项集，则它的 超集也一定是非频繁项集。例如 {Diaper, Beer}是频繁项集，则{Diaper}、{Beer}也都是频繁项集。{Egg}是非频繁项集，则{Cola, Egg}也是非频繁项集。</p>\n</li>\n</ol>\n<h3 id=\"关联分析\"><a href=\"#关联分析\" class=\"headerlink\" title=\"关联分析\"></a>关联分析</h3><p>关联分析的两个步骤</p>\n<pre><code>1. 利用支持度找出数据集中的 `频繁项集`\n2. 利用置信度从频繁项集中提取出 `强关联规则`\n</code></pre><h2 id=\"频繁项集的挖掘\"><a href=\"#频繁项集的挖掘\" class=\"headerlink\" title=\"频繁项集的挖掘\"></a>频繁项集的挖掘</h2><h3 id=\"Apriori-Algorithm\"><a href=\"#Apriori-Algorithm\" class=\"headerlink\" title=\"Apriori Algorithm\"></a>Apriori Algorithm</h3><p>Apriori Algorithm 的思路是先找出 <code>候选项集</code>，然后根据 <code>最小支持度阈值</code> 筛选出 <code>频繁项集</code>。</p>\n<pre><code>eg. 先找出所有的 `1-项集`，然后筛选出里面的 `频繁1-项集`；根据`频繁1-项集` 生成候选的 `2-项集`，然后筛选里面的 `频繁2-项集`；再根据 `频繁2-项集` 生成候选的 `3-项集`，从里面筛选出频繁 `3-项集`；.......\n</code></pre><p>Apriori 算法的缺点是需要不断扫描数据集，不断地求候选集的支持度从而判断它时候是频繁项集，当数据量大的时候，这种算法的效率将会非常低。</p>\n<h3 id=\"FP-Growth-Algorithm\"><a href=\"#FP-Growth-Algorithm\" class=\"headerlink\" title=\"FP-Growth Algorithm\"></a>FP-Growth Algorithm</h3><p>FP-Growth 算法只需要扫描两次数据集，它的思路是把构造一棵 FP-Tree ，把数据集中的数据映射到树上，在根据这颗 <code>FP-Tree</code> 找出所有频繁项集。</p>\n<p>关于FP-Growth，<a href=\"http://blog.csdn.net/Bone_ACE/article/details/46669699\" target=\"_blank\" rel=\"noopener\">FP-Growth算法的介绍</a>、<a href=\"http://blog.csdn.net/bone_ace/article/details/46746727\" target=\"_blank\" rel=\"noopener\">FP-Growth算法的Python实现</a></p>\n<p>转载于 <a href=\"http://blog.csdn.net/bone_ace/article/details/46648965\" target=\"_blank\" rel=\"noopener\">CSDN</a> 感谢原作者</p>\n"},{"layout":"keynote","title":"Correlation Analysis","subtitle":"Correlation Analysis","iframe":null,"date":"2016-06-27T01:27:35.000Z","author":"","header-img":"post-bg-js-version.jpg","_content":"\n# FP-Group 算法\n\n## 引言\n\n在关联分析中，频繁项集的挖掘最常用到的就是 Aprior 算法.Aprior 算法是一种先产生 `候选项集` 在检验是否频繁的 `产生-测试` 的方法。这种方法有种弊端：当数据集很大的时候，需要不断扫描数据集造成运行效率很低。而 `FP-Group` 算法就很好的解决了这个问题。他的思路是吧数据集中的事务映射到一棵 `FP-Tree` 上面，在根据这颗树找出频繁项集。`FP-Tree` 的构建过程只需要扫描两次数据集。\n\n## 示例\n\n某店铺购物篮的数据:\n\n\nTID\tItems\n001\tCola, Egg, Ham\n002\tCola, Diaper, Beer\n003\tCola, Diaper, Beer, Ham\n004\tDiaper, Beer\n\nTID 代表交易流水号，Items代表一次交易的商品。\n\n首先，FP-Growth 算法的任务hi找出数据集中的 `频繁项集`\n然后，FP-Growth 算法的步骤大体上可以分为两步:(1)FP-Tree 的构建 (2)FP-Tree 上频繁项集的挖掘\n\n## FP-Tree 的构造\n\n1. 扫描一遍数据库，找出频繁项的列表 L ,然后按照 `支持度计数`递减排序。即：\n\n    L = <(COla:3),(Diaper:3),(Beer:3),(Ham:2)>\n\n2. 再次扫描数据库，由每个事物不断构建 TP-Tree:\n\n  (1) TP-Tree 的根节点为 NULL\n\n  (2) 从数据库中取出事物，按照 L 排序，然后把每个项逐个添加到 FP-Tree 的分支上去。例如事物 001 排序后为 `{Cola,Ham}`，在根节点上加一颗子树 `Cola-Ham`；事物 002 排序后为 `{Cola,Diaper,Beer}`，因为根节点上一节有个子树节点 `Cola`，所以可以共用该节点，在 `Cola` 节点上加一颗子树 `Diaper-Beer`，同时 Cola 的计数加 1；事物003可与树通用节点 Cola-Diaper-Deer，所以只需要在 Beer后面加上一个 Ham，同时把 Cola,Diaper,Beer的计数加1即可...\n\n3. FP-Tree 还有一样东西-头节点表。作用是将所有相同的项链接起来，这样比较容易遍历。\n  最后得到的FP-Tree如下:\n  ![FP-Tree](1.jpg)\n\n构造 FP-Tree 的伪代码如下：\n\n```\n算法：FP-Tree 构造算法\n输入：事务数据集D，最小支持度阈值 min_sup\n输出：FP-Tree\n(1) 扫描事务数据集 D 一次，获得频繁项的集合 F 和其中每个频繁项的支持度，对F 中的所有频繁项按其支持度进行降序排序，结果为频繁项表 L;\n\n(2) 创建一个 FP-Tree 的根节点 T，标记为“null”；\n(3) for 事务数据集 D 中每个事物 Trans do\n(4)   对 Trans 中的所有频繁项按照 L 中的次序排序；\n(5)   对排序后的频繁项表以[p|P]格式表示，其中p是第一个元素，而p是频繁项表除去p后剩余元素组成的项表；\n(6)   调用函数 insert_tree([p|P],T);\n(7)  end for\n\ninsert_tree([p|P],root){\n  if root 有孩子节点 N and N.item-name = p.item-name then\n  Else\n    创建新节点 N;\n    N.item-name = p.item-name;\n    N.count++;\n    p.parent=root;\n    将 N.node-link 指向树种与他同项目名的节点;\n  end if\n  if P 非空 then\n    把 P 的第一项目赋值给p，并把它从 P 中删除；\n    递归调用 insert_tree([p|P],N);\n  end if\n}\n```\n\n## 从 FP-Tree 提取频繁项集\n\n相对而言，FP-Tree 的构造比较简单，而从 FP-Tree 提取频繁项集比较难理解。其中出现了几个新名词，下面针对购物篮的 FP-Tree 进行讲解吧。\n\n#### 求以\"Ham\"为后缀的频繁项集:\n\n · 根据头节点表找出 \"Ham\" 结尾的路径：<Cola:3,Ham:1> 和 <Cola:3,Diaper:2,Beer:2,Ham:1>，带表的意义是：原数据集中 (Cola,Ham) 和 (Cola,Diaper,Beer,Ham) 各出现一次。\n\n · \"Ham\" 的两个前缀路径 {(Cola:1),(Cola Diaper Beer:1)} 构成了 Ham 的 `条件模式基`，注意条件模式基的计数都定义为了 Ham 的计数。\n\n · 根据 `条件模式基` 构建 Ham 的 `条件 FP-树`：因为 Ham 的条件模式基中 Diaper、Beer 只出现了一次，Coal 出现了两次，所以 Diaper、Beer 是 `非频繁项`，不包含在 Ham 的条件FP-树种。\n\n · Ham 的条件FP-树只有一个分支 <Cola:2>，得到 `条件频繁项集` {Cola:2}。\n · 条件频繁项集 Cola:2 和后缀模式 Ham 合并，得到 `频繁项集` {Cola Ham:2}。\n\n求以 Beer 为后缀的频繁项集：\n\n  · Beer 的 `条件模式基` 有 {(Cola Diaper:2),(Diaper:1)}。\n  · Beer 的 `条件FP-树`如下：\n  · Beer 为后缀的频繁项集为 {Cola Diaper Beer:2}、{Diaper Beer:2}、{Cola Beer:2}\n\n![Beer 条件FP-树](2.jpg)\n\n求以 Diaper 为后缀的频繁项集：\n\n  条件模式基为 {(Cola:2)}，最后得到频繁项集 {Cola Diaper:2}。\n\n综上，得到的频繁项集有:{Cola Ham:2}、{Cola Beer:2}、{Diaper Beer:2}、{Cola Diaper:2}、{Cola Diaper Beer:2}\n\n从 FP-Tree 提取频繁项集的主要步骤是:\n\n    对于每个频繁项，通过以下步骤来求他的`条件频繁项集`:\n        · 找出它的 `条件模式基`\n        · 把 `条件模式基` 当做事务集去建造一棵树，这棵树不叫 `FP-Tree`，而是叫做 `条件FP-Tree`。\n        · 对这颗 `条件FP-Tree` 递归以上操作，即找这颗`条件FP-Tree` 上的 `子条件频繁项集`。\n    · 以上找到的都是该`频繁项`的`条件频繁项`而已，所以每次递归都需要把 `条件频繁项集` 和 该`频繁项集`拼接起来才是我们最终要求的 `频繁项集`。\n\n伪代码：\n\n```\n算法：FP-Growth(FP-Tree,α);\n输入：已构造好的 FP-Tree，项集 α (初始值为空)，最小支持度 min_sup;\n输出：事务数据集 D 中的频繁项集 L;\n  L初始值为空\n  if Tree 只包含单个路径 P then\n    for 路径 P 中节点的每个组合 (记为 β) do\n      产生项目集 α ∪ β ，其支持度 support 等于 β 中节点的最小支持度数;\n      return L = L ∪ 支持度大于 min_sup 的项目集合 β ∪ α\n    else  //包含多个路径\n      for Tree 的头表中的每个频繁项 αf do\n        产生一个项目集 β = αf ∪ α ，其支持度等于 αf 的支持度；\n        构造 β 的条件模式基 B，并根据该条件模式基 B 构造 β 的条件FP-树 Treeβ;\n        if Treeβ ≠ ∅ then\n          递归调用 FP-Growth(Treeβ,β);\n        end if\n      end for\n    end if\n````\n\n\n本文转载，感谢原作者（原文链接：http://blog.csdn.net/bone_ace/article/details/46669699）\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n 哦\n","source":"_posts/FP-Growth-Algorithm.md","raw":"---\nlayout:     keynote\ntitle:      \"Correlation Analysis\"\nsubtitle:   \"Correlation Analysis\"\niframe:     \ndate:  2016-06-27 09:27:35\nauthor:     \"\"\nheader-img: \"post-bg-js-version.jpg\"\ntags:\n    - Analysis\n---\n\n# FP-Group 算法\n\n## 引言\n\n在关联分析中，频繁项集的挖掘最常用到的就是 Aprior 算法.Aprior 算法是一种先产生 `候选项集` 在检验是否频繁的 `产生-测试` 的方法。这种方法有种弊端：当数据集很大的时候，需要不断扫描数据集造成运行效率很低。而 `FP-Group` 算法就很好的解决了这个问题。他的思路是吧数据集中的事务映射到一棵 `FP-Tree` 上面，在根据这颗树找出频繁项集。`FP-Tree` 的构建过程只需要扫描两次数据集。\n\n## 示例\n\n某店铺购物篮的数据:\n\n\nTID\tItems\n001\tCola, Egg, Ham\n002\tCola, Diaper, Beer\n003\tCola, Diaper, Beer, Ham\n004\tDiaper, Beer\n\nTID 代表交易流水号，Items代表一次交易的商品。\n\n首先，FP-Growth 算法的任务hi找出数据集中的 `频繁项集`\n然后，FP-Growth 算法的步骤大体上可以分为两步:(1)FP-Tree 的构建 (2)FP-Tree 上频繁项集的挖掘\n\n## FP-Tree 的构造\n\n1. 扫描一遍数据库，找出频繁项的列表 L ,然后按照 `支持度计数`递减排序。即：\n\n    L = <(COla:3),(Diaper:3),(Beer:3),(Ham:2)>\n\n2. 再次扫描数据库，由每个事物不断构建 TP-Tree:\n\n  (1) TP-Tree 的根节点为 NULL\n\n  (2) 从数据库中取出事物，按照 L 排序，然后把每个项逐个添加到 FP-Tree 的分支上去。例如事物 001 排序后为 `{Cola,Ham}`，在根节点上加一颗子树 `Cola-Ham`；事物 002 排序后为 `{Cola,Diaper,Beer}`，因为根节点上一节有个子树节点 `Cola`，所以可以共用该节点，在 `Cola` 节点上加一颗子树 `Diaper-Beer`，同时 Cola 的计数加 1；事物003可与树通用节点 Cola-Diaper-Deer，所以只需要在 Beer后面加上一个 Ham，同时把 Cola,Diaper,Beer的计数加1即可...\n\n3. FP-Tree 还有一样东西-头节点表。作用是将所有相同的项链接起来，这样比较容易遍历。\n  最后得到的FP-Tree如下:\n  ![FP-Tree](1.jpg)\n\n构造 FP-Tree 的伪代码如下：\n\n```\n算法：FP-Tree 构造算法\n输入：事务数据集D，最小支持度阈值 min_sup\n输出：FP-Tree\n(1) 扫描事务数据集 D 一次，获得频繁项的集合 F 和其中每个频繁项的支持度，对F 中的所有频繁项按其支持度进行降序排序，结果为频繁项表 L;\n\n(2) 创建一个 FP-Tree 的根节点 T，标记为“null”；\n(3) for 事务数据集 D 中每个事物 Trans do\n(4)   对 Trans 中的所有频繁项按照 L 中的次序排序；\n(5)   对排序后的频繁项表以[p|P]格式表示，其中p是第一个元素，而p是频繁项表除去p后剩余元素组成的项表；\n(6)   调用函数 insert_tree([p|P],T);\n(7)  end for\n\ninsert_tree([p|P],root){\n  if root 有孩子节点 N and N.item-name = p.item-name then\n  Else\n    创建新节点 N;\n    N.item-name = p.item-name;\n    N.count++;\n    p.parent=root;\n    将 N.node-link 指向树种与他同项目名的节点;\n  end if\n  if P 非空 then\n    把 P 的第一项目赋值给p，并把它从 P 中删除；\n    递归调用 insert_tree([p|P],N);\n  end if\n}\n```\n\n## 从 FP-Tree 提取频繁项集\n\n相对而言，FP-Tree 的构造比较简单，而从 FP-Tree 提取频繁项集比较难理解。其中出现了几个新名词，下面针对购物篮的 FP-Tree 进行讲解吧。\n\n#### 求以\"Ham\"为后缀的频繁项集:\n\n · 根据头节点表找出 \"Ham\" 结尾的路径：<Cola:3,Ham:1> 和 <Cola:3,Diaper:2,Beer:2,Ham:1>，带表的意义是：原数据集中 (Cola,Ham) 和 (Cola,Diaper,Beer,Ham) 各出现一次。\n\n · \"Ham\" 的两个前缀路径 {(Cola:1),(Cola Diaper Beer:1)} 构成了 Ham 的 `条件模式基`，注意条件模式基的计数都定义为了 Ham 的计数。\n\n · 根据 `条件模式基` 构建 Ham 的 `条件 FP-树`：因为 Ham 的条件模式基中 Diaper、Beer 只出现了一次，Coal 出现了两次，所以 Diaper、Beer 是 `非频繁项`，不包含在 Ham 的条件FP-树种。\n\n · Ham 的条件FP-树只有一个分支 <Cola:2>，得到 `条件频繁项集` {Cola:2}。\n · 条件频繁项集 Cola:2 和后缀模式 Ham 合并，得到 `频繁项集` {Cola Ham:2}。\n\n求以 Beer 为后缀的频繁项集：\n\n  · Beer 的 `条件模式基` 有 {(Cola Diaper:2),(Diaper:1)}。\n  · Beer 的 `条件FP-树`如下：\n  · Beer 为后缀的频繁项集为 {Cola Diaper Beer:2}、{Diaper Beer:2}、{Cola Beer:2}\n\n![Beer 条件FP-树](2.jpg)\n\n求以 Diaper 为后缀的频繁项集：\n\n  条件模式基为 {(Cola:2)}，最后得到频繁项集 {Cola Diaper:2}。\n\n综上，得到的频繁项集有:{Cola Ham:2}、{Cola Beer:2}、{Diaper Beer:2}、{Cola Diaper:2}、{Cola Diaper Beer:2}\n\n从 FP-Tree 提取频繁项集的主要步骤是:\n\n    对于每个频繁项，通过以下步骤来求他的`条件频繁项集`:\n        · 找出它的 `条件模式基`\n        · 把 `条件模式基` 当做事务集去建造一棵树，这棵树不叫 `FP-Tree`，而是叫做 `条件FP-Tree`。\n        · 对这颗 `条件FP-Tree` 递归以上操作，即找这颗`条件FP-Tree` 上的 `子条件频繁项集`。\n    · 以上找到的都是该`频繁项`的`条件频繁项`而已，所以每次递归都需要把 `条件频繁项集` 和 该`频繁项集`拼接起来才是我们最终要求的 `频繁项集`。\n\n伪代码：\n\n```\n算法：FP-Growth(FP-Tree,α);\n输入：已构造好的 FP-Tree，项集 α (初始值为空)，最小支持度 min_sup;\n输出：事务数据集 D 中的频繁项集 L;\n  L初始值为空\n  if Tree 只包含单个路径 P then\n    for 路径 P 中节点的每个组合 (记为 β) do\n      产生项目集 α ∪ β ，其支持度 support 等于 β 中节点的最小支持度数;\n      return L = L ∪ 支持度大于 min_sup 的项目集合 β ∪ α\n    else  //包含多个路径\n      for Tree 的头表中的每个频繁项 αf do\n        产生一个项目集 β = αf ∪ α ，其支持度等于 αf 的支持度；\n        构造 β 的条件模式基 B，并根据该条件模式基 B 构造 β 的条件FP-树 Treeβ;\n        if Treeβ ≠ ∅ then\n          递归调用 FP-Growth(Treeβ,β);\n        end if\n      end for\n    end if\n````\n\n\n本文转载，感谢原作者（原文链接：http://blog.csdn.net/bone_ace/article/details/46669699）\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n 哦\n","slug":"FP-Growth-Algorithm","published":1,"updated":"2018-01-07T22:28:37.000Z","comments":1,"photos":[],"link":"","_id":"cjc88rlgr000ba1jgkkfqbpo2","content":"<h1 id=\"FP-Group-算法\"><a href=\"#FP-Group-算法\" class=\"headerlink\" title=\"FP-Group 算法\"></a>FP-Group 算法</h1><h2 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h2><p>在关联分析中，频繁项集的挖掘最常用到的就是 Aprior 算法.Aprior 算法是一种先产生 <code>候选项集</code> 在检验是否频繁的 <code>产生-测试</code> 的方法。这种方法有种弊端：当数据集很大的时候，需要不断扫描数据集造成运行效率很低。而 <code>FP-Group</code> 算法就很好的解决了这个问题。他的思路是吧数据集中的事务映射到一棵 <code>FP-Tree</code> 上面，在根据这颗树找出频繁项集。<code>FP-Tree</code> 的构建过程只需要扫描两次数据集。</p>\n<h2 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h2><p>某店铺购物篮的数据:</p>\n<p>TID    Items<br>001    Cola, Egg, Ham<br>002    Cola, Diaper, Beer<br>003    Cola, Diaper, Beer, Ham<br>004    Diaper, Beer</p>\n<p>TID 代表交易流水号，Items代表一次交易的商品。</p>\n<p>首先，FP-Growth 算法的任务hi找出数据集中的 <code>频繁项集</code><br>然后，FP-Growth 算法的步骤大体上可以分为两步:(1)FP-Tree 的构建 (2)FP-Tree 上频繁项集的挖掘</p>\n<h2 id=\"FP-Tree-的构造\"><a href=\"#FP-Tree-的构造\" class=\"headerlink\" title=\"FP-Tree 的构造\"></a>FP-Tree 的构造</h2><ol>\n<li><p>扫描一遍数据库，找出频繁项的列表 L ,然后按照 <code>支持度计数</code>递减排序。即：</p>\n<p> L = &lt;(COla:3),(Diaper:3),(Beer:3),(Ham:2)&gt;</p>\n</li>\n<li><p>再次扫描数据库，由每个事物不断构建 TP-Tree:</p>\n<p>(1) TP-Tree 的根节点为 NULL</p>\n<p>(2) 从数据库中取出事物，按照 L 排序，然后把每个项逐个添加到 FP-Tree 的分支上去。例如事物 001 排序后为 <code>{Cola,Ham}</code>，在根节点上加一颗子树 <code>Cola-Ham</code>；事物 002 排序后为 <code>{Cola,Diaper,Beer}</code>，因为根节点上一节有个子树节点 <code>Cola</code>，所以可以共用该节点，在 <code>Cola</code> 节点上加一颗子树 <code>Diaper-Beer</code>，同时 Cola 的计数加 1；事物003可与树通用节点 Cola-Diaper-Deer，所以只需要在 Beer后面加上一个 Ham，同时把 Cola,Diaper,Beer的计数加1即可…</p>\n</li>\n<li><p>FP-Tree 还有一样东西-头节点表。作用是将所有相同的项链接起来，这样比较容易遍历。<br>最后得到的FP-Tree如下:<br><img src=\"1.jpg\" alt=\"FP-Tree\"></p>\n</li>\n</ol>\n<p>构造 FP-Tree 的伪代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">算法：FP-Tree 构造算法</span><br><span class=\"line\">输入：事务数据集D，最小支持度阈值 min_sup</span><br><span class=\"line\">输出：FP-Tree</span><br><span class=\"line\">(1) 扫描事务数据集 D 一次，获得频繁项的集合 F 和其中每个频繁项的支持度，对F 中的所有频繁项按其支持度进行降序排序，结果为频繁项表 L;</span><br><span class=\"line\"></span><br><span class=\"line\">(2) 创建一个 FP-Tree 的根节点 T，标记为“null”；</span><br><span class=\"line\">(3) for 事务数据集 D 中每个事物 Trans do</span><br><span class=\"line\">(4)   对 Trans 中的所有频繁项按照 L 中的次序排序；</span><br><span class=\"line\">(5)   对排序后的频繁项表以[p|P]格式表示，其中p是第一个元素，而p是频繁项表除去p后剩余元素组成的项表；</span><br><span class=\"line\">(6)   调用函数 insert_tree([p|P],T);</span><br><span class=\"line\">(7)  end for</span><br><span class=\"line\"></span><br><span class=\"line\">insert_tree([p|P],root)&#123;</span><br><span class=\"line\">  if root 有孩子节点 N and N.item-name = p.item-name then</span><br><span class=\"line\">  Else</span><br><span class=\"line\">    创建新节点 N;</span><br><span class=\"line\">    N.item-name = p.item-name;</span><br><span class=\"line\">    N.count++;</span><br><span class=\"line\">    p.parent=root;</span><br><span class=\"line\">    将 N.node-link 指向树种与他同项目名的节点;</span><br><span class=\"line\">  end if</span><br><span class=\"line\">  if P 非空 then</span><br><span class=\"line\">    把 P 的第一项目赋值给p，并把它从 P 中删除；</span><br><span class=\"line\">    递归调用 insert_tree([p|P],N);</span><br><span class=\"line\">  end if</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"从-FP-Tree-提取频繁项集\"><a href=\"#从-FP-Tree-提取频繁项集\" class=\"headerlink\" title=\"从 FP-Tree 提取频繁项集\"></a>从 FP-Tree 提取频繁项集</h2><p>相对而言，FP-Tree 的构造比较简单，而从 FP-Tree 提取频繁项集比较难理解。其中出现了几个新名词，下面针对购物篮的 FP-Tree 进行讲解吧。</p>\n<h4 id=\"求以”Ham”为后缀的频繁项集\"><a href=\"#求以”Ham”为后缀的频繁项集\" class=\"headerlink\" title=\"求以”Ham”为后缀的频繁项集:\"></a>求以”Ham”为后缀的频繁项集:</h4><p> · 根据头节点表找出 “Ham” 结尾的路径：<cola:3,ham:1> 和 <cola:3,diaper:2,beer:2,ham:1>，带表的意义是：原数据集中 (Cola,Ham) 和 (Cola,Diaper,Beer,Ham) 各出现一次。</cola:3,diaper:2,beer:2,ham:1></cola:3,ham:1></p>\n<p> · “Ham” 的两个前缀路径 {(Cola:1),(Cola Diaper Beer:1)} 构成了 Ham 的 <code>条件模式基</code>，注意条件模式基的计数都定义为了 Ham 的计数。</p>\n<p> · 根据 <code>条件模式基</code> 构建 Ham 的 <code>条件 FP-树</code>：因为 Ham 的条件模式基中 Diaper、Beer 只出现了一次，Coal 出现了两次，所以 Diaper、Beer 是 <code>非频繁项</code>，不包含在 Ham 的条件FP-树种。</p>\n<p> · Ham 的条件FP-树只有一个分支 <cola:2>，得到 <code>条件频繁项集</code> {Cola:2}。<br> · 条件频繁项集 Cola:2 和后缀模式 Ham 合并，得到 <code>频繁项集</code> {Cola Ham:2}。</cola:2></p>\n<p>求以 Beer 为后缀的频繁项集：</p>\n<p>  · Beer 的 <code>条件模式基</code> 有 {(Cola Diaper:2),(Diaper:1)}。<br>  · Beer 的 <code>条件FP-树</code>如下：<br>  · Beer 为后缀的频繁项集为 {Cola Diaper Beer:2}、{Diaper Beer:2}、{Cola Beer:2}</p>\n<p><img src=\"2.jpg\" alt=\"Beer 条件FP-树\"></p>\n<p>求以 Diaper 为后缀的频繁项集：</p>\n<p>  条件模式基为 {(Cola:2)}，最后得到频繁项集 {Cola Diaper:2}。</p>\n<p>综上，得到的频繁项集有:{Cola Ham:2}、{Cola Beer:2}、{Diaper Beer:2}、{Cola Diaper:2}、{Cola Diaper Beer:2}</p>\n<p>从 FP-Tree 提取频繁项集的主要步骤是:</p>\n<pre><code>对于每个频繁项，通过以下步骤来求他的`条件频繁项集`:\n    · 找出它的 `条件模式基`\n    · 把 `条件模式基` 当做事务集去建造一棵树，这棵树不叫 `FP-Tree`，而是叫做 `条件FP-Tree`。\n    · 对这颗 `条件FP-Tree` 递归以上操作，即找这颗`条件FP-Tree` 上的 `子条件频繁项集`。\n· 以上找到的都是该`频繁项`的`条件频繁项`而已，所以每次递归都需要把 `条件频繁项集` 和 该`频繁项集`拼接起来才是我们最终要求的 `频繁项集`。\n</code></pre><p>伪代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">算法：FP-Growth(FP-Tree,α);</span><br><span class=\"line\">输入：已构造好的 FP-Tree，项集 α (初始值为空)，最小支持度 min_sup;</span><br><span class=\"line\">输出：事务数据集 D 中的频繁项集 L;</span><br><span class=\"line\">  L初始值为空</span><br><span class=\"line\">  if Tree 只包含单个路径 P then</span><br><span class=\"line\">    for 路径 P 中节点的每个组合 (记为 β) do</span><br><span class=\"line\">      产生项目集 α ∪ β ，其支持度 support 等于 β 中节点的最小支持度数;</span><br><span class=\"line\">      return L = L ∪ 支持度大于 min_sup 的项目集合 β ∪ α</span><br><span class=\"line\">    else  //包含多个路径</span><br><span class=\"line\">      for Tree 的头表中的每个频繁项 αf do</span><br><span class=\"line\">        产生一个项目集 β = αf ∪ α ，其支持度等于 αf 的支持度；</span><br><span class=\"line\">        构造 β 的条件模式基 B，并根据该条件模式基 B 构造 β 的条件FP-树 Treeβ;</span><br><span class=\"line\">        if Treeβ ≠ ∅ then</span><br><span class=\"line\">          递归调用 FP-Growth(Treeβ,β);</span><br><span class=\"line\">        end if</span><br><span class=\"line\">      end for</span><br><span class=\"line\">    end if</span><br><span class=\"line\">`</span><br></pre></td></tr></table></figure>\n<p>本文转载，感谢原作者（原文链接：<a href=\"http://blog.csdn.net/bone_ace/article/details/46669699）\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/bone_ace/article/details/46669699）</a></p>\n<p> 哦</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"FP-Group-算法\"><a href=\"#FP-Group-算法\" class=\"headerlink\" title=\"FP-Group 算法\"></a>FP-Group 算法</h1><h2 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h2><p>在关联分析中，频繁项集的挖掘最常用到的就是 Aprior 算法.Aprior 算法是一种先产生 <code>候选项集</code> 在检验是否频繁的 <code>产生-测试</code> 的方法。这种方法有种弊端：当数据集很大的时候，需要不断扫描数据集造成运行效率很低。而 <code>FP-Group</code> 算法就很好的解决了这个问题。他的思路是吧数据集中的事务映射到一棵 <code>FP-Tree</code> 上面，在根据这颗树找出频繁项集。<code>FP-Tree</code> 的构建过程只需要扫描两次数据集。</p>\n<h2 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h2><p>某店铺购物篮的数据:</p>\n<p>TID    Items<br>001    Cola, Egg, Ham<br>002    Cola, Diaper, Beer<br>003    Cola, Diaper, Beer, Ham<br>004    Diaper, Beer</p>\n<p>TID 代表交易流水号，Items代表一次交易的商品。</p>\n<p>首先，FP-Growth 算法的任务hi找出数据集中的 <code>频繁项集</code><br>然后，FP-Growth 算法的步骤大体上可以分为两步:(1)FP-Tree 的构建 (2)FP-Tree 上频繁项集的挖掘</p>\n<h2 id=\"FP-Tree-的构造\"><a href=\"#FP-Tree-的构造\" class=\"headerlink\" title=\"FP-Tree 的构造\"></a>FP-Tree 的构造</h2><ol>\n<li><p>扫描一遍数据库，找出频繁项的列表 L ,然后按照 <code>支持度计数</code>递减排序。即：</p>\n<p> L = &lt;(COla:3),(Diaper:3),(Beer:3),(Ham:2)&gt;</p>\n</li>\n<li><p>再次扫描数据库，由每个事物不断构建 TP-Tree:</p>\n<p>(1) TP-Tree 的根节点为 NULL</p>\n<p>(2) 从数据库中取出事物，按照 L 排序，然后把每个项逐个添加到 FP-Tree 的分支上去。例如事物 001 排序后为 <code>{Cola,Ham}</code>，在根节点上加一颗子树 <code>Cola-Ham</code>；事物 002 排序后为 <code>{Cola,Diaper,Beer}</code>，因为根节点上一节有个子树节点 <code>Cola</code>，所以可以共用该节点，在 <code>Cola</code> 节点上加一颗子树 <code>Diaper-Beer</code>，同时 Cola 的计数加 1；事物003可与树通用节点 Cola-Diaper-Deer，所以只需要在 Beer后面加上一个 Ham，同时把 Cola,Diaper,Beer的计数加1即可…</p>\n</li>\n<li><p>FP-Tree 还有一样东西-头节点表。作用是将所有相同的项链接起来，这样比较容易遍历。<br>最后得到的FP-Tree如下:<br><img src=\"1.jpg\" alt=\"FP-Tree\"></p>\n</li>\n</ol>\n<p>构造 FP-Tree 的伪代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">算法：FP-Tree 构造算法</span><br><span class=\"line\">输入：事务数据集D，最小支持度阈值 min_sup</span><br><span class=\"line\">输出：FP-Tree</span><br><span class=\"line\">(1) 扫描事务数据集 D 一次，获得频繁项的集合 F 和其中每个频繁项的支持度，对F 中的所有频繁项按其支持度进行降序排序，结果为频繁项表 L;</span><br><span class=\"line\"></span><br><span class=\"line\">(2) 创建一个 FP-Tree 的根节点 T，标记为“null”；</span><br><span class=\"line\">(3) for 事务数据集 D 中每个事物 Trans do</span><br><span class=\"line\">(4)   对 Trans 中的所有频繁项按照 L 中的次序排序；</span><br><span class=\"line\">(5)   对排序后的频繁项表以[p|P]格式表示，其中p是第一个元素，而p是频繁项表除去p后剩余元素组成的项表；</span><br><span class=\"line\">(6)   调用函数 insert_tree([p|P],T);</span><br><span class=\"line\">(7)  end for</span><br><span class=\"line\"></span><br><span class=\"line\">insert_tree([p|P],root)&#123;</span><br><span class=\"line\">  if root 有孩子节点 N and N.item-name = p.item-name then</span><br><span class=\"line\">  Else</span><br><span class=\"line\">    创建新节点 N;</span><br><span class=\"line\">    N.item-name = p.item-name;</span><br><span class=\"line\">    N.count++;</span><br><span class=\"line\">    p.parent=root;</span><br><span class=\"line\">    将 N.node-link 指向树种与他同项目名的节点;</span><br><span class=\"line\">  end if</span><br><span class=\"line\">  if P 非空 then</span><br><span class=\"line\">    把 P 的第一项目赋值给p，并把它从 P 中删除；</span><br><span class=\"line\">    递归调用 insert_tree([p|P],N);</span><br><span class=\"line\">  end if</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"从-FP-Tree-提取频繁项集\"><a href=\"#从-FP-Tree-提取频繁项集\" class=\"headerlink\" title=\"从 FP-Tree 提取频繁项集\"></a>从 FP-Tree 提取频繁项集</h2><p>相对而言，FP-Tree 的构造比较简单，而从 FP-Tree 提取频繁项集比较难理解。其中出现了几个新名词，下面针对购物篮的 FP-Tree 进行讲解吧。</p>\n<h4 id=\"求以”Ham”为后缀的频繁项集\"><a href=\"#求以”Ham”为后缀的频繁项集\" class=\"headerlink\" title=\"求以”Ham”为后缀的频繁项集:\"></a>求以”Ham”为后缀的频繁项集:</h4><p> · 根据头节点表找出 “Ham” 结尾的路径：<cola:3,ham:1> 和 <cola:3,diaper:2,beer:2,ham:1>，带表的意义是：原数据集中 (Cola,Ham) 和 (Cola,Diaper,Beer,Ham) 各出现一次。</cola:3,diaper:2,beer:2,ham:1></cola:3,ham:1></p>\n<p> · “Ham” 的两个前缀路径 {(Cola:1),(Cola Diaper Beer:1)} 构成了 Ham 的 <code>条件模式基</code>，注意条件模式基的计数都定义为了 Ham 的计数。</p>\n<p> · 根据 <code>条件模式基</code> 构建 Ham 的 <code>条件 FP-树</code>：因为 Ham 的条件模式基中 Diaper、Beer 只出现了一次，Coal 出现了两次，所以 Diaper、Beer 是 <code>非频繁项</code>，不包含在 Ham 的条件FP-树种。</p>\n<p> · Ham 的条件FP-树只有一个分支 <cola:2>，得到 <code>条件频繁项集</code> {Cola:2}。<br> · 条件频繁项集 Cola:2 和后缀模式 Ham 合并，得到 <code>频繁项集</code> {Cola Ham:2}。</cola:2></p>\n<p>求以 Beer 为后缀的频繁项集：</p>\n<p>  · Beer 的 <code>条件模式基</code> 有 {(Cola Diaper:2),(Diaper:1)}。<br>  · Beer 的 <code>条件FP-树</code>如下：<br>  · Beer 为后缀的频繁项集为 {Cola Diaper Beer:2}、{Diaper Beer:2}、{Cola Beer:2}</p>\n<p><img src=\"2.jpg\" alt=\"Beer 条件FP-树\"></p>\n<p>求以 Diaper 为后缀的频繁项集：</p>\n<p>  条件模式基为 {(Cola:2)}，最后得到频繁项集 {Cola Diaper:2}。</p>\n<p>综上，得到的频繁项集有:{Cola Ham:2}、{Cola Beer:2}、{Diaper Beer:2}、{Cola Diaper:2}、{Cola Diaper Beer:2}</p>\n<p>从 FP-Tree 提取频繁项集的主要步骤是:</p>\n<pre><code>对于每个频繁项，通过以下步骤来求他的`条件频繁项集`:\n    · 找出它的 `条件模式基`\n    · 把 `条件模式基` 当做事务集去建造一棵树，这棵树不叫 `FP-Tree`，而是叫做 `条件FP-Tree`。\n    · 对这颗 `条件FP-Tree` 递归以上操作，即找这颗`条件FP-Tree` 上的 `子条件频繁项集`。\n· 以上找到的都是该`频繁项`的`条件频繁项`而已，所以每次递归都需要把 `条件频繁项集` 和 该`频繁项集`拼接起来才是我们最终要求的 `频繁项集`。\n</code></pre><p>伪代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">算法：FP-Growth(FP-Tree,α);</span><br><span class=\"line\">输入：已构造好的 FP-Tree，项集 α (初始值为空)，最小支持度 min_sup;</span><br><span class=\"line\">输出：事务数据集 D 中的频繁项集 L;</span><br><span class=\"line\">  L初始值为空</span><br><span class=\"line\">  if Tree 只包含单个路径 P then</span><br><span class=\"line\">    for 路径 P 中节点的每个组合 (记为 β) do</span><br><span class=\"line\">      产生项目集 α ∪ β ，其支持度 support 等于 β 中节点的最小支持度数;</span><br><span class=\"line\">      return L = L ∪ 支持度大于 min_sup 的项目集合 β ∪ α</span><br><span class=\"line\">    else  //包含多个路径</span><br><span class=\"line\">      for Tree 的头表中的每个频繁项 αf do</span><br><span class=\"line\">        产生一个项目集 β = αf ∪ α ，其支持度等于 αf 的支持度；</span><br><span class=\"line\">        构造 β 的条件模式基 B，并根据该条件模式基 B 构造 β 的条件FP-树 Treeβ;</span><br><span class=\"line\">        if Treeβ ≠ ∅ then</span><br><span class=\"line\">          递归调用 FP-Growth(Treeβ,β);</span><br><span class=\"line\">        end if</span><br><span class=\"line\">      end for</span><br><span class=\"line\">    end if</span><br><span class=\"line\">`</span><br></pre></td></tr></table></figure>\n<p>本文转载，感谢原作者（原文链接：<a href=\"http://blog.csdn.net/bone_ace/article/details/46669699）\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/bone_ace/article/details/46669699）</a></p>\n<p> 哦</p>\n"},{"layout":"keynote","title":"How use Markdown to write GitHub README","subtitle":"Keynote: How use Markdown to write GitHub README","iframe":null,"date":"2016-06-27T01:27:35.000Z","author":"","header-img":"post-bg-js-version.jpg","_content":"#Github Readme 排版解析\n\n>README 文件的后缀名是md，md是markdown的缩写。markdown是一种编辑博客的语言，\n>Github在语法标准markdown上做了修改，称之为Github Flavored Markdown GFM 不是 GFW=.=\n\n##一、关于标题\n\n大标题  \n====  \n中标题\n-----\n\n在文本下面加上等于号=，那么上方的文本就变成大标题。等于号的个数无限制，但一定要大于0。\n比大标题低一级的是中标题，也就是显示出来比大标题小一点。在文本下面加上------ 那么上方的文本就变成中标题，同样的下划线的个数无限制。\n除此之外，你也会发现大，中标题下面都有一条横线，没这就是= 和-的显示结果。如果你只输入=，那么他就会显示一条横线。\n\n除此之外，标题还有等级表示法，分为六级，显示的文本大小一次减少，不同等级之间以井号#的个数来标识\n```mark\n#一级标题\n##二级标题\n###三级标题\n####四级标题\n#####五级标题\n######六级标题\n```\n##显示文本\n\n###普通文本\n    直接输入文字就是普通文本，但是要注意的是换行的时候不能直接通过回车来换行，需要使用<br>(或者<br/>)。事实上，markdown支持一些html标签，当然如果完全使用html写就失去了markdown的意义\n```bash\n这是一行<br>\n普通的文本<br/>\n换行啦\\<br>\n```\n注意第三行的<br>前添加的反斜杠\\，目的就是像其他语言那样实现转译，也就是<的转译\n此外，要显示一个超链接的话，就直接输入这个链接的url就好。显示出来会自动变成可链接的形式。\n####显示空格的小Tip\n默认的文本行首行都会被忽略的，但是如果你想用空格来排一下，那就把输入法由半角改为全角就OK啦\n###单行文本\n```bash\n        使用两个Tab符来实现单行文本。\n```\n注意前面有两个Tab，在Github上单行文本显示效果如图：\n\n\n###多行文本\n多行文本和单行文本异曲同工，只要在每行行首加两个Tab即可\n\n##使部分文字高亮显示\n可以使用` ` 将需要高亮显示的文字包围起来即可\nThank `You` . Please `Call` Me `Coder`\n\n##文字超链接\n给一段文字添加超链接的格式： [要显示的文字](超链接的地址  \"悬停显示\") 比如\n```mark\n[我的博客](http://blog.csdn.net \"blog\")\n```\n##插入符号\n###圆点符\n```mark\n* 这是一个圆点符号\n* 这是另一个圆点符号\n```\n\n```mark\n* 编程语言\n    * 脚本语言\n         * Python\n```\n第二行一个Tab，第三行两个Tab。这样用来表示层级结构就更清晰了吧，看效果：\n\n        如果你觉得三级结构表达还不够清楚，我们可以试着换另一种方式\n```mark\n>数据结构\n>>树\n>>>二叉树\n>>>>平衡二叉树\n>>>>>满二叉树\n```\n显示效果：\n\n当然比这个更一般的用法是这样。常常能在书籍里面看到的效果，比如引用别人的文章。直接看效果。\n\n\n##插入图片\n###来自网络的图片\n这个方括号里的baidu并不会对图像显示造成任何改动，如果你想达到鼠标悬停显示提示信息，那么可以仿照前面介绍的文本中的方法，就是这样\n```mark\n![baidu](http://www.baidu.com/img/bdlogo.gif \"百度logo\")\n```\n在URL后面，加一个双引号包围的字符串，显示效果如图：\n\n\n###Github仓库里的图片\n有时候我们想显示一个Github仓库里面的图片，其实图片显示的格式与上面基本一致，所不同的就是括号里的url怎么写\nhttps://github.com/georgezouq/MyImages/raw/master/Logo/foryou.gif\n###给图片加上超链接\n```mark\n[![baidu]](http://baidu.com)\n[baidu]:http://www.baidu.com/img/bdlogo.git \"百度LOGO\"\n```\n插入代码片断\n\n\n\n##使用Github的Gist\nGist是以文件为单位的，不是以项目为单位的。而且与普通的GitHub上建的仓库不同，Gist是private的哦。普通的项目默认都是public的，要想弄成private貌似还要交钱的样子。既然是private那么用来写写日记，是极好的。\nGitHub网页的顶部有：\n\n点进去:\n\n这就是你可以编辑的私有文件，它不仅支持Text文本，还支持各种编程语言呢！当然也包括markdown。输入文件名：\n\n最后保存，选中 Create Secret Gist 就是私有的喽。\n","source":"_posts/How use Markdown to write GitHub README.markdown","raw":"---\nlayout:     keynote\ntitle:      \"How use Markdown to write GitHub README\"\nsubtitle:   \"Keynote: How use Markdown to write GitHub README\"\niframe:     \ndate:  2016-06-27 09:27:35\nauthor:     \"\"\nheader-img: \"post-bg-js-version.jpg\"\ntags:\n    - 工具使用\n---\n#Github Readme 排版解析\n\n>README 文件的后缀名是md，md是markdown的缩写。markdown是一种编辑博客的语言，\n>Github在语法标准markdown上做了修改，称之为Github Flavored Markdown GFM 不是 GFW=.=\n\n##一、关于标题\n\n大标题  \n====  \n中标题\n-----\n\n在文本下面加上等于号=，那么上方的文本就变成大标题。等于号的个数无限制，但一定要大于0。\n比大标题低一级的是中标题，也就是显示出来比大标题小一点。在文本下面加上------ 那么上方的文本就变成中标题，同样的下划线的个数无限制。\n除此之外，你也会发现大，中标题下面都有一条横线，没这就是= 和-的显示结果。如果你只输入=，那么他就会显示一条横线。\n\n除此之外，标题还有等级表示法，分为六级，显示的文本大小一次减少，不同等级之间以井号#的个数来标识\n```mark\n#一级标题\n##二级标题\n###三级标题\n####四级标题\n#####五级标题\n######六级标题\n```\n##显示文本\n\n###普通文本\n    直接输入文字就是普通文本，但是要注意的是换行的时候不能直接通过回车来换行，需要使用<br>(或者<br/>)。事实上，markdown支持一些html标签，当然如果完全使用html写就失去了markdown的意义\n```bash\n这是一行<br>\n普通的文本<br/>\n换行啦\\<br>\n```\n注意第三行的<br>前添加的反斜杠\\，目的就是像其他语言那样实现转译，也就是<的转译\n此外，要显示一个超链接的话，就直接输入这个链接的url就好。显示出来会自动变成可链接的形式。\n####显示空格的小Tip\n默认的文本行首行都会被忽略的，但是如果你想用空格来排一下，那就把输入法由半角改为全角就OK啦\n###单行文本\n```bash\n        使用两个Tab符来实现单行文本。\n```\n注意前面有两个Tab，在Github上单行文本显示效果如图：\n\n\n###多行文本\n多行文本和单行文本异曲同工，只要在每行行首加两个Tab即可\n\n##使部分文字高亮显示\n可以使用` ` 将需要高亮显示的文字包围起来即可\nThank `You` . Please `Call` Me `Coder`\n\n##文字超链接\n给一段文字添加超链接的格式： [要显示的文字](超链接的地址  \"悬停显示\") 比如\n```mark\n[我的博客](http://blog.csdn.net \"blog\")\n```\n##插入符号\n###圆点符\n```mark\n* 这是一个圆点符号\n* 这是另一个圆点符号\n```\n\n```mark\n* 编程语言\n    * 脚本语言\n         * Python\n```\n第二行一个Tab，第三行两个Tab。这样用来表示层级结构就更清晰了吧，看效果：\n\n        如果你觉得三级结构表达还不够清楚，我们可以试着换另一种方式\n```mark\n>数据结构\n>>树\n>>>二叉树\n>>>>平衡二叉树\n>>>>>满二叉树\n```\n显示效果：\n\n当然比这个更一般的用法是这样。常常能在书籍里面看到的效果，比如引用别人的文章。直接看效果。\n\n\n##插入图片\n###来自网络的图片\n这个方括号里的baidu并不会对图像显示造成任何改动，如果你想达到鼠标悬停显示提示信息，那么可以仿照前面介绍的文本中的方法，就是这样\n```mark\n![baidu](http://www.baidu.com/img/bdlogo.gif \"百度logo\")\n```\n在URL后面，加一个双引号包围的字符串，显示效果如图：\n\n\n###Github仓库里的图片\n有时候我们想显示一个Github仓库里面的图片，其实图片显示的格式与上面基本一致，所不同的就是括号里的url怎么写\nhttps://github.com/georgezouq/MyImages/raw/master/Logo/foryou.gif\n###给图片加上超链接\n```mark\n[![baidu]](http://baidu.com)\n[baidu]:http://www.baidu.com/img/bdlogo.git \"百度LOGO\"\n```\n插入代码片断\n\n\n\n##使用Github的Gist\nGist是以文件为单位的，不是以项目为单位的。而且与普通的GitHub上建的仓库不同，Gist是private的哦。普通的项目默认都是public的，要想弄成private貌似还要交钱的样子。既然是private那么用来写写日记，是极好的。\nGitHub网页的顶部有：\n\n点进去:\n\n这就是你可以编辑的私有文件，它不仅支持Text文本，还支持各种编程语言呢！当然也包括markdown。输入文件名：\n\n最后保存，选中 Create Secret Gist 就是私有的喽。\n","slug":"How use Markdown to write GitHub README","published":1,"updated":"2018-01-07T22:28:37.000Z","comments":1,"photos":[],"link":"","_id":"cjc88rlgt000ca1jgptmbri6r","content":"<p>#Github Readme 排版解析</p>\n<blockquote>\n<p>README 文件的后缀名是md，md是markdown的缩写。markdown是一种编辑博客的语言，<br>Github在语法标准markdown上做了修改，称之为Github Flavored Markdown GFM 不是 GFW=.=</p>\n</blockquote>\n<p>##一、关于标题</p>\n<h1 id=\"大标题\"><a href=\"#大标题\" class=\"headerlink\" title=\"大标题  \"></a>大标题  </h1><h2 id=\"中标题\"><a href=\"#中标题\" class=\"headerlink\" title=\"中标题\"></a>中标题</h2><p>在文本下面加上等于号=，那么上方的文本就变成大标题。等于号的个数无限制，但一定要大于0。<br>比大标题低一级的是中标题，也就是显示出来比大标题小一点。在文本下面加上—— 那么上方的文本就变成中标题，同样的下划线的个数无限制。<br>除此之外，你也会发现大，中标题下面都有一条横线，没这就是= 和-的显示结果。如果你只输入=，那么他就会显示一条横线。</p>\n<p>除此之外，标题还有等级表示法，分为六级，显示的文本大小一次减少，不同等级之间以井号#的个数来标识<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">#一级标题</span><br><span class=\"line\">##二级标题</span><br><span class=\"line\">###三级标题</span><br><span class=\"line\">####四级标题</span><br><span class=\"line\">#####五级标题</span><br><span class=\"line\">######六级标题</span><br></pre></td></tr></table></figure></p>\n<p>##显示文本</p>\n<p>###普通文本<br>    直接输入文字就是普通文本，但是要注意的是换行的时候不能直接通过回车来换行，需要使用<br>(或者<br>)。事实上，markdown支持一些html标签，当然如果完全使用html写就失去了markdown的意义<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">这是一行&lt;br&gt;</span><br><span class=\"line\">普通的文本&lt;br/&gt;</span><br><span class=\"line\">换行啦\\&lt;br&gt;</span><br></pre></td></tr></table></figure></p>\n<p>注意第三行的<br>前添加的反斜杠\\，目的就是像其他语言那样实现转译，也就是&lt;的转译<br>此外，要显示一个超链接的话，就直接输入这个链接的url就好。显示出来会自动变成可链接的形式。</p>\n<p>####显示空格的小Tip<br>默认的文本行首行都会被忽略的，但是如果你想用空格来排一下，那就把输入法由半角改为全角就OK啦</p>\n<p>###单行文本<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">使用两个Tab符来实现单行文本。</span><br></pre></td></tr></table></figure></p>\n<p>注意前面有两个Tab，在Github上单行文本显示效果如图：</p>\n<p>###多行文本<br>多行文本和单行文本异曲同工，只要在每行行首加两个Tab即可</p>\n<p>##使部分文字高亮显示<br>可以使用<code></code> 将需要高亮显示的文字包围起来即可<br>Thank <code>You</code> . Please <code>Call</code> Me <code>Coder</code></p>\n<p>##文字超链接<br>给一段文字添加超链接的格式： <a href=\"超链接的地址\" title=\"悬停显示\">要显示的文字</a> 比如<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">[我的博客](http://blog.csdn.net &quot;blog&quot;)</span><br></pre></td></tr></table></figure></p>\n<p>##插入符号</p>\n<p>###圆点符<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">* 这是一个圆点符号</span><br><span class=\"line\">* 这是另一个圆点符号</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">* 编程语言</span><br><span class=\"line\">    * 脚本语言</span><br><span class=\"line\">         * Python</span><br></pre></td></tr></table></figure>\n<p>第二行一个Tab，第三行两个Tab。这样用来表示层级结构就更清晰了吧，看效果：</p>\n<pre><code>如果你觉得三级结构表达还不够清楚，我们可以试着换另一种方式\n</code></pre><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&gt;数据结构</span><br><span class=\"line\">&gt;&gt;树</span><br><span class=\"line\">&gt;&gt;&gt;二叉树</span><br><span class=\"line\">&gt;&gt;&gt;&gt;平衡二叉树</span><br><span class=\"line\">&gt;&gt;&gt;&gt;&gt;满二叉树</span><br></pre></td></tr></table></figure>\n<p>显示效果：</p>\n<p>当然比这个更一般的用法是这样。常常能在书籍里面看到的效果，比如引用别人的文章。直接看效果。</p>\n<p>##插入图片</p>\n<p>###来自网络的图片<br>这个方括号里的baidu并不会对图像显示造成任何改动，如果你想达到鼠标悬停显示提示信息，那么可以仿照前面介绍的文本中的方法，就是这样<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">![baidu](http://www.baidu.com/img/bdlogo.gif &quot;百度logo&quot;)</span><br></pre></td></tr></table></figure></p>\n<p>在URL后面，加一个双引号包围的字符串，显示效果如图：</p>\n<p>###Github仓库里的图片<br>有时候我们想显示一个Github仓库里面的图片，其实图片显示的格式与上面基本一致，所不同的就是括号里的url怎么写<br><a href=\"https://github.com/georgezouq/MyImages/raw/master/Logo/foryou.gif\" target=\"_blank\" rel=\"noopener\">https://github.com/georgezouq/MyImages/raw/master/Logo/foryou.gif</a></p>\n<p>###给图片加上超链接<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">[![baidu]](http://baidu.com)</span><br><span class=\"line\">[baidu]:http://www.baidu.com/img/bdlogo.git &quot;百度LOGO&quot;</span><br></pre></td></tr></table></figure></p>\n<p>插入代码片断</p>\n<p>##使用Github的Gist<br>Gist是以文件为单位的，不是以项目为单位的。而且与普通的GitHub上建的仓库不同，Gist是private的哦。普通的项目默认都是public的，要想弄成private貌似还要交钱的样子。既然是private那么用来写写日记，是极好的。<br>GitHub网页的顶部有：</p>\n<p>点进去:</p>\n<p>这就是你可以编辑的私有文件，它不仅支持Text文本，还支持各种编程语言呢！当然也包括markdown。输入文件名：</p>\n<p>最后保存，选中 Create Secret Gist 就是私有的喽。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>#Github Readme 排版解析</p>\n<blockquote>\n<p>README 文件的后缀名是md，md是markdown的缩写。markdown是一种编辑博客的语言，<br>Github在语法标准markdown上做了修改，称之为Github Flavored Markdown GFM 不是 GFW=.=</p>\n</blockquote>\n<p>##一、关于标题</p>\n<h1 id=\"大标题\"><a href=\"#大标题\" class=\"headerlink\" title=\"大标题  \"></a>大标题  </h1><h2 id=\"中标题\"><a href=\"#中标题\" class=\"headerlink\" title=\"中标题\"></a>中标题</h2><p>在文本下面加上等于号=，那么上方的文本就变成大标题。等于号的个数无限制，但一定要大于0。<br>比大标题低一级的是中标题，也就是显示出来比大标题小一点。在文本下面加上—— 那么上方的文本就变成中标题，同样的下划线的个数无限制。<br>除此之外，你也会发现大，中标题下面都有一条横线，没这就是= 和-的显示结果。如果你只输入=，那么他就会显示一条横线。</p>\n<p>除此之外，标题还有等级表示法，分为六级，显示的文本大小一次减少，不同等级之间以井号#的个数来标识<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">#一级标题</span><br><span class=\"line\">##二级标题</span><br><span class=\"line\">###三级标题</span><br><span class=\"line\">####四级标题</span><br><span class=\"line\">#####五级标题</span><br><span class=\"line\">######六级标题</span><br></pre></td></tr></table></figure></p>\n<p>##显示文本</p>\n<p>###普通文本<br>    直接输入文字就是普通文本，但是要注意的是换行的时候不能直接通过回车来换行，需要使用<br>(或者<br>)。事实上，markdown支持一些html标签，当然如果完全使用html写就失去了markdown的意义<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">这是一行&lt;br&gt;</span><br><span class=\"line\">普通的文本&lt;br/&gt;</span><br><span class=\"line\">换行啦\\&lt;br&gt;</span><br></pre></td></tr></table></figure></p>\n<p>注意第三行的<br>前添加的反斜杠\\，目的就是像其他语言那样实现转译，也就是&lt;的转译<br>此外，要显示一个超链接的话，就直接输入这个链接的url就好。显示出来会自动变成可链接的形式。</p>\n<p>####显示空格的小Tip<br>默认的文本行首行都会被忽略的，但是如果你想用空格来排一下，那就把输入法由半角改为全角就OK啦</p>\n<p>###单行文本<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">使用两个Tab符来实现单行文本。</span><br></pre></td></tr></table></figure></p>\n<p>注意前面有两个Tab，在Github上单行文本显示效果如图：</p>\n<p>###多行文本<br>多行文本和单行文本异曲同工，只要在每行行首加两个Tab即可</p>\n<p>##使部分文字高亮显示<br>可以使用<code></code> 将需要高亮显示的文字包围起来即可<br>Thank <code>You</code> . Please <code>Call</code> Me <code>Coder</code></p>\n<p>##文字超链接<br>给一段文字添加超链接的格式： <a href=\"超链接的地址\" title=\"悬停显示\">要显示的文字</a> 比如<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">[我的博客](http://blog.csdn.net &quot;blog&quot;)</span><br></pre></td></tr></table></figure></p>\n<p>##插入符号</p>\n<p>###圆点符<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">* 这是一个圆点符号</span><br><span class=\"line\">* 这是另一个圆点符号</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">* 编程语言</span><br><span class=\"line\">    * 脚本语言</span><br><span class=\"line\">         * Python</span><br></pre></td></tr></table></figure>\n<p>第二行一个Tab，第三行两个Tab。这样用来表示层级结构就更清晰了吧，看效果：</p>\n<pre><code>如果你觉得三级结构表达还不够清楚，我们可以试着换另一种方式\n</code></pre><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&gt;数据结构</span><br><span class=\"line\">&gt;&gt;树</span><br><span class=\"line\">&gt;&gt;&gt;二叉树</span><br><span class=\"line\">&gt;&gt;&gt;&gt;平衡二叉树</span><br><span class=\"line\">&gt;&gt;&gt;&gt;&gt;满二叉树</span><br></pre></td></tr></table></figure>\n<p>显示效果：</p>\n<p>当然比这个更一般的用法是这样。常常能在书籍里面看到的效果，比如引用别人的文章。直接看效果。</p>\n<p>##插入图片</p>\n<p>###来自网络的图片<br>这个方括号里的baidu并不会对图像显示造成任何改动，如果你想达到鼠标悬停显示提示信息，那么可以仿照前面介绍的文本中的方法，就是这样<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">![baidu](http://www.baidu.com/img/bdlogo.gif &quot;百度logo&quot;)</span><br></pre></td></tr></table></figure></p>\n<p>在URL后面，加一个双引号包围的字符串，显示效果如图：</p>\n<p>###Github仓库里的图片<br>有时候我们想显示一个Github仓库里面的图片，其实图片显示的格式与上面基本一致，所不同的就是括号里的url怎么写<br><a href=\"https://github.com/georgezouq/MyImages/raw/master/Logo/foryou.gif\" target=\"_blank\" rel=\"noopener\">https://github.com/georgezouq/MyImages/raw/master/Logo/foryou.gif</a></p>\n<p>###给图片加上超链接<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">[![baidu]](http://baidu.com)</span><br><span class=\"line\">[baidu]:http://www.baidu.com/img/bdlogo.git &quot;百度LOGO&quot;</span><br></pre></td></tr></table></figure></p>\n<p>插入代码片断</p>\n<p>##使用Github的Gist<br>Gist是以文件为单位的，不是以项目为单位的。而且与普通的GitHub上建的仓库不同，Gist是private的哦。普通的项目默认都是public的，要想弄成private貌似还要交钱的样子。既然是private那么用来写写日记，是极好的。<br>GitHub网页的顶部有：</p>\n<p>点进去:</p>\n<p>这就是你可以编辑的私有文件，它不仅支持Text文本，还支持各种编程语言呢！当然也包括markdown。输入文件名：</p>\n<p>最后保存，选中 Create Secret Gist 就是私有的喽。</p>\n"},{"title":"How do we build website with Memcache","date":"2016-07-06T01:14:47.000Z","_content":"This article from [Memcached Official Document](https://github.com/memcached/memcached/wiki/TutorialCachingStory) ,slightly modified and thanks for original author :\n\nWe begin with A Story of Caching\n\nTwo plucky adventurers, Programmer and Sysadmin, set out on a journey. Together they make websites. Websites with webservers and databases. Users from all over the Internet talk to the webservers and ask them to make pages for them. The webservers ask the databases for junk they need to make the pages. Programmer codes, Sysadmin adds webservers and database servers.\n\nOne day the Sysadmin realizes that their database is sick! It's spewing bile and red stuff all over! Sysadmin declares it has a fever, a load average of 20! Programmer asks Sysadmin, \"well, what can we do?\" Sysadmin says, \"I heard about this great thing called memcached. It really helped livejournal!\" \"Okay, let's try it!\" says the Programmer.\n\nOur plucky Sysadmin eyes his webservers, of which he has six. He decides to use three of them to run the 'memcached' server. Sysadmin adds a gigabyte of ram to each webserver, and starts up memcached with a limit of 1 gigabyte each. So he has three memcached instances, each can hold up to 1 gigabyte of data. So the Programmer and the Sysadmin step back and behold their glorious memcached!\n\n\"So now what?\" they say, \"it's not DOING anything!\" The memcacheds aren't talking to anything and they certainly don't have any data. And NOW their database has a load of 25!\n\nOur adventurous Programmer grabs the pecl/memcache client library manual, which the plucky Sysadmin has helpfully installed on all SIX webservers. \"Never fear!\" he says. \"I've got an idea!\" He takes the IP addresses and port numbers of the THREE memcacheds and adds them to an array in php.\n\n```php\n$MEMCACHE_SERVERS = array(\n    \"10.1.1.1\", //web1\n    \"10.1.1.2\", //web2\n    \"10.1.1.3\", //web3\n);\n```\n\nThen he makes an object, which he cleverly calls '$memcache'.\n\n$memcache = new Memcache();\nforeach($MEMCACHE_SERVERS as $server){\n    $memcache->addServer ( $server );\n}\nNow Programmer thinks. He thinks and thinks and thinks. \"I know!\" he says. \"There's this thing on the front page that runs SELECT * FROM hugetable WHERE timestamp > lastweek ORDER BY timestamp ASC LIMIT 50000; and it takes five seconds!\" \"Let's put it in memcached,\" he says. So he wraps his code for the SELECT and uses his $memcache object. His code asks:\n\nAre the results of this select in memcache? If not, run the query, take the results, and PUT it in memcache! Like so:\n\n```php\n$huge_data_for_front_page = $memcache->get(\"huge_data_for_front_page\");\nif($huge_data_for_front_page === false){\n    $huge_data_for_front_page = array();\n    $sql = \"SELECT * FROM hugetable WHERE timestamp > lastweek ORDER BY timestamp ASC LIMIT 50000\";\n    $res = mysql_query($sql, $mysql_connection);\n    while($rec = mysql_fetch_assoc($res)){\n        $huge_data_for_front_page[] = $rec;\n    }\n    // cache for 10 minutes\n    $memcache->set(\"huge_data_for_front_page\", $huge_data_for_front_page, 0, 600);\n}\n\n// use $huge_data_for_front_page how you please\n\n```\n\nProgrammer pushes code. Sysadmin sweats. BAM! DB load is down to 10! The website is pretty fast now. So now, the Sysadmin puzzles, \"What the HELL just happened!?\" \"I put graphs on my memcacheds! I used cacti, and this is what I see! I see traffic to one memcached, but I made three :(.\" So, the Sysadmin quickly learns the ascii protocol and telnets to port 11211 on each memcached and asks it:\n\nHey, 'get huge_data_for_front_page' are you there?\n\nThe first memcached does not answer...\n\nThe second memcached does not answer...\n\nThe third memcached, however, spits back a huge glob of crap into his telnet session! There's the data! Only once memcached has the key that the Programmer cached!\n\nPuzzled, he asks on the mailing list. They all respond in unison, \"It's a distributed cache! That's what it does!\" But what does that mean? Still confused, and a little scared for his life, the Sysadmin asks the Programmer to cache a few more things. \"Let's see what happens. We're curious folk. We can figure this one out,\" says the Sysadmin.\n\n\"Well, there is another query that is not slow, but is run 100 times per second. Maybe that would help,\" says the Programmer. So he wraps that up like he did before. Sure enough, the server loads drops to 8!\n\nSo the Programmer codes more and more things get cached. He uses new techniques. \"I found them on the list and the faq! What nice blokes,\" he says. The DB load drops; 7, 5, 3, 2, 1!\n\n\"Okay,\" says the Sysadmin, \"let's try again.\" Now he looks at the graphs. ALL of the memcacheds are running! All of them are getting requests! This is great! They're all used!\n\nSo again, he takes keys that the Programmer uses and looks for them on his memcached servers. 'get this_key' 'get that_key' But each time he does this, he only finds each key on one memcached! Now WHY would you do this, he thinks? And he puzzles all night. That's silly! Don't you want the keys to be on all memcacheds?\n\n\"But wait\", he thinks \"I gave each memcached 1 gigabyte of memory, and that means, in total, I can cache three gigabytes of my database, instead of just ONE! Oh man, this is great,\" he thinks. \"This'll save me a ton of cash. Brad Fitzpatrick, I love your ass!\"\n\n\"But hmm, the next problem, and this one's a puzzler, this webserver right here, this one runing memcached it's old, it's sick and needs to be upgraded. But in order to do that I have to take it offline! What will happen to my poor memcache cluster? Eh, let's find out,\" he says, and he shuts down the box. Now he looks at his graphs. \"Oh noes, the DB load, it's gone up in stride! The load isn't one, it's now two. Hmm, but still tolerable. All of the other memcacheds are still getting traffic. This ain't so bad. Just a few cache misses, and I'm almost done with my work. So he turns the machine back on, and puts memcached back to work. After a few minutes, the DB load drops again back down to 1, where it should always be.\n\n\"The cache restored itself! I get it now. If it's not available it just means a few of my requests get missed. But it's not enough to kill me. That's pretty sweet.\"\n\nSo, the Programmer and Sysadmin continue to build websites. They continue to cache. When they have questions, they ask the mailing list or read the faq again. They watch their graphs. And all live happily ever after.\n\nAuthor: Dormando via IRC. Edited by Brian Moon for fun. Further fun editing by Emufarmers.\n","source":"_posts/How-do-we-build-website-with-Memcache.md","raw":"---\ntitle: How do we build website with Memcache\ndate: 2016-07-06 09:14:47\ntags:\n---\nThis article from [Memcached Official Document](https://github.com/memcached/memcached/wiki/TutorialCachingStory) ,slightly modified and thanks for original author :\n\nWe begin with A Story of Caching\n\nTwo plucky adventurers, Programmer and Sysadmin, set out on a journey. Together they make websites. Websites with webservers and databases. Users from all over the Internet talk to the webservers and ask them to make pages for them. The webservers ask the databases for junk they need to make the pages. Programmer codes, Sysadmin adds webservers and database servers.\n\nOne day the Sysadmin realizes that their database is sick! It's spewing bile and red stuff all over! Sysadmin declares it has a fever, a load average of 20! Programmer asks Sysadmin, \"well, what can we do?\" Sysadmin says, \"I heard about this great thing called memcached. It really helped livejournal!\" \"Okay, let's try it!\" says the Programmer.\n\nOur plucky Sysadmin eyes his webservers, of which he has six. He decides to use three of them to run the 'memcached' server. Sysadmin adds a gigabyte of ram to each webserver, and starts up memcached with a limit of 1 gigabyte each. So he has three memcached instances, each can hold up to 1 gigabyte of data. So the Programmer and the Sysadmin step back and behold their glorious memcached!\n\n\"So now what?\" they say, \"it's not DOING anything!\" The memcacheds aren't talking to anything and they certainly don't have any data. And NOW their database has a load of 25!\n\nOur adventurous Programmer grabs the pecl/memcache client library manual, which the plucky Sysadmin has helpfully installed on all SIX webservers. \"Never fear!\" he says. \"I've got an idea!\" He takes the IP addresses and port numbers of the THREE memcacheds and adds them to an array in php.\n\n```php\n$MEMCACHE_SERVERS = array(\n    \"10.1.1.1\", //web1\n    \"10.1.1.2\", //web2\n    \"10.1.1.3\", //web3\n);\n```\n\nThen he makes an object, which he cleverly calls '$memcache'.\n\n$memcache = new Memcache();\nforeach($MEMCACHE_SERVERS as $server){\n    $memcache->addServer ( $server );\n}\nNow Programmer thinks. He thinks and thinks and thinks. \"I know!\" he says. \"There's this thing on the front page that runs SELECT * FROM hugetable WHERE timestamp > lastweek ORDER BY timestamp ASC LIMIT 50000; and it takes five seconds!\" \"Let's put it in memcached,\" he says. So he wraps his code for the SELECT and uses his $memcache object. His code asks:\n\nAre the results of this select in memcache? If not, run the query, take the results, and PUT it in memcache! Like so:\n\n```php\n$huge_data_for_front_page = $memcache->get(\"huge_data_for_front_page\");\nif($huge_data_for_front_page === false){\n    $huge_data_for_front_page = array();\n    $sql = \"SELECT * FROM hugetable WHERE timestamp > lastweek ORDER BY timestamp ASC LIMIT 50000\";\n    $res = mysql_query($sql, $mysql_connection);\n    while($rec = mysql_fetch_assoc($res)){\n        $huge_data_for_front_page[] = $rec;\n    }\n    // cache for 10 minutes\n    $memcache->set(\"huge_data_for_front_page\", $huge_data_for_front_page, 0, 600);\n}\n\n// use $huge_data_for_front_page how you please\n\n```\n\nProgrammer pushes code. Sysadmin sweats. BAM! DB load is down to 10! The website is pretty fast now. So now, the Sysadmin puzzles, \"What the HELL just happened!?\" \"I put graphs on my memcacheds! I used cacti, and this is what I see! I see traffic to one memcached, but I made three :(.\" So, the Sysadmin quickly learns the ascii protocol and telnets to port 11211 on each memcached and asks it:\n\nHey, 'get huge_data_for_front_page' are you there?\n\nThe first memcached does not answer...\n\nThe second memcached does not answer...\n\nThe third memcached, however, spits back a huge glob of crap into his telnet session! There's the data! Only once memcached has the key that the Programmer cached!\n\nPuzzled, he asks on the mailing list. They all respond in unison, \"It's a distributed cache! That's what it does!\" But what does that mean? Still confused, and a little scared for his life, the Sysadmin asks the Programmer to cache a few more things. \"Let's see what happens. We're curious folk. We can figure this one out,\" says the Sysadmin.\n\n\"Well, there is another query that is not slow, but is run 100 times per second. Maybe that would help,\" says the Programmer. So he wraps that up like he did before. Sure enough, the server loads drops to 8!\n\nSo the Programmer codes more and more things get cached. He uses new techniques. \"I found them on the list and the faq! What nice blokes,\" he says. The DB load drops; 7, 5, 3, 2, 1!\n\n\"Okay,\" says the Sysadmin, \"let's try again.\" Now he looks at the graphs. ALL of the memcacheds are running! All of them are getting requests! This is great! They're all used!\n\nSo again, he takes keys that the Programmer uses and looks for them on his memcached servers. 'get this_key' 'get that_key' But each time he does this, he only finds each key on one memcached! Now WHY would you do this, he thinks? And he puzzles all night. That's silly! Don't you want the keys to be on all memcacheds?\n\n\"But wait\", he thinks \"I gave each memcached 1 gigabyte of memory, and that means, in total, I can cache three gigabytes of my database, instead of just ONE! Oh man, this is great,\" he thinks. \"This'll save me a ton of cash. Brad Fitzpatrick, I love your ass!\"\n\n\"But hmm, the next problem, and this one's a puzzler, this webserver right here, this one runing memcached it's old, it's sick and needs to be upgraded. But in order to do that I have to take it offline! What will happen to my poor memcache cluster? Eh, let's find out,\" he says, and he shuts down the box. Now he looks at his graphs. \"Oh noes, the DB load, it's gone up in stride! The load isn't one, it's now two. Hmm, but still tolerable. All of the other memcacheds are still getting traffic. This ain't so bad. Just a few cache misses, and I'm almost done with my work. So he turns the machine back on, and puts memcached back to work. After a few minutes, the DB load drops again back down to 1, where it should always be.\n\n\"The cache restored itself! I get it now. If it's not available it just means a few of my requests get missed. But it's not enough to kill me. That's pretty sweet.\"\n\nSo, the Programmer and Sysadmin continue to build websites. They continue to cache. When they have questions, they ask the mailing list or read the faq again. They watch their graphs. And all live happily ever after.\n\nAuthor: Dormando via IRC. Edited by Brian Moon for fun. Further fun editing by Emufarmers.\n","slug":"How-do-we-build-website-with-Memcache","published":1,"updated":"2018-01-07T22:28:37.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjc88rlgu000ea1jgriq2okmx","content":"<p>This article from <a href=\"https://github.com/memcached/memcached/wiki/TutorialCachingStory\" target=\"_blank\" rel=\"noopener\">Memcached Official Document</a> ,slightly modified and thanks for original author :</p>\n<p>We begin with A Story of Caching</p>\n<p>Two plucky adventurers, Programmer and Sysadmin, set out on a journey. Together they make websites. Websites with webservers and databases. Users from all over the Internet talk to the webservers and ask them to make pages for them. The webservers ask the databases for junk they need to make the pages. Programmer codes, Sysadmin adds webservers and database servers.</p>\n<p>One day the Sysadmin realizes that their database is sick! It’s spewing bile and red stuff all over! Sysadmin declares it has a fever, a load average of 20! Programmer asks Sysadmin, “well, what can we do?” Sysadmin says, “I heard about this great thing called memcached. It really helped livejournal!” “Okay, let’s try it!” says the Programmer.</p>\n<p>Our plucky Sysadmin eyes his webservers, of which he has six. He decides to use three of them to run the ‘memcached’ server. Sysadmin adds a gigabyte of ram to each webserver, and starts up memcached with a limit of 1 gigabyte each. So he has three memcached instances, each can hold up to 1 gigabyte of data. So the Programmer and the Sysadmin step back and behold their glorious memcached!</p>\n<p>“So now what?” they say, “it’s not DOING anything!” The memcacheds aren’t talking to anything and they certainly don’t have any data. And NOW their database has a load of 25!</p>\n<p>Our adventurous Programmer grabs the pecl/memcache client library manual, which the plucky Sysadmin has helpfully installed on all SIX webservers. “Never fear!” he says. “I’ve got an idea!” He takes the IP addresses and port numbers of the THREE memcacheds and adds them to an array in php.</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\">$MEMCACHE_SERVERS = <span class=\"keyword\">array</span>(</span><br><span class=\"line\">    <span class=\"string\">\"10.1.1.1\"</span>, <span class=\"comment\">//web1</span></span><br><span class=\"line\">    <span class=\"string\">\"10.1.1.2\"</span>, <span class=\"comment\">//web2</span></span><br><span class=\"line\">    <span class=\"string\">\"10.1.1.3\"</span>, <span class=\"comment\">//web3</span></span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<p>Then he makes an object, which he cleverly calls ‘$memcache’.</p>\n<p>$memcache = new Memcache();<br>foreach($MEMCACHE_SERVERS as $server){<br>    $memcache-&gt;addServer ( $server );<br>}<br>Now Programmer thinks. He thinks and thinks and thinks. “I know!” he says. “There’s this thing on the front page that runs SELECT * FROM hugetable WHERE timestamp &gt; lastweek ORDER BY timestamp ASC LIMIT 50000; and it takes five seconds!” “Let’s put it in memcached,” he says. So he wraps his code for the SELECT and uses his $memcache object. His code asks:</p>\n<p>Are the results of this select in memcache? If not, run the query, take the results, and PUT it in memcache! Like so:</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\">$huge_data_for_front_page = $memcache-&gt;get(<span class=\"string\">\"huge_data_for_front_page\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">if</span>($huge_data_for_front_page === <span class=\"keyword\">false</span>)&#123;</span><br><span class=\"line\">    $huge_data_for_front_page = <span class=\"keyword\">array</span>();</span><br><span class=\"line\">    $sql = <span class=\"string\">\"SELECT * FROM hugetable WHERE timestamp &gt; lastweek ORDER BY timestamp ASC LIMIT 50000\"</span>;</span><br><span class=\"line\">    $res = mysql_query($sql, $mysql_connection);</span><br><span class=\"line\">    <span class=\"keyword\">while</span>($rec = mysql_fetch_assoc($res))&#123;</span><br><span class=\"line\">        $huge_data_for_front_page[] = $rec;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// cache for 10 minutes</span></span><br><span class=\"line\">    $memcache-&gt;set(<span class=\"string\">\"huge_data_for_front_page\"</span>, $huge_data_for_front_page, <span class=\"number\">0</span>, <span class=\"number\">600</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// use $huge_data_for_front_page how you please</span></span><br></pre></td></tr></table></figure>\n<p>Programmer pushes code. Sysadmin sweats. BAM! DB load is down to 10! The website is pretty fast now. So now, the Sysadmin puzzles, “What the HELL just happened!?” “I put graphs on my memcacheds! I used cacti, and this is what I see! I see traffic to one memcached, but I made three :(.” So, the Sysadmin quickly learns the ascii protocol and telnets to port 11211 on each memcached and asks it:</p>\n<p>Hey, ‘get huge_data_for_front_page’ are you there?</p>\n<p>The first memcached does not answer…</p>\n<p>The second memcached does not answer…</p>\n<p>The third memcached, however, spits back a huge glob of crap into his telnet session! There’s the data! Only once memcached has the key that the Programmer cached!</p>\n<p>Puzzled, he asks on the mailing list. They all respond in unison, “It’s a distributed cache! That’s what it does!” But what does that mean? Still confused, and a little scared for his life, the Sysadmin asks the Programmer to cache a few more things. “Let’s see what happens. We’re curious folk. We can figure this one out,” says the Sysadmin.</p>\n<p>“Well, there is another query that is not slow, but is run 100 times per second. Maybe that would help,” says the Programmer. So he wraps that up like he did before. Sure enough, the server loads drops to 8!</p>\n<p>So the Programmer codes more and more things get cached. He uses new techniques. “I found them on the list and the faq! What nice blokes,” he says. The DB load drops; 7, 5, 3, 2, 1!</p>\n<p>“Okay,” says the Sysadmin, “let’s try again.” Now he looks at the graphs. ALL of the memcacheds are running! All of them are getting requests! This is great! They’re all used!</p>\n<p>So again, he takes keys that the Programmer uses and looks for them on his memcached servers. ‘get this_key’ ‘get that_key’ But each time he does this, he only finds each key on one memcached! Now WHY would you do this, he thinks? And he puzzles all night. That’s silly! Don’t you want the keys to be on all memcacheds?</p>\n<p>“But wait”, he thinks “I gave each memcached 1 gigabyte of memory, and that means, in total, I can cache three gigabytes of my database, instead of just ONE! Oh man, this is great,” he thinks. “This’ll save me a ton of cash. Brad Fitzpatrick, I love your ass!”</p>\n<p>“But hmm, the next problem, and this one’s a puzzler, this webserver right here, this one runing memcached it’s old, it’s sick and needs to be upgraded. But in order to do that I have to take it offline! What will happen to my poor memcache cluster? Eh, let’s find out,” he says, and he shuts down the box. Now he looks at his graphs. “Oh noes, the DB load, it’s gone up in stride! The load isn’t one, it’s now two. Hmm, but still tolerable. All of the other memcacheds are still getting traffic. This ain’t so bad. Just a few cache misses, and I’m almost done with my work. So he turns the machine back on, and puts memcached back to work. After a few minutes, the DB load drops again back down to 1, where it should always be.</p>\n<p>“The cache restored itself! I get it now. If it’s not available it just means a few of my requests get missed. But it’s not enough to kill me. That’s pretty sweet.”</p>\n<p>So, the Programmer and Sysadmin continue to build websites. They continue to cache. When they have questions, they ask the mailing list or read the faq again. They watch their graphs. And all live happily ever after.</p>\n<p>Author: Dormando via IRC. Edited by Brian Moon for fun. Further fun editing by Emufarmers.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>This article from <a href=\"https://github.com/memcached/memcached/wiki/TutorialCachingStory\" target=\"_blank\" rel=\"noopener\">Memcached Official Document</a> ,slightly modified and thanks for original author :</p>\n<p>We begin with A Story of Caching</p>\n<p>Two plucky adventurers, Programmer and Sysadmin, set out on a journey. Together they make websites. Websites with webservers and databases. Users from all over the Internet talk to the webservers and ask them to make pages for them. The webservers ask the databases for junk they need to make the pages. Programmer codes, Sysadmin adds webservers and database servers.</p>\n<p>One day the Sysadmin realizes that their database is sick! It’s spewing bile and red stuff all over! Sysadmin declares it has a fever, a load average of 20! Programmer asks Sysadmin, “well, what can we do?” Sysadmin says, “I heard about this great thing called memcached. It really helped livejournal!” “Okay, let’s try it!” says the Programmer.</p>\n<p>Our plucky Sysadmin eyes his webservers, of which he has six. He decides to use three of them to run the ‘memcached’ server. Sysadmin adds a gigabyte of ram to each webserver, and starts up memcached with a limit of 1 gigabyte each. So he has three memcached instances, each can hold up to 1 gigabyte of data. So the Programmer and the Sysadmin step back and behold their glorious memcached!</p>\n<p>“So now what?” they say, “it’s not DOING anything!” The memcacheds aren’t talking to anything and they certainly don’t have any data. And NOW their database has a load of 25!</p>\n<p>Our adventurous Programmer grabs the pecl/memcache client library manual, which the plucky Sysadmin has helpfully installed on all SIX webservers. “Never fear!” he says. “I’ve got an idea!” He takes the IP addresses and port numbers of the THREE memcacheds and adds them to an array in php.</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\">$MEMCACHE_SERVERS = <span class=\"keyword\">array</span>(</span><br><span class=\"line\">    <span class=\"string\">\"10.1.1.1\"</span>, <span class=\"comment\">//web1</span></span><br><span class=\"line\">    <span class=\"string\">\"10.1.1.2\"</span>, <span class=\"comment\">//web2</span></span><br><span class=\"line\">    <span class=\"string\">\"10.1.1.3\"</span>, <span class=\"comment\">//web3</span></span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<p>Then he makes an object, which he cleverly calls ‘$memcache’.</p>\n<p>$memcache = new Memcache();<br>foreach($MEMCACHE_SERVERS as $server){<br>    $memcache-&gt;addServer ( $server );<br>}<br>Now Programmer thinks. He thinks and thinks and thinks. “I know!” he says. “There’s this thing on the front page that runs SELECT * FROM hugetable WHERE timestamp &gt; lastweek ORDER BY timestamp ASC LIMIT 50000; and it takes five seconds!” “Let’s put it in memcached,” he says. So he wraps his code for the SELECT and uses his $memcache object. His code asks:</p>\n<p>Are the results of this select in memcache? If not, run the query, take the results, and PUT it in memcache! Like so:</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\">$huge_data_for_front_page = $memcache-&gt;get(<span class=\"string\">\"huge_data_for_front_page\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">if</span>($huge_data_for_front_page === <span class=\"keyword\">false</span>)&#123;</span><br><span class=\"line\">    $huge_data_for_front_page = <span class=\"keyword\">array</span>();</span><br><span class=\"line\">    $sql = <span class=\"string\">\"SELECT * FROM hugetable WHERE timestamp &gt; lastweek ORDER BY timestamp ASC LIMIT 50000\"</span>;</span><br><span class=\"line\">    $res = mysql_query($sql, $mysql_connection);</span><br><span class=\"line\">    <span class=\"keyword\">while</span>($rec = mysql_fetch_assoc($res))&#123;</span><br><span class=\"line\">        $huge_data_for_front_page[] = $rec;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// cache for 10 minutes</span></span><br><span class=\"line\">    $memcache-&gt;set(<span class=\"string\">\"huge_data_for_front_page\"</span>, $huge_data_for_front_page, <span class=\"number\">0</span>, <span class=\"number\">600</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// use $huge_data_for_front_page how you please</span></span><br></pre></td></tr></table></figure>\n<p>Programmer pushes code. Sysadmin sweats. BAM! DB load is down to 10! The website is pretty fast now. So now, the Sysadmin puzzles, “What the HELL just happened!?” “I put graphs on my memcacheds! I used cacti, and this is what I see! I see traffic to one memcached, but I made three :(.” So, the Sysadmin quickly learns the ascii protocol and telnets to port 11211 on each memcached and asks it:</p>\n<p>Hey, ‘get huge_data_for_front_page’ are you there?</p>\n<p>The first memcached does not answer…</p>\n<p>The second memcached does not answer…</p>\n<p>The third memcached, however, spits back a huge glob of crap into his telnet session! There’s the data! Only once memcached has the key that the Programmer cached!</p>\n<p>Puzzled, he asks on the mailing list. They all respond in unison, “It’s a distributed cache! That’s what it does!” But what does that mean? Still confused, and a little scared for his life, the Sysadmin asks the Programmer to cache a few more things. “Let’s see what happens. We’re curious folk. We can figure this one out,” says the Sysadmin.</p>\n<p>“Well, there is another query that is not slow, but is run 100 times per second. Maybe that would help,” says the Programmer. So he wraps that up like he did before. Sure enough, the server loads drops to 8!</p>\n<p>So the Programmer codes more and more things get cached. He uses new techniques. “I found them on the list and the faq! What nice blokes,” he says. The DB load drops; 7, 5, 3, 2, 1!</p>\n<p>“Okay,” says the Sysadmin, “let’s try again.” Now he looks at the graphs. ALL of the memcacheds are running! All of them are getting requests! This is great! They’re all used!</p>\n<p>So again, he takes keys that the Programmer uses and looks for them on his memcached servers. ‘get this_key’ ‘get that_key’ But each time he does this, he only finds each key on one memcached! Now WHY would you do this, he thinks? And he puzzles all night. That’s silly! Don’t you want the keys to be on all memcacheds?</p>\n<p>“But wait”, he thinks “I gave each memcached 1 gigabyte of memory, and that means, in total, I can cache three gigabytes of my database, instead of just ONE! Oh man, this is great,” he thinks. “This’ll save me a ton of cash. Brad Fitzpatrick, I love your ass!”</p>\n<p>“But hmm, the next problem, and this one’s a puzzler, this webserver right here, this one runing memcached it’s old, it’s sick and needs to be upgraded. But in order to do that I have to take it offline! What will happen to my poor memcache cluster? Eh, let’s find out,” he says, and he shuts down the box. Now he looks at his graphs. “Oh noes, the DB load, it’s gone up in stride! The load isn’t one, it’s now two. Hmm, but still tolerable. All of the other memcacheds are still getting traffic. This ain’t so bad. Just a few cache misses, and I’m almost done with my work. So he turns the machine back on, and puts memcached back to work. After a few minutes, the DB load drops again back down to 1, where it should always be.</p>\n<p>“The cache restored itself! I get it now. If it’s not available it just means a few of my requests get missed. But it’s not enough to kill me. That’s pretty sweet.”</p>\n<p>So, the Programmer and Sysadmin continue to build websites. They continue to cache. When they have questions, they ask the mailing list or read the faq again. They watch their graphs. And all live happily ever after.</p>\n<p>Author: Dormando via IRC. Edited by Brian Moon for fun. Further fun editing by Emufarmers.</p>\n"},{"layout":"keynote","title":"Less And Sass","subtitle":"Keynote: Less And Sass","iframe":null,"date":"2016-06-27T01:27:35.000Z","author":"","header-img":"post-bg-js-version.jpg","_content":"# Less与Sass解析\n\n  首先我们要明确一个观点，尽管Less和Sass语法上有一些共性，但是Less !== Sass。当我们构建一个网站的时候，\n我们可能会需要调色板这个功能，即拥有提供固定的可选择样式，避免样式跳跃过大。这个时候我们就用到了Less和Sass，\n事实证明，他们的功能要比这个多得多。\n\n### Less 和 Sass 语法共性\n\n1.混入（Minxins）—— class中的class\n2.参数混入 —— 可以传递参数的class\n3.嵌套规则 —— Class中嵌套class，从而较少重复的代码\n4.运算 —— CSS中用上数学\n5.颜色功能 —— 可编辑颜色\n6.命名空间（namespace） —— 分组样式\n7.作用域 —— 局部修改样式\n8.JavaScript赋值 - 在CSS中使用JavaScript表达式赋值\n\nLess和Sass的主要不同就是他们的实现方式，Less是基于JavaScript，所以是在客户端处理。而\nSass是基于Ruby在服务器端处理的。很多开发者不会选择Less因为JavaScript引擎需要额外的时\n间来处理代码然后输出修改过的CSS到浏览器。关于这个有很多种方式，我选择的是只在开发环节使用\nLESS，一旦我完成开发，就复制然后粘贴Less输出的到一个压缩器，然后到一个独立的CSS文件来替代\nLess文件。另外，我选择使用LESS.app来编译和压缩Less文件。两个选择都将最小化你的样式输出，\n从而避免由于用户的浏览器不支持JavaScript而可能引起的任何问题。\n\n# Less Is More\n\n## Sass 安装\n\n### 安装\n\n  如果已经安装好了Ruby，接着在命令行下输入\n\n  ```shell\n    gem install sass\n  ```\n\n### 使用\n\n  将Sass文件(.sass)转化为`css`代码\n\n  ```shell\n    sass test.scss\n  ```\n\n  如果要将显示结果保存成未见，后面再跟一个`.css`文件名\n\n  ```shell\n  sass test.scss test.css\n  ```\n\n  Sass 提供四个编译风格选项：\n\n  1.nested : 嵌套缩进的css代码，他是默认值\n  2.expanded : 没有缩进的、拓展css代码\n  3.compact : 简洁格式的css代码\n  4.compressed : 压缩后的css代码\n\n  在生产环境当中，一般使用最后一个选项\n\n  sass --style compressed test.sass test.css\n\n  也可以让sass监听某人文件或目录，一旦源文件有变化，就自动生成编译后的文件\n```shell\n  //watch a filter\n  sass --watch input.scss:output.css\n\n  //watch a directory\n  sass --watch app/sass:public/stylesheets\n\n```  \n## Less 安装\n\n在项目中引入less.js\n\n1.下载less.js\n2.创建一个文件来存放Less代码，如style.less\n3.添加以下代码到你的HTML的<head>中\n\n```HTML\n<link rel=\"stylesheet/less\" type=\"text/css\" href=\"styles.less\">\n<script src=\"less.js\" type=\"text/javascript\"></script>\n```\n\n其实也有一个[服务器端的less版本](http://lesscss.org/#-server-side-usage)，在服务器上安装Less的最简单的办法就是使用[Node Package](https://github.com/npm/npm)Messager (NPM 一看 就知道是基于NodeJS的)\n\n## 相同和不同\n\n\n### 变量\n    If you are developer,variables will be your best friend\n\n我们可以将能重复使用到的值（本案例里是color）设置成变量，这样就可以避免重复的定义，减少很大的工作量\n\n```less\n  @blue : #00c;\n  @light_blue : @blue + #333;\n  @dark_blue : @blue - 333;\n```\n\n他们看起来：\n[!less]:https://github.com/georgezouq/geoblog/raw/master/img/blue-gradient,jpg\n\n关于变量 Less和Sass的唯一区别就是 Less使用`@` 而 Sass 使用`$`.同时还有一些作用域上的差别，我们之后会提到\n\n### 混入(mixin)\n\n有些时候我们会创建一些在样式表中重复使用的样式规则，通常会使用\n```html\n  <div class=\"border article\"></div>\n```\n\n这种方式引用多种样式，但是有了less 我们可以\n\n```less\n.border{\n  border-top : 1px dotted #333;\n}\narticle.post{\n  background:#333;\n  .border;\n}\nul.menu{\n  background:#ccc;\n  .border;\n}\n\n```\n\n下面是在两个元素中分别添加`.border` 同样的效果，而且仅仅在样式变中就完成了\n\n[!less]:https://github.com/georgezouq/geoblog/raw/master/img/bordered-elements,jpg\n\n在Sass中，我们需要在样式规则前添加`@minxin`声明,然后通过`@include`来调用它\n\n```Sass\n  @mixin border {\n    border-top:1px dotted #333;\n  }\n  article.post {\n    background : #eee;\n    @include border;\n  }\n  ui.menu {\n    background:#ccc;\n    @include border;\n  }\n```\n\n### 参数混入\n\n使用Less或Sass，我们可以使用函数处理Css中多余的工作。最好的例子就是我们正在经历的从Css2到css3的过渡过程中很多浏览器的私有前缀。Nettuts+有一篇Jeffrey Way写的[文章](http://code.tutsplus.com/tutorials/quick-tip-never-type-a-vendor-prefix-again--net-17589)\n内容是包含参数的文件，他们可以附带大多数浏览器私有前缀Css3属性\n\n```Less\n.border-radius( @radius:3px ){\n  -webkit-border-radius : @radius;\n  -moz-border-radius : @radius;\n  border-radius : @radius;\n}\n```\n\nSess的语法很像Less，只是只用$声明变量，然后使用前面提到的`@minxin` 和 `@include`来调用\n\n### 选择器继承\n\n  Less并没有提供这个功能，通过这个功能，你可以讲一个选择器附加到已经预先定义的选择器上，而无需在使用逗号\n  将两者分开:\n\n```Sass\n.menu {\n  border:1px solid #ddd;\n}\n\n.footer {\n  @extend .menu;\n}\n\n/* 上面的写法等同于 */\n.menu,.footer {\n  border:1px solid #ddd;\n}\n```\n\n### 嵌套规则\n\n在Css中嵌套Class和ID是避免你的样式干扰或者被别的样式干扰的唯一方法，但这样会非常凌乱。使用一个类似于`#site-body.post.postheader h2`的选择器毫无吸引力，使用Less，你可以嵌套Id、class及标签:\n\n```Less\n#site-body{\n  .post {\n    .post-header {\n      h2 {\n\n      }\n      a {\n        &amp;:visited { ... }\n        &amp;:hover { ... }\n      }\n    }\n  }\n}\n```\n上面的代码最终和上面的例子（长长的选择器）的效果一样，但是更容易阅读和理解\n\n### 运算\n\n在css中使用数字或变量来实现数学之美\n\n```Less\n@base_margin: 10px;\n@double_margin: @base_margin * 2;\n@full_page: 960px;\n@half_page: @full_page / 2;\n@quarter_page: (@full_page / 2) / 2;\n\n```\n\nSass 在对数字的处理上更加专业，让已经可以换算单位了，Sass可以处理无法识别的度量单位并将其输出，这个特性明显是一个对未来的尝试 —— 证明W3C做出的一些改变\n\n```Sass\n/* Sass */\n2in + 3cm + 2pc = 3.514in\n\n/* Less */\n2in + 3cm + 2pc = ERROR!\n```\n\n### Color 函数\n\n在文章开头的时候我们提到了调色板，对此贡献最大的一部分就是颜色函数。加入你用一个标准的蓝色贯穿到你的样式中，然后你想在表单中用这个蓝色来做一个渐变的按钮。你可以打开PS或者其他编辑器来获取一个比蓝色浅的或者比较暗的HFX色值来作为渐变色，或者，你可以使用Less中的颜色函数\n\n```Less\n@blue: #369;\n\n.submit {\n  padding:5px 10px;\n  border:1px solid @blue;\n  background: -moz-linear-gradient(top, lighten(@blue, 10%), @blue 100%); /*Moz*/\n\tbackground: -webkit-gradient(linear, center top, center bottom, from(lighten(@blue, 10%)), color-stop(100%, @blue)); /*Webkit*/\n\tbackground: -o-linear-gradient(top, lighten(@blue, 10%) 0%, @blue 100%); /*Opera*/\n\tbackground: -ms-linear-gradient(top, lighten(@blue, 10%) 0%, @blue 100%); /*IE 10+*/\n\tbackground: linear-gradient(top, lighten(@blue, 10%) 0%, @blue 100%); /*W3C*/\n  color: #fff;\n  text-shadow: 0 -1px 1px rgba(0,0,0,0.4);\n}\n```\n\nlighten函数明显就是用百分比值来减轻颜色，在这个例子中，他将减轻这个基础的蓝色的10%。这种方法可以让我们变阿华的元素或者其他任何元素的颜色值 —— 只是简单的改变基础颜色而已，这对于主题（模板）来说非常有用。而且，如果你使用参数功能，像上面提到的，你还可以更简单的应用到一些浏览器的私有前缀的生命中，如：\n```Less\n.linear-gradient(lighten(@blue),@blue,100%)\n```\n\n最终效果的确很赞\n\n[!less]:https://github.com/georgezouq/geoblog/raw/master/img/091228yWj,jpg\n\nSass 貌似与更多的选项，如果你想了解更多，可以看一些[这篇很详细的介绍](http://nex-3.com/posts/89-powerful-color-manipulation-with-Sass)\n\n### 条件语句与控制\n\n这的确是一个很好用的功能，也是另一个Less不支持的功能，你可以使用if {} else {} 条件语句，for {} 循环。他甚至支持and、or和not，以及< , > , >= , <= 和 == 等操作符\n\n```Sass\n\n/* Sample Sass \"if\" statement */\n@if lightness($color) &gt; 30% {\n    backgroung-color: #000;\n} @else {\n    background-color: #fff;\n}\n/* Sample Sass \"for\" loop */\n@for $i from 1px to 10px {\n    .border-#{i} {\n        border: $i solid blue;\n    }\n}\n```\n\n### 命名空间\n\n命名空间可以有效的组织我们的Css，我们可以将一些公用的样式分组，然后在用的时候直接使用。例如，我们创建了一个名为default的样式分组，那我们就可以在用到的时候直接从该组中调用。\n\n```Less\n  .nav_list() {\n    list-style : none;\n    margin: 0;\n    padding: 0;\n  }\n  .button(){ ... }\n  .quote(){ ... }\n\n```\n\n然后，在我们的代码中，如果我们正好在一个nav元素中使用了ul元素，那么我们就会想到我们需要default的样式，然后我们就可以简单的调用它，他就会被直接使用\n\nnav ul {\n  #defaults &gt; .nav_list;\n}\n\n### 作用域\n\n作用域是编程中的标配，LESS中也是。如果你在你的样式表的root级声明一个变量，他在整个文档中都是可以使用的。然而，如果你在一个选择器，比如ID或者CLASS中，重新定义了这个变量，那么，他就只能在这个选择器中可用了。\n\n```Less\n@color: #00c; /* 蓝色 */\n#header {\n  @color: #c00; /* 红色 */\n  border: 1px solid @color; /* 红色边框 */\n}\n\n#footer {\n  border: 1px solid @color; /* 蓝色边框 */\n}\n```\n\n### 注释\n\n这一部分比较基础，Less允许两种注释的写法`//注释`和 `/* 注释 */`\n\n### 导入\n\n标准的`@import: 'classes.less' ` 如果你想要引入其他的LESS文件，那么文件的拓展名是可选的，所以@import 'classes' ;也是可行的。如果你想要导入一些无需less处理的内容，你可以使用.css后缀\n\n### 字符串插入\n\n字符串也是可以用于变量中的，然后通过 `@{name}` 来调用\n\n```Less\n@base_url: 'http://www.ddd.com'\nbackground-image: url(\"@{base_url}/images/background.png\");\n\n```\n\n### 转义(Escaping)\n\n我们通常需要引入一个css中非法或者less无法识别的值，通常一些IE的hack，要避免抛出异常并破坏Less，你需要避开他们\n\n```less\n.class{\n  filter: ~\"progid:DXImageTransform.Microsoft.Alpha(opacity=20)\";\n}\n/* 实际上将会输出下面的代码 */\n.class {\n  filter:progid:DXImageTransform.Microft.Alpha(opacity=20);\n}\n```\n### Javascript 赋值\n\n在样式表中使用Javascript：\n\n```less\n@string: `'howdy'.toUpperCase()`; /* @string 变成 HOWDY */\n\n/* 你也可以使用前面提到的值 */\n@string: 'howdy';\n@var: ~`'@{string}'.toUpperCase()`; /* 变为 HOWDY */\n\n/* 获取文档的信息 */\n@heigh = `document.body.clientHeight`;\n\n```\n\n### 输出格式\n\n然而Less并没有输出设置，而Sass中提供四种选项：nested，compact，compressed 和 expanded\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nhttp://blog.jobbole.com/24671/\n","source":"_posts/Less And Sass.markdown","raw":"---\nlayout:     keynote\ntitle:      \"Less And Sass\"\nsubtitle:   \"Keynote: Less And Sass\"\niframe:     \ndate:  2016-06-27 09:27:35\nauthor:     \"\"\nheader-img: \"post-bg-js-version.jpg\"\ntags:\n    - 前端开发\n    - CSS\n---\n# Less与Sass解析\n\n  首先我们要明确一个观点，尽管Less和Sass语法上有一些共性，但是Less !== Sass。当我们构建一个网站的时候，\n我们可能会需要调色板这个功能，即拥有提供固定的可选择样式，避免样式跳跃过大。这个时候我们就用到了Less和Sass，\n事实证明，他们的功能要比这个多得多。\n\n### Less 和 Sass 语法共性\n\n1.混入（Minxins）—— class中的class\n2.参数混入 —— 可以传递参数的class\n3.嵌套规则 —— Class中嵌套class，从而较少重复的代码\n4.运算 —— CSS中用上数学\n5.颜色功能 —— 可编辑颜色\n6.命名空间（namespace） —— 分组样式\n7.作用域 —— 局部修改样式\n8.JavaScript赋值 - 在CSS中使用JavaScript表达式赋值\n\nLess和Sass的主要不同就是他们的实现方式，Less是基于JavaScript，所以是在客户端处理。而\nSass是基于Ruby在服务器端处理的。很多开发者不会选择Less因为JavaScript引擎需要额外的时\n间来处理代码然后输出修改过的CSS到浏览器。关于这个有很多种方式，我选择的是只在开发环节使用\nLESS，一旦我完成开发，就复制然后粘贴Less输出的到一个压缩器，然后到一个独立的CSS文件来替代\nLess文件。另外，我选择使用LESS.app来编译和压缩Less文件。两个选择都将最小化你的样式输出，\n从而避免由于用户的浏览器不支持JavaScript而可能引起的任何问题。\n\n# Less Is More\n\n## Sass 安装\n\n### 安装\n\n  如果已经安装好了Ruby，接着在命令行下输入\n\n  ```shell\n    gem install sass\n  ```\n\n### 使用\n\n  将Sass文件(.sass)转化为`css`代码\n\n  ```shell\n    sass test.scss\n  ```\n\n  如果要将显示结果保存成未见，后面再跟一个`.css`文件名\n\n  ```shell\n  sass test.scss test.css\n  ```\n\n  Sass 提供四个编译风格选项：\n\n  1.nested : 嵌套缩进的css代码，他是默认值\n  2.expanded : 没有缩进的、拓展css代码\n  3.compact : 简洁格式的css代码\n  4.compressed : 压缩后的css代码\n\n  在生产环境当中，一般使用最后一个选项\n\n  sass --style compressed test.sass test.css\n\n  也可以让sass监听某人文件或目录，一旦源文件有变化，就自动生成编译后的文件\n```shell\n  //watch a filter\n  sass --watch input.scss:output.css\n\n  //watch a directory\n  sass --watch app/sass:public/stylesheets\n\n```  \n## Less 安装\n\n在项目中引入less.js\n\n1.下载less.js\n2.创建一个文件来存放Less代码，如style.less\n3.添加以下代码到你的HTML的<head>中\n\n```HTML\n<link rel=\"stylesheet/less\" type=\"text/css\" href=\"styles.less\">\n<script src=\"less.js\" type=\"text/javascript\"></script>\n```\n\n其实也有一个[服务器端的less版本](http://lesscss.org/#-server-side-usage)，在服务器上安装Less的最简单的办法就是使用[Node Package](https://github.com/npm/npm)Messager (NPM 一看 就知道是基于NodeJS的)\n\n## 相同和不同\n\n\n### 变量\n    If you are developer,variables will be your best friend\n\n我们可以将能重复使用到的值（本案例里是color）设置成变量，这样就可以避免重复的定义，减少很大的工作量\n\n```less\n  @blue : #00c;\n  @light_blue : @blue + #333;\n  @dark_blue : @blue - 333;\n```\n\n他们看起来：\n[!less]:https://github.com/georgezouq/geoblog/raw/master/img/blue-gradient,jpg\n\n关于变量 Less和Sass的唯一区别就是 Less使用`@` 而 Sass 使用`$`.同时还有一些作用域上的差别，我们之后会提到\n\n### 混入(mixin)\n\n有些时候我们会创建一些在样式表中重复使用的样式规则，通常会使用\n```html\n  <div class=\"border article\"></div>\n```\n\n这种方式引用多种样式，但是有了less 我们可以\n\n```less\n.border{\n  border-top : 1px dotted #333;\n}\narticle.post{\n  background:#333;\n  .border;\n}\nul.menu{\n  background:#ccc;\n  .border;\n}\n\n```\n\n下面是在两个元素中分别添加`.border` 同样的效果，而且仅仅在样式变中就完成了\n\n[!less]:https://github.com/georgezouq/geoblog/raw/master/img/bordered-elements,jpg\n\n在Sass中，我们需要在样式规则前添加`@minxin`声明,然后通过`@include`来调用它\n\n```Sass\n  @mixin border {\n    border-top:1px dotted #333;\n  }\n  article.post {\n    background : #eee;\n    @include border;\n  }\n  ui.menu {\n    background:#ccc;\n    @include border;\n  }\n```\n\n### 参数混入\n\n使用Less或Sass，我们可以使用函数处理Css中多余的工作。最好的例子就是我们正在经历的从Css2到css3的过渡过程中很多浏览器的私有前缀。Nettuts+有一篇Jeffrey Way写的[文章](http://code.tutsplus.com/tutorials/quick-tip-never-type-a-vendor-prefix-again--net-17589)\n内容是包含参数的文件，他们可以附带大多数浏览器私有前缀Css3属性\n\n```Less\n.border-radius( @radius:3px ){\n  -webkit-border-radius : @radius;\n  -moz-border-radius : @radius;\n  border-radius : @radius;\n}\n```\n\nSess的语法很像Less，只是只用$声明变量，然后使用前面提到的`@minxin` 和 `@include`来调用\n\n### 选择器继承\n\n  Less并没有提供这个功能，通过这个功能，你可以讲一个选择器附加到已经预先定义的选择器上，而无需在使用逗号\n  将两者分开:\n\n```Sass\n.menu {\n  border:1px solid #ddd;\n}\n\n.footer {\n  @extend .menu;\n}\n\n/* 上面的写法等同于 */\n.menu,.footer {\n  border:1px solid #ddd;\n}\n```\n\n### 嵌套规则\n\n在Css中嵌套Class和ID是避免你的样式干扰或者被别的样式干扰的唯一方法，但这样会非常凌乱。使用一个类似于`#site-body.post.postheader h2`的选择器毫无吸引力，使用Less，你可以嵌套Id、class及标签:\n\n```Less\n#site-body{\n  .post {\n    .post-header {\n      h2 {\n\n      }\n      a {\n        &amp;:visited { ... }\n        &amp;:hover { ... }\n      }\n    }\n  }\n}\n```\n上面的代码最终和上面的例子（长长的选择器）的效果一样，但是更容易阅读和理解\n\n### 运算\n\n在css中使用数字或变量来实现数学之美\n\n```Less\n@base_margin: 10px;\n@double_margin: @base_margin * 2;\n@full_page: 960px;\n@half_page: @full_page / 2;\n@quarter_page: (@full_page / 2) / 2;\n\n```\n\nSass 在对数字的处理上更加专业，让已经可以换算单位了，Sass可以处理无法识别的度量单位并将其输出，这个特性明显是一个对未来的尝试 —— 证明W3C做出的一些改变\n\n```Sass\n/* Sass */\n2in + 3cm + 2pc = 3.514in\n\n/* Less */\n2in + 3cm + 2pc = ERROR!\n```\n\n### Color 函数\n\n在文章开头的时候我们提到了调色板，对此贡献最大的一部分就是颜色函数。加入你用一个标准的蓝色贯穿到你的样式中，然后你想在表单中用这个蓝色来做一个渐变的按钮。你可以打开PS或者其他编辑器来获取一个比蓝色浅的或者比较暗的HFX色值来作为渐变色，或者，你可以使用Less中的颜色函数\n\n```Less\n@blue: #369;\n\n.submit {\n  padding:5px 10px;\n  border:1px solid @blue;\n  background: -moz-linear-gradient(top, lighten(@blue, 10%), @blue 100%); /*Moz*/\n\tbackground: -webkit-gradient(linear, center top, center bottom, from(lighten(@blue, 10%)), color-stop(100%, @blue)); /*Webkit*/\n\tbackground: -o-linear-gradient(top, lighten(@blue, 10%) 0%, @blue 100%); /*Opera*/\n\tbackground: -ms-linear-gradient(top, lighten(@blue, 10%) 0%, @blue 100%); /*IE 10+*/\n\tbackground: linear-gradient(top, lighten(@blue, 10%) 0%, @blue 100%); /*W3C*/\n  color: #fff;\n  text-shadow: 0 -1px 1px rgba(0,0,0,0.4);\n}\n```\n\nlighten函数明显就是用百分比值来减轻颜色，在这个例子中，他将减轻这个基础的蓝色的10%。这种方法可以让我们变阿华的元素或者其他任何元素的颜色值 —— 只是简单的改变基础颜色而已，这对于主题（模板）来说非常有用。而且，如果你使用参数功能，像上面提到的，你还可以更简单的应用到一些浏览器的私有前缀的生命中，如：\n```Less\n.linear-gradient(lighten(@blue),@blue,100%)\n```\n\n最终效果的确很赞\n\n[!less]:https://github.com/georgezouq/geoblog/raw/master/img/091228yWj,jpg\n\nSass 貌似与更多的选项，如果你想了解更多，可以看一些[这篇很详细的介绍](http://nex-3.com/posts/89-powerful-color-manipulation-with-Sass)\n\n### 条件语句与控制\n\n这的确是一个很好用的功能，也是另一个Less不支持的功能，你可以使用if {} else {} 条件语句，for {} 循环。他甚至支持and、or和not，以及< , > , >= , <= 和 == 等操作符\n\n```Sass\n\n/* Sample Sass \"if\" statement */\n@if lightness($color) &gt; 30% {\n    backgroung-color: #000;\n} @else {\n    background-color: #fff;\n}\n/* Sample Sass \"for\" loop */\n@for $i from 1px to 10px {\n    .border-#{i} {\n        border: $i solid blue;\n    }\n}\n```\n\n### 命名空间\n\n命名空间可以有效的组织我们的Css，我们可以将一些公用的样式分组，然后在用的时候直接使用。例如，我们创建了一个名为default的样式分组，那我们就可以在用到的时候直接从该组中调用。\n\n```Less\n  .nav_list() {\n    list-style : none;\n    margin: 0;\n    padding: 0;\n  }\n  .button(){ ... }\n  .quote(){ ... }\n\n```\n\n然后，在我们的代码中，如果我们正好在一个nav元素中使用了ul元素，那么我们就会想到我们需要default的样式，然后我们就可以简单的调用它，他就会被直接使用\n\nnav ul {\n  #defaults &gt; .nav_list;\n}\n\n### 作用域\n\n作用域是编程中的标配，LESS中也是。如果你在你的样式表的root级声明一个变量，他在整个文档中都是可以使用的。然而，如果你在一个选择器，比如ID或者CLASS中，重新定义了这个变量，那么，他就只能在这个选择器中可用了。\n\n```Less\n@color: #00c; /* 蓝色 */\n#header {\n  @color: #c00; /* 红色 */\n  border: 1px solid @color; /* 红色边框 */\n}\n\n#footer {\n  border: 1px solid @color; /* 蓝色边框 */\n}\n```\n\n### 注释\n\n这一部分比较基础，Less允许两种注释的写法`//注释`和 `/* 注释 */`\n\n### 导入\n\n标准的`@import: 'classes.less' ` 如果你想要引入其他的LESS文件，那么文件的拓展名是可选的，所以@import 'classes' ;也是可行的。如果你想要导入一些无需less处理的内容，你可以使用.css后缀\n\n### 字符串插入\n\n字符串也是可以用于变量中的，然后通过 `@{name}` 来调用\n\n```Less\n@base_url: 'http://www.ddd.com'\nbackground-image: url(\"@{base_url}/images/background.png\");\n\n```\n\n### 转义(Escaping)\n\n我们通常需要引入一个css中非法或者less无法识别的值，通常一些IE的hack，要避免抛出异常并破坏Less，你需要避开他们\n\n```less\n.class{\n  filter: ~\"progid:DXImageTransform.Microsoft.Alpha(opacity=20)\";\n}\n/* 实际上将会输出下面的代码 */\n.class {\n  filter:progid:DXImageTransform.Microft.Alpha(opacity=20);\n}\n```\n### Javascript 赋值\n\n在样式表中使用Javascript：\n\n```less\n@string: `'howdy'.toUpperCase()`; /* @string 变成 HOWDY */\n\n/* 你也可以使用前面提到的值 */\n@string: 'howdy';\n@var: ~`'@{string}'.toUpperCase()`; /* 变为 HOWDY */\n\n/* 获取文档的信息 */\n@heigh = `document.body.clientHeight`;\n\n```\n\n### 输出格式\n\n然而Less并没有输出设置，而Sass中提供四种选项：nested，compact，compressed 和 expanded\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nhttp://blog.jobbole.com/24671/\n","slug":"Less And Sass","published":1,"updated":"2018-01-07T22:28:37.000Z","comments":1,"photos":[],"link":"","_id":"cjc88rlgv000ga1jgj1w3rlfa","content":"<h1 id=\"Less与Sass解析\"><a href=\"#Less与Sass解析\" class=\"headerlink\" title=\"Less与Sass解析\"></a>Less与Sass解析</h1><p>  首先我们要明确一个观点，尽管Less和Sass语法上有一些共性，但是Less !== Sass。当我们构建一个网站的时候，<br>我们可能会需要调色板这个功能，即拥有提供固定的可选择样式，避免样式跳跃过大。这个时候我们就用到了Less和Sass，<br>事实证明，他们的功能要比这个多得多。</p>\n<h3 id=\"Less-和-Sass-语法共性\"><a href=\"#Less-和-Sass-语法共性\" class=\"headerlink\" title=\"Less 和 Sass 语法共性\"></a>Less 和 Sass 语法共性</h3><p>1.混入（Minxins）—— class中的class<br>2.参数混入 —— 可以传递参数的class<br>3.嵌套规则 —— Class中嵌套class，从而较少重复的代码<br>4.运算 —— CSS中用上数学<br>5.颜色功能 —— 可编辑颜色<br>6.命名空间（namespace） —— 分组样式<br>7.作用域 —— 局部修改样式<br>8.JavaScript赋值 - 在CSS中使用JavaScript表达式赋值</p>\n<p>Less和Sass的主要不同就是他们的实现方式，Less是基于JavaScript，所以是在客户端处理。而<br>Sass是基于Ruby在服务器端处理的。很多开发者不会选择Less因为JavaScript引擎需要额外的时<br>间来处理代码然后输出修改过的CSS到浏览器。关于这个有很多种方式，我选择的是只在开发环节使用<br>LESS，一旦我完成开发，就复制然后粘贴Less输出的到一个压缩器，然后到一个独立的CSS文件来替代<br>Less文件。另外，我选择使用LESS.app来编译和压缩Less文件。两个选择都将最小化你的样式输出，<br>从而避免由于用户的浏览器不支持JavaScript而可能引起的任何问题。</p>\n<h1 id=\"Less-Is-More\"><a href=\"#Less-Is-More\" class=\"headerlink\" title=\"Less Is More\"></a>Less Is More</h1><h2 id=\"Sass-安装\"><a href=\"#Sass-安装\" class=\"headerlink\" title=\"Sass 安装\"></a>Sass 安装</h2><h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><p>  如果已经安装好了Ruby，接着在命令行下输入</p>\n  <figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">gem install sass</span><br></pre></td></tr></table></figure>\n<h3 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h3><p>  将Sass文件(.sass)转化为<code>css</code>代码</p>\n  <figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">sass test.scss</span><br></pre></td></tr></table></figure>\n<p>  如果要将显示结果保存成未见，后面再跟一个<code>.css</code>文件名</p>\n  <figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">sass test.scss test.css</span><br></pre></td></tr></table></figure>\n<p>  Sass 提供四个编译风格选项：</p>\n<p>  1.nested : 嵌套缩进的css代码，他是默认值<br>  2.expanded : 没有缩进的、拓展css代码<br>  3.compact : 简洁格式的css代码<br>  4.compressed : 压缩后的css代码</p>\n<p>  在生产环境当中，一般使用最后一个选项</p>\n<p>  sass –style compressed test.sass test.css</p>\n<p>  也可以让sass监听某人文件或目录，一旦源文件有变化，就自动生成编译后的文件<br><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">  //watch a filter</span><br><span class=\"line\">  sass --watch input.scss:output.css</span><br><span class=\"line\"></span><br><span class=\"line\">  //watch a directory</span><br><span class=\"line\">  sass --watch app/sass:public/stylesheets</span><br><span class=\"line\"></span><br><span class=\"line\">```  </span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\"># Less 安装</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">在项目中引入less.js</span><br><span class=\"line\"></span><br><span class=\"line\">1.下载less.js</span><br><span class=\"line\">2.创建一个文件来存放Less代码，如style.less</span><br><span class=\"line\">3.添加以下代码到你的HTML的&lt;head&gt;中</span><br><span class=\"line\"></span><br><span class=\"line\">```HTML</span><br><span class=\"line\">&lt;link rel=\"stylesheet/less\" type=\"text/css\" href=\"styles.less\"&gt;</span><br><span class=\"line\">&lt;script src=\"less.js\" type=\"text/javascript\"&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure></p>\n<p>其实也有一个<a href=\"http://lesscss.org/#-server-side-usage\" target=\"_blank\" rel=\"noopener\">服务器端的less版本</a>，在服务器上安装Less的最简单的办法就是使用<a href=\"https://github.com/npm/npm\" target=\"_blank\" rel=\"noopener\">Node Package</a>Messager (NPM 一看 就知道是基于NodeJS的)</p>\n<h2 id=\"相同和不同\"><a href=\"#相同和不同\" class=\"headerlink\" title=\"相同和不同\"></a>相同和不同</h2><h3 id=\"变量\"><a href=\"#变量\" class=\"headerlink\" title=\"变量\"></a>变量</h3><pre><code>If you are developer,variables will be your best friend\n</code></pre><p>我们可以将能重复使用到的值（本案例里是color）设置成变量，这样就可以避免重复的定义，减少很大的工作量</p>\n<figure class=\"highlight less\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">@blue :</span> <span class=\"number\">#00c</span>;</span><br><span class=\"line\"><span class=\"variable\">@light_blue :</span> <span class=\"variable\">@blue</span> + <span class=\"number\">#333</span>;</span><br><span class=\"line\"><span class=\"variable\">@dark_blue :</span> <span class=\"variable\">@blue</span> - <span class=\"number\">333</span>;</span><br></pre></td></tr></table></figure>\n<p>他们看起来：</p>\n<p>关于变量 Less和Sass的唯一区别就是 Less使用<code>@</code> 而 Sass 使用<code>$</code>.同时还有一些作用域上的差别，我们之后会提到</p>\n<h3 id=\"混入-mixin\"><a href=\"#混入-mixin\" class=\"headerlink\" title=\"混入(mixin)\"></a>混入(mixin)</h3><p>有些时候我们会创建一些在样式表中重复使用的样式规则，通常会使用<br><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"border article\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>这种方式引用多种样式，但是有了less 我们可以</p>\n<figure class=\"highlight less\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.border</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">border-top </span>: <span class=\"number\">1px</span> dotted <span class=\"number\">#333</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">article</span><span class=\"selector-class\">.post</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>:<span class=\"number\">#333</span>;</span><br><span class=\"line\">  <span class=\"selector-class\">.border</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">ul</span><span class=\"selector-class\">.menu</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>:<span class=\"number\">#ccc</span>;</span><br><span class=\"line\">  <span class=\"selector-class\">.border</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>下面是在两个元素中分别添加<code>.border</code> 同样的效果，而且仅仅在样式变中就完成了</p>\n<p>在Sass中，我们需要在样式规则前添加<code>@minxin</code>声明,然后通过<code>@include</code>来调用它</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">@mixin border &#123;</span><br><span class=\"line\">  border-top:1px dotted #333;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">article.post &#123;</span><br><span class=\"line\">  background : #eee;</span><br><span class=\"line\">  @include border;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">ui.menu &#123;</span><br><span class=\"line\">  background:#ccc;</span><br><span class=\"line\">  @include border;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"参数混入\"><a href=\"#参数混入\" class=\"headerlink\" title=\"参数混入\"></a>参数混入</h3><p>使用Less或Sass，我们可以使用函数处理Css中多余的工作。最好的例子就是我们正在经历的从Css2到css3的过渡过程中很多浏览器的私有前缀。Nettuts+有一篇Jeffrey Way写的<a href=\"http://code.tutsplus.com/tutorials/quick-tip-never-type-a-vendor-prefix-again--net-17589\" target=\"_blank\" rel=\"noopener\">文章</a><br>内容是包含参数的文件，他们可以附带大多数浏览器私有前缀Css3属性</p>\n<figure class=\"highlight less\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.border-radius</span>( <span class=\"variable\">@radius</span>:<span class=\"number\">3px</span> )&#123;</span><br><span class=\"line\">  <span class=\"attribute\">-webkit-border-radius </span>: <span class=\"variable\">@radius</span>;</span><br><span class=\"line\">  <span class=\"attribute\">-moz-border-radius </span>: <span class=\"variable\">@radius</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border-radius </span>: <span class=\"variable\">@radius</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Sess的语法很像Less，只是只用$声明变量，然后使用前面提到的<code>@minxin</code> 和 <code>@include</code>来调用</p>\n<h3 id=\"选择器继承\"><a href=\"#选择器继承\" class=\"headerlink\" title=\"选择器继承\"></a>选择器继承</h3><p>  Less并没有提供这个功能，通过这个功能，你可以讲一个选择器附加到已经预先定义的选择器上，而无需在使用逗号<br>  将两者分开:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">.menu &#123;</span><br><span class=\"line\">  border:1px solid #ddd;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">.footer &#123;</span><br><span class=\"line\">  @extend .menu;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">/* 上面的写法等同于 */</span><br><span class=\"line\">.menu,.footer &#123;</span><br><span class=\"line\">  border:1px solid #ddd;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"嵌套规则\"><a href=\"#嵌套规则\" class=\"headerlink\" title=\"嵌套规则\"></a>嵌套规则</h3><p>在Css中嵌套Class和ID是避免你的样式干扰或者被别的样式干扰的唯一方法，但这样会非常凌乱。使用一个类似于<code>#site-body.post.postheader h2</code>的选择器毫无吸引力，使用Less，你可以嵌套Id、class及标签:</p>\n<figure class=\"highlight less\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-id\">#site-body</span>&#123;</span><br><span class=\"line\">  <span class=\"selector-class\">.post</span> &#123;</span><br><span class=\"line\">    <span class=\"selector-class\">.post-header</span> &#123;</span><br><span class=\"line\">      <span class=\"selector-tag\">h2</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"selector-tag\">a</span> &#123;</span><br><span class=\"line\">        <span class=\"selector-tag\">&amp;</span><span class=\"selector-tag\">amp</span>;<span class=\"selector-pseudo\">:visited</span> &#123; ... &#125;</span><br><span class=\"line\">        <span class=\"selector-tag\">&amp;</span><span class=\"selector-tag\">amp</span>;<span class=\"selector-pseudo\">:hover</span> &#123; ... &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面的代码最终和上面的例子（长长的选择器）的效果一样，但是更容易阅读和理解</p>\n<h3 id=\"运算\"><a href=\"#运算\" class=\"headerlink\" title=\"运算\"></a>运算</h3><p>在css中使用数字或变量来实现数学之美</p>\n<figure class=\"highlight less\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">@base_margin:</span> <span class=\"number\">10px</span>;</span><br><span class=\"line\"><span class=\"variable\">@double_margin:</span> <span class=\"variable\">@base_margin</span> * <span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"variable\">@full_page:</span> <span class=\"number\">960px</span>;</span><br><span class=\"line\"><span class=\"variable\">@half_page:</span> <span class=\"variable\">@full_page</span> / <span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"variable\">@quarter_page:</span> (<span class=\"variable\">@full_page</span> / <span class=\"number\">2</span>) / <span class=\"number\">2</span>;</span><br></pre></td></tr></table></figure>\n<p>Sass 在对数字的处理上更加专业，让已经可以换算单位了，Sass可以处理无法识别的度量单位并将其输出，这个特性明显是一个对未来的尝试 —— 证明W3C做出的一些改变</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">/* Sass */</span><br><span class=\"line\">2in + 3cm + 2pc = 3.514in</span><br><span class=\"line\"></span><br><span class=\"line\">/* Less */</span><br><span class=\"line\">2in + 3cm + 2pc = ERROR!</span><br></pre></td></tr></table></figure>\n<h3 id=\"Color-函数\"><a href=\"#Color-函数\" class=\"headerlink\" title=\"Color 函数\"></a>Color 函数</h3><p>在文章开头的时候我们提到了调色板，对此贡献最大的一部分就是颜色函数。加入你用一个标准的蓝色贯穿到你的样式中，然后你想在表单中用这个蓝色来做一个渐变的按钮。你可以打开PS或者其他编辑器来获取一个比蓝色浅的或者比较暗的HFX色值来作为渐变色，或者，你可以使用Less中的颜色函数</p>\n<figure class=\"highlight less\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">@blue:</span> <span class=\"number\">#369</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.submit</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">padding</span>:<span class=\"number\">5px</span> <span class=\"number\">10px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border</span>:<span class=\"number\">1px</span> solid <span class=\"variable\">@blue</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: -moz-linear-gradient(top, lighten(<span class=\"variable\">@blue</span>, <span class=\"number\">10%</span>), <span class=\"variable\">@blue</span> <span class=\"number\">100%</span>); <span class=\"comment\">/*Moz*/</span></span><br><span class=\"line\">\t<span class=\"attribute\">background</span>: -webkit-gradient(linear, center top, center bottom, from(lighten(<span class=\"variable\">@blue</span>, <span class=\"number\">10%</span>)), color-stop(<span class=\"number\">100%</span>, <span class=\"variable\">@blue</span>)); <span class=\"comment\">/*Webkit*/</span></span><br><span class=\"line\">\t<span class=\"attribute\">background</span>: -o-linear-gradient(top, lighten(<span class=\"variable\">@blue</span>, <span class=\"number\">10%</span>) <span class=\"number\">0%</span>, <span class=\"variable\">@blue</span> <span class=\"number\">100%</span>); <span class=\"comment\">/*Opera*/</span></span><br><span class=\"line\">\t<span class=\"attribute\">background</span>: -ms-linear-gradient(top, lighten(<span class=\"variable\">@blue</span>, <span class=\"number\">10%</span>) <span class=\"number\">0%</span>, <span class=\"variable\">@blue</span> <span class=\"number\">100%</span>); <span class=\"comment\">/*IE 10+*/</span></span><br><span class=\"line\">\t<span class=\"attribute\">background</span>: linear-gradient(top, lighten(<span class=\"variable\">@blue</span>, <span class=\"number\">10%</span>) <span class=\"number\">0%</span>, <span class=\"variable\">@blue</span> <span class=\"number\">100%</span>); <span class=\"comment\">/*W3C*/</span></span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#fff</span>;</span><br><span class=\"line\">  <span class=\"attribute\">text-shadow</span>: <span class=\"number\">0</span> -<span class=\"number\">1px</span> <span class=\"number\">1px</span> rgba(<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0.4</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>lighten函数明显就是用百分比值来减轻颜色，在这个例子中，他将减轻这个基础的蓝色的10%。这种方法可以让我们变阿华的元素或者其他任何元素的颜色值 —— 只是简单的改变基础颜色而已，这对于主题（模板）来说非常有用。而且，如果你使用参数功能，像上面提到的，你还可以更简单的应用到一些浏览器的私有前缀的生命中，如：<br><figure class=\"highlight less\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.linear-gradient</span>(lighten(<span class=\"variable\">@blue</span>),<span class=\"variable\">@blue</span>,<span class=\"number\">100%</span>)</span><br></pre></td></tr></table></figure></p>\n<p>最终效果的确很赞</p>\n<p>Sass 貌似与更多的选项，如果你想了解更多，可以看一些<a href=\"http://nex-3.com/posts/89-powerful-color-manipulation-with-Sass\" target=\"_blank\" rel=\"noopener\">这篇很详细的介绍</a></p>\n<h3 id=\"条件语句与控制\"><a href=\"#条件语句与控制\" class=\"headerlink\" title=\"条件语句与控制\"></a>条件语句与控制</h3><p>这的确是一个很好用的功能，也是另一个Less不支持的功能，你可以使用if {} else {} 条件语句，for {} 循环。他甚至支持and、or和not，以及&lt; , &gt; , &gt;= , &lt;= 和 == 等操作符</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">/* Sample Sass &quot;if&quot; statement */</span><br><span class=\"line\">@if lightness($color) &amp;gt; 30% &#123;</span><br><span class=\"line\">    backgroung-color: #000;</span><br><span class=\"line\">&#125; @else &#123;</span><br><span class=\"line\">    background-color: #fff;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">/* Sample Sass &quot;for&quot; loop */</span><br><span class=\"line\">@for $i from 1px to 10px &#123;</span><br><span class=\"line\">    .border-#&#123;i&#125; &#123;</span><br><span class=\"line\">        border: $i solid blue;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"命名空间\"><a href=\"#命名空间\" class=\"headerlink\" title=\"命名空间\"></a>命名空间</h3><p>命名空间可以有效的组织我们的Css，我们可以将一些公用的样式分组，然后在用的时候直接使用。例如，我们创建了一个名为default的样式分组，那我们就可以在用到的时候直接从该组中调用。</p>\n<figure class=\"highlight less\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.nav_list</span>() &#123;</span><br><span class=\"line\">  <span class=\"attribute\">list-style </span>: none;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">padding</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.button</span>()&#123; ... &#125;</span><br><span class=\"line\"><span class=\"selector-class\">.quote</span>()&#123; ... &#125;</span><br></pre></td></tr></table></figure>\n<p>然后，在我们的代码中，如果我们正好在一个nav元素中使用了ul元素，那么我们就会想到我们需要default的样式，然后我们就可以简单的调用它，他就会被直接使用</p>\n<p>nav ul {</p>\n<p>  #defaults &gt; .nav_list;<br>}</p>\n<h3 id=\"作用域\"><a href=\"#作用域\" class=\"headerlink\" title=\"作用域\"></a>作用域</h3><p>作用域是编程中的标配，LESS中也是。如果你在你的样式表的root级声明一个变量，他在整个文档中都是可以使用的。然而，如果你在一个选择器，比如ID或者CLASS中，重新定义了这个变量，那么，他就只能在这个选择器中可用了。</p>\n<figure class=\"highlight less\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">@color:</span> <span class=\"number\">#00c</span>; <span class=\"comment\">/* 蓝色 */</span></span><br><span class=\"line\"><span class=\"selector-id\">#header</span> &#123;</span><br><span class=\"line\">  <span class=\"variable\">@color:</span> <span class=\"number\">#c00</span>; <span class=\"comment\">/* 红色 */</span></span><br><span class=\"line\">  <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid <span class=\"variable\">@color</span>; <span class=\"comment\">/* 红色边框 */</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-id\">#footer</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid <span class=\"variable\">@color</span>; <span class=\"comment\">/* 蓝色边框 */</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"注释\"><a href=\"#注释\" class=\"headerlink\" title=\"注释\"></a>注释</h3><p>这一部分比较基础，Less允许两种注释的写法<code>//注释</code>和 <code>/* 注释 */</code></p>\n<h3 id=\"导入\"><a href=\"#导入\" class=\"headerlink\" title=\"导入\"></a>导入</h3><p>标准的<code>@import: &#39;classes.less&#39;</code> 如果你想要引入其他的LESS文件，那么文件的拓展名是可选的，所以@import ‘classes’ ;也是可行的。如果你想要导入一些无需less处理的内容，你可以使用.css后缀</p>\n<h3 id=\"字符串插入\"><a href=\"#字符串插入\" class=\"headerlink\" title=\"字符串插入\"></a>字符串插入</h3><p>字符串也是可以用于变量中的，然后通过 <code>@{name}</code> 来调用</p>\n<figure class=\"highlight less\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">@base_url:</span> <span class=\"string\">'http://www.ddd.com'</span></span><br><span class=\"line\"><span class=\"attribute\">background-image</span>: url(<span class=\"string\">\"@&#123;base_url&#125;/images/background.png\"</span>);</span><br></pre></td></tr></table></figure>\n<h3 id=\"转义-Escaping\"><a href=\"#转义-Escaping\" class=\"headerlink\" title=\"转义(Escaping)\"></a>转义(Escaping)</h3><p>我们通常需要引入一个css中非法或者less无法识别的值，通常一些IE的hack，要避免抛出异常并破坏Less，你需要避开他们</p>\n<figure class=\"highlight less\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.class</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">filter</span>: <span class=\"string\">~\"progid:DXImageTransform.Microsoft.Alpha(opacity=20)\"</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/* 实际上将会输出下面的代码 */</span></span><br><span class=\"line\"><span class=\"selector-class\">.class</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">filter</span>:<span class=\"attribute\">progid</span>:DXImageTransform.Microft.Alpha(opacity=<span class=\"number\">20</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Javascript-赋值\"><a href=\"#Javascript-赋值\" class=\"headerlink\" title=\"Javascript 赋值\"></a>Javascript 赋值</h3><p>在样式表中使用Javascript：</p>\n<figure class=\"highlight less\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">@string:</span> <span class=\"built_in\">`'howdy'.toUpperCase()`</span>; <span class=\"comment\">/* @string 变成 HOWDY */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 你也可以使用前面提到的值 */</span></span><br><span class=\"line\"><span class=\"variable\">@string:</span> <span class=\"string\">'howdy'</span>;</span><br><span class=\"line\"><span class=\"variable\">@var:</span> <span class=\"built_in\">~`'@&#123;string&#125;'.toUpperCase()`</span>; <span class=\"comment\">/* 变为 HOWDY */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 获取文档的信息 */</span></span><br><span class=\"line\"><span class=\"variable\">@heigh</span> = <span class=\"built_in\">`document.body.clientHeight`</span>;</span><br></pre></td></tr></table></figure>\n<h3 id=\"输出格式\"><a href=\"#输出格式\" class=\"headerlink\" title=\"输出格式\"></a>输出格式</h3><p>然而Less并没有输出设置，而Sass中提供四种选项：nested，compact，compressed 和 expanded</p>\n<p><a href=\"http://blog.jobbole.com/24671/\" target=\"_blank\" rel=\"noopener\">http://blog.jobbole.com/24671/</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Less与Sass解析\"><a href=\"#Less与Sass解析\" class=\"headerlink\" title=\"Less与Sass解析\"></a>Less与Sass解析</h1><p>  首先我们要明确一个观点，尽管Less和Sass语法上有一些共性，但是Less !== Sass。当我们构建一个网站的时候，<br>我们可能会需要调色板这个功能，即拥有提供固定的可选择样式，避免样式跳跃过大。这个时候我们就用到了Less和Sass，<br>事实证明，他们的功能要比这个多得多。</p>\n<h3 id=\"Less-和-Sass-语法共性\"><a href=\"#Less-和-Sass-语法共性\" class=\"headerlink\" title=\"Less 和 Sass 语法共性\"></a>Less 和 Sass 语法共性</h3><p>1.混入（Minxins）—— class中的class<br>2.参数混入 —— 可以传递参数的class<br>3.嵌套规则 —— Class中嵌套class，从而较少重复的代码<br>4.运算 —— CSS中用上数学<br>5.颜色功能 —— 可编辑颜色<br>6.命名空间（namespace） —— 分组样式<br>7.作用域 —— 局部修改样式<br>8.JavaScript赋值 - 在CSS中使用JavaScript表达式赋值</p>\n<p>Less和Sass的主要不同就是他们的实现方式，Less是基于JavaScript，所以是在客户端处理。而<br>Sass是基于Ruby在服务器端处理的。很多开发者不会选择Less因为JavaScript引擎需要额外的时<br>间来处理代码然后输出修改过的CSS到浏览器。关于这个有很多种方式，我选择的是只在开发环节使用<br>LESS，一旦我完成开发，就复制然后粘贴Less输出的到一个压缩器，然后到一个独立的CSS文件来替代<br>Less文件。另外，我选择使用LESS.app来编译和压缩Less文件。两个选择都将最小化你的样式输出，<br>从而避免由于用户的浏览器不支持JavaScript而可能引起的任何问题。</p>\n<h1 id=\"Less-Is-More\"><a href=\"#Less-Is-More\" class=\"headerlink\" title=\"Less Is More\"></a>Less Is More</h1><h2 id=\"Sass-安装\"><a href=\"#Sass-安装\" class=\"headerlink\" title=\"Sass 安装\"></a>Sass 安装</h2><h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><p>  如果已经安装好了Ruby，接着在命令行下输入</p>\n  <figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">gem install sass</span><br></pre></td></tr></table></figure>\n<h3 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h3><p>  将Sass文件(.sass)转化为<code>css</code>代码</p>\n  <figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">sass test.scss</span><br></pre></td></tr></table></figure>\n<p>  如果要将显示结果保存成未见，后面再跟一个<code>.css</code>文件名</p>\n  <figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">sass test.scss test.css</span><br></pre></td></tr></table></figure>\n<p>  Sass 提供四个编译风格选项：</p>\n<p>  1.nested : 嵌套缩进的css代码，他是默认值<br>  2.expanded : 没有缩进的、拓展css代码<br>  3.compact : 简洁格式的css代码<br>  4.compressed : 压缩后的css代码</p>\n<p>  在生产环境当中，一般使用最后一个选项</p>\n<p>  sass –style compressed test.sass test.css</p>\n<p>  也可以让sass监听某人文件或目录，一旦源文件有变化，就自动生成编译后的文件<br><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">  //watch a filter</span><br><span class=\"line\">  sass --watch input.scss:output.css</span><br><span class=\"line\"></span><br><span class=\"line\">  //watch a directory</span><br><span class=\"line\">  sass --watch app/sass:public/stylesheets</span><br><span class=\"line\"></span><br><span class=\"line\">```  </span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\"># Less 安装</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">在项目中引入less.js</span><br><span class=\"line\"></span><br><span class=\"line\">1.下载less.js</span><br><span class=\"line\">2.创建一个文件来存放Less代码，如style.less</span><br><span class=\"line\">3.添加以下代码到你的HTML的&lt;head&gt;中</span><br><span class=\"line\"></span><br><span class=\"line\">```HTML</span><br><span class=\"line\">&lt;link rel=\"stylesheet/less\" type=\"text/css\" href=\"styles.less\"&gt;</span><br><span class=\"line\">&lt;script src=\"less.js\" type=\"text/javascript\"&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure></p>\n<p>其实也有一个<a href=\"http://lesscss.org/#-server-side-usage\" target=\"_blank\" rel=\"noopener\">服务器端的less版本</a>，在服务器上安装Less的最简单的办法就是使用<a href=\"https://github.com/npm/npm\" target=\"_blank\" rel=\"noopener\">Node Package</a>Messager (NPM 一看 就知道是基于NodeJS的)</p>\n<h2 id=\"相同和不同\"><a href=\"#相同和不同\" class=\"headerlink\" title=\"相同和不同\"></a>相同和不同</h2><h3 id=\"变量\"><a href=\"#变量\" class=\"headerlink\" title=\"变量\"></a>变量</h3><pre><code>If you are developer,variables will be your best friend\n</code></pre><p>我们可以将能重复使用到的值（本案例里是color）设置成变量，这样就可以避免重复的定义，减少很大的工作量</p>\n<figure class=\"highlight less\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">@blue :</span> <span class=\"number\">#00c</span>;</span><br><span class=\"line\"><span class=\"variable\">@light_blue :</span> <span class=\"variable\">@blue</span> + <span class=\"number\">#333</span>;</span><br><span class=\"line\"><span class=\"variable\">@dark_blue :</span> <span class=\"variable\">@blue</span> - <span class=\"number\">333</span>;</span><br></pre></td></tr></table></figure>\n<p>他们看起来：</p>\n<p>关于变量 Less和Sass的唯一区别就是 Less使用<code>@</code> 而 Sass 使用<code>$</code>.同时还有一些作用域上的差别，我们之后会提到</p>\n<h3 id=\"混入-mixin\"><a href=\"#混入-mixin\" class=\"headerlink\" title=\"混入(mixin)\"></a>混入(mixin)</h3><p>有些时候我们会创建一些在样式表中重复使用的样式规则，通常会使用<br><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"border article\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>这种方式引用多种样式，但是有了less 我们可以</p>\n<figure class=\"highlight less\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.border</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">border-top </span>: <span class=\"number\">1px</span> dotted <span class=\"number\">#333</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">article</span><span class=\"selector-class\">.post</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>:<span class=\"number\">#333</span>;</span><br><span class=\"line\">  <span class=\"selector-class\">.border</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">ul</span><span class=\"selector-class\">.menu</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>:<span class=\"number\">#ccc</span>;</span><br><span class=\"line\">  <span class=\"selector-class\">.border</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>下面是在两个元素中分别添加<code>.border</code> 同样的效果，而且仅仅在样式变中就完成了</p>\n<p>在Sass中，我们需要在样式规则前添加<code>@minxin</code>声明,然后通过<code>@include</code>来调用它</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">@mixin border &#123;</span><br><span class=\"line\">  border-top:1px dotted #333;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">article.post &#123;</span><br><span class=\"line\">  background : #eee;</span><br><span class=\"line\">  @include border;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">ui.menu &#123;</span><br><span class=\"line\">  background:#ccc;</span><br><span class=\"line\">  @include border;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"参数混入\"><a href=\"#参数混入\" class=\"headerlink\" title=\"参数混入\"></a>参数混入</h3><p>使用Less或Sass，我们可以使用函数处理Css中多余的工作。最好的例子就是我们正在经历的从Css2到css3的过渡过程中很多浏览器的私有前缀。Nettuts+有一篇Jeffrey Way写的<a href=\"http://code.tutsplus.com/tutorials/quick-tip-never-type-a-vendor-prefix-again--net-17589\" target=\"_blank\" rel=\"noopener\">文章</a><br>内容是包含参数的文件，他们可以附带大多数浏览器私有前缀Css3属性</p>\n<figure class=\"highlight less\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.border-radius</span>( <span class=\"variable\">@radius</span>:<span class=\"number\">3px</span> )&#123;</span><br><span class=\"line\">  <span class=\"attribute\">-webkit-border-radius </span>: <span class=\"variable\">@radius</span>;</span><br><span class=\"line\">  <span class=\"attribute\">-moz-border-radius </span>: <span class=\"variable\">@radius</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border-radius </span>: <span class=\"variable\">@radius</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Sess的语法很像Less，只是只用$声明变量，然后使用前面提到的<code>@minxin</code> 和 <code>@include</code>来调用</p>\n<h3 id=\"选择器继承\"><a href=\"#选择器继承\" class=\"headerlink\" title=\"选择器继承\"></a>选择器继承</h3><p>  Less并没有提供这个功能，通过这个功能，你可以讲一个选择器附加到已经预先定义的选择器上，而无需在使用逗号<br>  将两者分开:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">.menu &#123;</span><br><span class=\"line\">  border:1px solid #ddd;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">.footer &#123;</span><br><span class=\"line\">  @extend .menu;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">/* 上面的写法等同于 */</span><br><span class=\"line\">.menu,.footer &#123;</span><br><span class=\"line\">  border:1px solid #ddd;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"嵌套规则\"><a href=\"#嵌套规则\" class=\"headerlink\" title=\"嵌套规则\"></a>嵌套规则</h3><p>在Css中嵌套Class和ID是避免你的样式干扰或者被别的样式干扰的唯一方法，但这样会非常凌乱。使用一个类似于<code>#site-body.post.postheader h2</code>的选择器毫无吸引力，使用Less，你可以嵌套Id、class及标签:</p>\n<figure class=\"highlight less\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-id\">#site-body</span>&#123;</span><br><span class=\"line\">  <span class=\"selector-class\">.post</span> &#123;</span><br><span class=\"line\">    <span class=\"selector-class\">.post-header</span> &#123;</span><br><span class=\"line\">      <span class=\"selector-tag\">h2</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"selector-tag\">a</span> &#123;</span><br><span class=\"line\">        <span class=\"selector-tag\">&amp;</span><span class=\"selector-tag\">amp</span>;<span class=\"selector-pseudo\">:visited</span> &#123; ... &#125;</span><br><span class=\"line\">        <span class=\"selector-tag\">&amp;</span><span class=\"selector-tag\">amp</span>;<span class=\"selector-pseudo\">:hover</span> &#123; ... &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面的代码最终和上面的例子（长长的选择器）的效果一样，但是更容易阅读和理解</p>\n<h3 id=\"运算\"><a href=\"#运算\" class=\"headerlink\" title=\"运算\"></a>运算</h3><p>在css中使用数字或变量来实现数学之美</p>\n<figure class=\"highlight less\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">@base_margin:</span> <span class=\"number\">10px</span>;</span><br><span class=\"line\"><span class=\"variable\">@double_margin:</span> <span class=\"variable\">@base_margin</span> * <span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"variable\">@full_page:</span> <span class=\"number\">960px</span>;</span><br><span class=\"line\"><span class=\"variable\">@half_page:</span> <span class=\"variable\">@full_page</span> / <span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"variable\">@quarter_page:</span> (<span class=\"variable\">@full_page</span> / <span class=\"number\">2</span>) / <span class=\"number\">2</span>;</span><br></pre></td></tr></table></figure>\n<p>Sass 在对数字的处理上更加专业，让已经可以换算单位了，Sass可以处理无法识别的度量单位并将其输出，这个特性明显是一个对未来的尝试 —— 证明W3C做出的一些改变</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">/* Sass */</span><br><span class=\"line\">2in + 3cm + 2pc = 3.514in</span><br><span class=\"line\"></span><br><span class=\"line\">/* Less */</span><br><span class=\"line\">2in + 3cm + 2pc = ERROR!</span><br></pre></td></tr></table></figure>\n<h3 id=\"Color-函数\"><a href=\"#Color-函数\" class=\"headerlink\" title=\"Color 函数\"></a>Color 函数</h3><p>在文章开头的时候我们提到了调色板，对此贡献最大的一部分就是颜色函数。加入你用一个标准的蓝色贯穿到你的样式中，然后你想在表单中用这个蓝色来做一个渐变的按钮。你可以打开PS或者其他编辑器来获取一个比蓝色浅的或者比较暗的HFX色值来作为渐变色，或者，你可以使用Less中的颜色函数</p>\n<figure class=\"highlight less\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">@blue:</span> <span class=\"number\">#369</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.submit</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">padding</span>:<span class=\"number\">5px</span> <span class=\"number\">10px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border</span>:<span class=\"number\">1px</span> solid <span class=\"variable\">@blue</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: -moz-linear-gradient(top, lighten(<span class=\"variable\">@blue</span>, <span class=\"number\">10%</span>), <span class=\"variable\">@blue</span> <span class=\"number\">100%</span>); <span class=\"comment\">/*Moz*/</span></span><br><span class=\"line\">\t<span class=\"attribute\">background</span>: -webkit-gradient(linear, center top, center bottom, from(lighten(<span class=\"variable\">@blue</span>, <span class=\"number\">10%</span>)), color-stop(<span class=\"number\">100%</span>, <span class=\"variable\">@blue</span>)); <span class=\"comment\">/*Webkit*/</span></span><br><span class=\"line\">\t<span class=\"attribute\">background</span>: -o-linear-gradient(top, lighten(<span class=\"variable\">@blue</span>, <span class=\"number\">10%</span>) <span class=\"number\">0%</span>, <span class=\"variable\">@blue</span> <span class=\"number\">100%</span>); <span class=\"comment\">/*Opera*/</span></span><br><span class=\"line\">\t<span class=\"attribute\">background</span>: -ms-linear-gradient(top, lighten(<span class=\"variable\">@blue</span>, <span class=\"number\">10%</span>) <span class=\"number\">0%</span>, <span class=\"variable\">@blue</span> <span class=\"number\">100%</span>); <span class=\"comment\">/*IE 10+*/</span></span><br><span class=\"line\">\t<span class=\"attribute\">background</span>: linear-gradient(top, lighten(<span class=\"variable\">@blue</span>, <span class=\"number\">10%</span>) <span class=\"number\">0%</span>, <span class=\"variable\">@blue</span> <span class=\"number\">100%</span>); <span class=\"comment\">/*W3C*/</span></span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#fff</span>;</span><br><span class=\"line\">  <span class=\"attribute\">text-shadow</span>: <span class=\"number\">0</span> -<span class=\"number\">1px</span> <span class=\"number\">1px</span> rgba(<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0.4</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>lighten函数明显就是用百分比值来减轻颜色，在这个例子中，他将减轻这个基础的蓝色的10%。这种方法可以让我们变阿华的元素或者其他任何元素的颜色值 —— 只是简单的改变基础颜色而已，这对于主题（模板）来说非常有用。而且，如果你使用参数功能，像上面提到的，你还可以更简单的应用到一些浏览器的私有前缀的生命中，如：<br><figure class=\"highlight less\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.linear-gradient</span>(lighten(<span class=\"variable\">@blue</span>),<span class=\"variable\">@blue</span>,<span class=\"number\">100%</span>)</span><br></pre></td></tr></table></figure></p>\n<p>最终效果的确很赞</p>\n<p>Sass 貌似与更多的选项，如果你想了解更多，可以看一些<a href=\"http://nex-3.com/posts/89-powerful-color-manipulation-with-Sass\" target=\"_blank\" rel=\"noopener\">这篇很详细的介绍</a></p>\n<h3 id=\"条件语句与控制\"><a href=\"#条件语句与控制\" class=\"headerlink\" title=\"条件语句与控制\"></a>条件语句与控制</h3><p>这的确是一个很好用的功能，也是另一个Less不支持的功能，你可以使用if {} else {} 条件语句，for {} 循环。他甚至支持and、or和not，以及&lt; , &gt; , &gt;= , &lt;= 和 == 等操作符</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">/* Sample Sass &quot;if&quot; statement */</span><br><span class=\"line\">@if lightness($color) &amp;gt; 30% &#123;</span><br><span class=\"line\">    backgroung-color: #000;</span><br><span class=\"line\">&#125; @else &#123;</span><br><span class=\"line\">    background-color: #fff;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">/* Sample Sass &quot;for&quot; loop */</span><br><span class=\"line\">@for $i from 1px to 10px &#123;</span><br><span class=\"line\">    .border-#&#123;i&#125; &#123;</span><br><span class=\"line\">        border: $i solid blue;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"命名空间\"><a href=\"#命名空间\" class=\"headerlink\" title=\"命名空间\"></a>命名空间</h3><p>命名空间可以有效的组织我们的Css，我们可以将一些公用的样式分组，然后在用的时候直接使用。例如，我们创建了一个名为default的样式分组，那我们就可以在用到的时候直接从该组中调用。</p>\n<figure class=\"highlight less\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.nav_list</span>() &#123;</span><br><span class=\"line\">  <span class=\"attribute\">list-style </span>: none;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">padding</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.button</span>()&#123; ... &#125;</span><br><span class=\"line\"><span class=\"selector-class\">.quote</span>()&#123; ... &#125;</span><br></pre></td></tr></table></figure>\n<p>然后，在我们的代码中，如果我们正好在一个nav元素中使用了ul元素，那么我们就会想到我们需要default的样式，然后我们就可以简单的调用它，他就会被直接使用</p>\n<p>nav ul {</p>\n<p>  #defaults &gt; .nav_list;<br>}</p>\n<h3 id=\"作用域\"><a href=\"#作用域\" class=\"headerlink\" title=\"作用域\"></a>作用域</h3><p>作用域是编程中的标配，LESS中也是。如果你在你的样式表的root级声明一个变量，他在整个文档中都是可以使用的。然而，如果你在一个选择器，比如ID或者CLASS中，重新定义了这个变量，那么，他就只能在这个选择器中可用了。</p>\n<figure class=\"highlight less\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">@color:</span> <span class=\"number\">#00c</span>; <span class=\"comment\">/* 蓝色 */</span></span><br><span class=\"line\"><span class=\"selector-id\">#header</span> &#123;</span><br><span class=\"line\">  <span class=\"variable\">@color:</span> <span class=\"number\">#c00</span>; <span class=\"comment\">/* 红色 */</span></span><br><span class=\"line\">  <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid <span class=\"variable\">@color</span>; <span class=\"comment\">/* 红色边框 */</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-id\">#footer</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid <span class=\"variable\">@color</span>; <span class=\"comment\">/* 蓝色边框 */</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"注释\"><a href=\"#注释\" class=\"headerlink\" title=\"注释\"></a>注释</h3><p>这一部分比较基础，Less允许两种注释的写法<code>//注释</code>和 <code>/* 注释 */</code></p>\n<h3 id=\"导入\"><a href=\"#导入\" class=\"headerlink\" title=\"导入\"></a>导入</h3><p>标准的<code>@import: &#39;classes.less&#39;</code> 如果你想要引入其他的LESS文件，那么文件的拓展名是可选的，所以@import ‘classes’ ;也是可行的。如果你想要导入一些无需less处理的内容，你可以使用.css后缀</p>\n<h3 id=\"字符串插入\"><a href=\"#字符串插入\" class=\"headerlink\" title=\"字符串插入\"></a>字符串插入</h3><p>字符串也是可以用于变量中的，然后通过 <code>@{name}</code> 来调用</p>\n<figure class=\"highlight less\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">@base_url:</span> <span class=\"string\">'http://www.ddd.com'</span></span><br><span class=\"line\"><span class=\"attribute\">background-image</span>: url(<span class=\"string\">\"@&#123;base_url&#125;/images/background.png\"</span>);</span><br></pre></td></tr></table></figure>\n<h3 id=\"转义-Escaping\"><a href=\"#转义-Escaping\" class=\"headerlink\" title=\"转义(Escaping)\"></a>转义(Escaping)</h3><p>我们通常需要引入一个css中非法或者less无法识别的值，通常一些IE的hack，要避免抛出异常并破坏Less，你需要避开他们</p>\n<figure class=\"highlight less\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.class</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">filter</span>: <span class=\"string\">~\"progid:DXImageTransform.Microsoft.Alpha(opacity=20)\"</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/* 实际上将会输出下面的代码 */</span></span><br><span class=\"line\"><span class=\"selector-class\">.class</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">filter</span>:<span class=\"attribute\">progid</span>:DXImageTransform.Microft.Alpha(opacity=<span class=\"number\">20</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Javascript-赋值\"><a href=\"#Javascript-赋值\" class=\"headerlink\" title=\"Javascript 赋值\"></a>Javascript 赋值</h3><p>在样式表中使用Javascript：</p>\n<figure class=\"highlight less\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">@string:</span> <span class=\"built_in\">`'howdy'.toUpperCase()`</span>; <span class=\"comment\">/* @string 变成 HOWDY */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 你也可以使用前面提到的值 */</span></span><br><span class=\"line\"><span class=\"variable\">@string:</span> <span class=\"string\">'howdy'</span>;</span><br><span class=\"line\"><span class=\"variable\">@var:</span> <span class=\"built_in\">~`'@&#123;string&#125;'.toUpperCase()`</span>; <span class=\"comment\">/* 变为 HOWDY */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 获取文档的信息 */</span></span><br><span class=\"line\"><span class=\"variable\">@heigh</span> = <span class=\"built_in\">`document.body.clientHeight`</span>;</span><br></pre></td></tr></table></figure>\n<h3 id=\"输出格式\"><a href=\"#输出格式\" class=\"headerlink\" title=\"输出格式\"></a>输出格式</h3><p>然而Less并没有输出设置，而Sass中提供四种选项：nested，compact，compressed 和 expanded</p>\n<p><a href=\"http://blog.jobbole.com/24671/\" target=\"_blank\" rel=\"noopener\">http://blog.jobbole.com/24671/</a></p>\n"},{"layout":"keynote","title":"MQTT Agreement Basics","subtitle":"Keynote: MQTT Agreement Basics","iframe":null,"date":"2016-06-27T01:27:35.000Z","author":"","header-img":"post-bg-js-version.jpg","_content":"# MQTT 协议 理论篇\n\nMQTT(Message Queuing Telemetry Transport,消息队列遥测传输) 是IBM开发的一个及时通讯协议，有可能成为物联网的重要组成部分。该协议支持所有平台，几乎可以把所有联网物品和外部链接起来，被用来当做传感器和制动器\n\n## MQTT 特点\n\nMQTT 协议是为了大量计算能力有限，且工作在低带宽、不可靠订单网络的远程传感器和控制设备通讯而设计的协议，它具有以下主要特征：\n\n1.使用发布/订阅消息模式，提供一对多的消息发布，解除应用程序耦合（这一点类似XMPP，但是MQTT的信息冗余远小于XMPP，因为XMPP使用的是XML这种格式来传输数据）\n\n2.对负载内容屏蔽的消息传输\n\n3.使用 TCP/IP 提供网络连接，主流的MQTT是基于TCP连接进行数据推送的，但是同样有基于UDP的版本，叫做MQTT-SN。这两种版本由于基于不同的链接方式，优缺点自然也就各有不同了。\n\n4.有三种消息发布服务质量：\n\n#### “至多一次”\n\n消息发布完全依赖底层 TCP/IP 网络，会发生消息流失或重复。这一级别可用于如下情况，环境传感器数据，丢失一次读记录无所谓，因为不久后还会有二次发送\n\n#### 至少一次\n\n确保消息到达，但是消息重复可能会发生\n\n#### 只有一次\n\n确保消息到达一次。这一级别可用于如下情况，在计费系统中，消息重复或丢失会导致不正确的结果。这种高质量的消息发布服务还可以用于即时通讯类的APP的推送，确保用户收到且只收到一次。\n\n5.小型传输，开销很小（固定长度的头部是2字节）协议交换最小化，以降低网络流量。\n\n6.使用 Last Will 和 Testament 特性通知有关各方客户端异常中断的机制\n\nLast Will：即遗言机制，用于通知同一主题下的其他的设备发送遗言的设备以及断开了链接\n\nTestament：遗嘱机制，功能类似 Last Will\n\n# MQTT 连接 心跳 确认 断开\n\n## CONNECT\n\n正如前面说，MQTT有关字符串部分采用的修改版UTF-8编码，CONNECT可变头部中协议名称、消息体都是采用修改版的UTF-8编码。前面基本上可变头部内容不多。\n","source":"_posts/MQTT Agreement Basics.markdown","raw":"---\nlayout:     keynote\ntitle:      \"MQTT Agreement Basics\"\nsubtitle:   \"Keynote: MQTT Agreement Basics\"\niframe:     \ndate: 2016-06-27 09:27:35\nauthor:     \"\"\nheader-img: \"post-bg-js-version.jpg\"\ntags:\n    - Java\n    - 推送\n---\n# MQTT 协议 理论篇\n\nMQTT(Message Queuing Telemetry Transport,消息队列遥测传输) 是IBM开发的一个及时通讯协议，有可能成为物联网的重要组成部分。该协议支持所有平台，几乎可以把所有联网物品和外部链接起来，被用来当做传感器和制动器\n\n## MQTT 特点\n\nMQTT 协议是为了大量计算能力有限，且工作在低带宽、不可靠订单网络的远程传感器和控制设备通讯而设计的协议，它具有以下主要特征：\n\n1.使用发布/订阅消息模式，提供一对多的消息发布，解除应用程序耦合（这一点类似XMPP，但是MQTT的信息冗余远小于XMPP，因为XMPP使用的是XML这种格式来传输数据）\n\n2.对负载内容屏蔽的消息传输\n\n3.使用 TCP/IP 提供网络连接，主流的MQTT是基于TCP连接进行数据推送的，但是同样有基于UDP的版本，叫做MQTT-SN。这两种版本由于基于不同的链接方式，优缺点自然也就各有不同了。\n\n4.有三种消息发布服务质量：\n\n#### “至多一次”\n\n消息发布完全依赖底层 TCP/IP 网络，会发生消息流失或重复。这一级别可用于如下情况，环境传感器数据，丢失一次读记录无所谓，因为不久后还会有二次发送\n\n#### 至少一次\n\n确保消息到达，但是消息重复可能会发生\n\n#### 只有一次\n\n确保消息到达一次。这一级别可用于如下情况，在计费系统中，消息重复或丢失会导致不正确的结果。这种高质量的消息发布服务还可以用于即时通讯类的APP的推送，确保用户收到且只收到一次。\n\n5.小型传输，开销很小（固定长度的头部是2字节）协议交换最小化，以降低网络流量。\n\n6.使用 Last Will 和 Testament 特性通知有关各方客户端异常中断的机制\n\nLast Will：即遗言机制，用于通知同一主题下的其他的设备发送遗言的设备以及断开了链接\n\nTestament：遗嘱机制，功能类似 Last Will\n\n# MQTT 连接 心跳 确认 断开\n\n## CONNECT\n\n正如前面说，MQTT有关字符串部分采用的修改版UTF-8编码，CONNECT可变头部中协议名称、消息体都是采用修改版的UTF-8编码。前面基本上可变头部内容不多。\n","slug":"MQTT Agreement Basics","published":1,"updated":"2018-01-07T22:28:37.000Z","comments":1,"photos":[],"link":"","_id":"cjc88rlgw000ia1jg3ro3jgsy","content":"<h1 id=\"MQTT-协议-理论篇\"><a href=\"#MQTT-协议-理论篇\" class=\"headerlink\" title=\"MQTT 协议 理论篇\"></a>MQTT 协议 理论篇</h1><p>MQTT(Message Queuing Telemetry Transport,消息队列遥测传输) 是IBM开发的一个及时通讯协议，有可能成为物联网的重要组成部分。该协议支持所有平台，几乎可以把所有联网物品和外部链接起来，被用来当做传感器和制动器</p>\n<h2 id=\"MQTT-特点\"><a href=\"#MQTT-特点\" class=\"headerlink\" title=\"MQTT 特点\"></a>MQTT 特点</h2><p>MQTT 协议是为了大量计算能力有限，且工作在低带宽、不可靠订单网络的远程传感器和控制设备通讯而设计的协议，它具有以下主要特征：</p>\n<p>1.使用发布/订阅消息模式，提供一对多的消息发布，解除应用程序耦合（这一点类似XMPP，但是MQTT的信息冗余远小于XMPP，因为XMPP使用的是XML这种格式来传输数据）</p>\n<p>2.对负载内容屏蔽的消息传输</p>\n<p>3.使用 TCP/IP 提供网络连接，主流的MQTT是基于TCP连接进行数据推送的，但是同样有基于UDP的版本，叫做MQTT-SN。这两种版本由于基于不同的链接方式，优缺点自然也就各有不同了。</p>\n<p>4.有三种消息发布服务质量：</p>\n<h4 id=\"“至多一次”\"><a href=\"#“至多一次”\" class=\"headerlink\" title=\"“至多一次”\"></a>“至多一次”</h4><p>消息发布完全依赖底层 TCP/IP 网络，会发生消息流失或重复。这一级别可用于如下情况，环境传感器数据，丢失一次读记录无所谓，因为不久后还会有二次发送</p>\n<h4 id=\"至少一次\"><a href=\"#至少一次\" class=\"headerlink\" title=\"至少一次\"></a>至少一次</h4><p>确保消息到达，但是消息重复可能会发生</p>\n<h4 id=\"只有一次\"><a href=\"#只有一次\" class=\"headerlink\" title=\"只有一次\"></a>只有一次</h4><p>确保消息到达一次。这一级别可用于如下情况，在计费系统中，消息重复或丢失会导致不正确的结果。这种高质量的消息发布服务还可以用于即时通讯类的APP的推送，确保用户收到且只收到一次。</p>\n<p>5.小型传输，开销很小（固定长度的头部是2字节）协议交换最小化，以降低网络流量。</p>\n<p>6.使用 Last Will 和 Testament 特性通知有关各方客户端异常中断的机制</p>\n<p>Last Will：即遗言机制，用于通知同一主题下的其他的设备发送遗言的设备以及断开了链接</p>\n<p>Testament：遗嘱机制，功能类似 Last Will</p>\n<h1 id=\"MQTT-连接-心跳-确认-断开\"><a href=\"#MQTT-连接-心跳-确认-断开\" class=\"headerlink\" title=\"MQTT 连接 心跳 确认 断开\"></a>MQTT 连接 心跳 确认 断开</h1><h2 id=\"CONNECT\"><a href=\"#CONNECT\" class=\"headerlink\" title=\"CONNECT\"></a>CONNECT</h2><p>正如前面说，MQTT有关字符串部分采用的修改版UTF-8编码，CONNECT可变头部中协议名称、消息体都是采用修改版的UTF-8编码。前面基本上可变头部内容不多。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"MQTT-协议-理论篇\"><a href=\"#MQTT-协议-理论篇\" class=\"headerlink\" title=\"MQTT 协议 理论篇\"></a>MQTT 协议 理论篇</h1><p>MQTT(Message Queuing Telemetry Transport,消息队列遥测传输) 是IBM开发的一个及时通讯协议，有可能成为物联网的重要组成部分。该协议支持所有平台，几乎可以把所有联网物品和外部链接起来，被用来当做传感器和制动器</p>\n<h2 id=\"MQTT-特点\"><a href=\"#MQTT-特点\" class=\"headerlink\" title=\"MQTT 特点\"></a>MQTT 特点</h2><p>MQTT 协议是为了大量计算能力有限，且工作在低带宽、不可靠订单网络的远程传感器和控制设备通讯而设计的协议，它具有以下主要特征：</p>\n<p>1.使用发布/订阅消息模式，提供一对多的消息发布，解除应用程序耦合（这一点类似XMPP，但是MQTT的信息冗余远小于XMPP，因为XMPP使用的是XML这种格式来传输数据）</p>\n<p>2.对负载内容屏蔽的消息传输</p>\n<p>3.使用 TCP/IP 提供网络连接，主流的MQTT是基于TCP连接进行数据推送的，但是同样有基于UDP的版本，叫做MQTT-SN。这两种版本由于基于不同的链接方式，优缺点自然也就各有不同了。</p>\n<p>4.有三种消息发布服务质量：</p>\n<h4 id=\"“至多一次”\"><a href=\"#“至多一次”\" class=\"headerlink\" title=\"“至多一次”\"></a>“至多一次”</h4><p>消息发布完全依赖底层 TCP/IP 网络，会发生消息流失或重复。这一级别可用于如下情况，环境传感器数据，丢失一次读记录无所谓，因为不久后还会有二次发送</p>\n<h4 id=\"至少一次\"><a href=\"#至少一次\" class=\"headerlink\" title=\"至少一次\"></a>至少一次</h4><p>确保消息到达，但是消息重复可能会发生</p>\n<h4 id=\"只有一次\"><a href=\"#只有一次\" class=\"headerlink\" title=\"只有一次\"></a>只有一次</h4><p>确保消息到达一次。这一级别可用于如下情况，在计费系统中，消息重复或丢失会导致不正确的结果。这种高质量的消息发布服务还可以用于即时通讯类的APP的推送，确保用户收到且只收到一次。</p>\n<p>5.小型传输，开销很小（固定长度的头部是2字节）协议交换最小化，以降低网络流量。</p>\n<p>6.使用 Last Will 和 Testament 特性通知有关各方客户端异常中断的机制</p>\n<p>Last Will：即遗言机制，用于通知同一主题下的其他的设备发送遗言的设备以及断开了链接</p>\n<p>Testament：遗嘱机制，功能类似 Last Will</p>\n<h1 id=\"MQTT-连接-心跳-确认-断开\"><a href=\"#MQTT-连接-心跳-确认-断开\" class=\"headerlink\" title=\"MQTT 连接 心跳 确认 断开\"></a>MQTT 连接 心跳 确认 断开</h1><h2 id=\"CONNECT\"><a href=\"#CONNECT\" class=\"headerlink\" title=\"CONNECT\"></a>CONNECT</h2><p>正如前面说，MQTT有关字符串部分采用的修改版UTF-8编码，CONNECT可变头部中协议名称、消息体都是采用修改版的UTF-8编码。前面基本上可变头部内容不多。</p>\n"},{"layout":"keynote","title":"MQTT Agreement Pushlet","subtitle":"Keynote: MQTT Agreement Pushlet","iframe":null,"date":"2016-06-27T01:27:35.000Z","author":"","header-img":"post-bg-js-version.jpg","_content":"# MQTT协议2 - 推送\n\n## 主流的推送方案\n\nAPNS(Apple Push Notification Service)\nGCM(Google Cloud Messaging)\n\nAPNS 和 GCM 是 IOS 和 Android 两大阵营退出的官方推送方案，两者技术架构较为相似，都是由系统来统一的维护一个长连接，所有 APP 统一发送心跳和接收推送。\n\nAPNS 使用的方便性毋庸置疑，但是GCM却在国内举步维艰，主要原因有三个：\n\n1.GFW\n2.由于国内2G和移动3G的NAT超时时间都小于GCM心跳时间（28min），TCP长连接必然无法保活，每次都要等28分钟心跳失败重连后才能接收到PUSH。\n3.某些运营商可能限制了5228端口，移动3G/2G下，发现几乎无法连接上GCM服务器，也就无法获得GCM通知，WhatsApp放后台十分钟后，经常很长时间都收不到PUSH消息。\n","source":"_posts/MQTT Agreement Pushlet.markdown","raw":"---\nlayout:     keynote\ntitle:      \"MQTT Agreement Pushlet\"\nsubtitle:   \"Keynote: MQTT Agreement Pushlet\"\niframe:     \ndate: 2016-06-27 09:27:35\nauthor:     \"\"\nheader-img: \"post-bg-js-version.jpg\"\ntags:\n    - Java\n    - 推送\n---\n# MQTT协议2 - 推送\n\n## 主流的推送方案\n\nAPNS(Apple Push Notification Service)\nGCM(Google Cloud Messaging)\n\nAPNS 和 GCM 是 IOS 和 Android 两大阵营退出的官方推送方案，两者技术架构较为相似，都是由系统来统一的维护一个长连接，所有 APP 统一发送心跳和接收推送。\n\nAPNS 使用的方便性毋庸置疑，但是GCM却在国内举步维艰，主要原因有三个：\n\n1.GFW\n2.由于国内2G和移动3G的NAT超时时间都小于GCM心跳时间（28min），TCP长连接必然无法保活，每次都要等28分钟心跳失败重连后才能接收到PUSH。\n3.某些运营商可能限制了5228端口，移动3G/2G下，发现几乎无法连接上GCM服务器，也就无法获得GCM通知，WhatsApp放后台十分钟后，经常很长时间都收不到PUSH消息。\n","slug":"MQTT Agreement Pushlet","published":1,"updated":"2018-01-07T22:28:37.000Z","comments":1,"photos":[],"link":"","_id":"cjc88rlgx000ja1jg1w95hte7","content":"<h1 id=\"MQTT协议2-推送\"><a href=\"#MQTT协议2-推送\" class=\"headerlink\" title=\"MQTT协议2 - 推送\"></a>MQTT协议2 - 推送</h1><h2 id=\"主流的推送方案\"><a href=\"#主流的推送方案\" class=\"headerlink\" title=\"主流的推送方案\"></a>主流的推送方案</h2><p>APNS(Apple Push Notification Service)<br>GCM(Google Cloud Messaging)</p>\n<p>APNS 和 GCM 是 IOS 和 Android 两大阵营退出的官方推送方案，两者技术架构较为相似，都是由系统来统一的维护一个长连接，所有 APP 统一发送心跳和接收推送。</p>\n<p>APNS 使用的方便性毋庸置疑，但是GCM却在国内举步维艰，主要原因有三个：</p>\n<p>1.GFW<br>2.由于国内2G和移动3G的NAT超时时间都小于GCM心跳时间（28min），TCP长连接必然无法保活，每次都要等28分钟心跳失败重连后才能接收到PUSH。<br>3.某些运营商可能限制了5228端口，移动3G/2G下，发现几乎无法连接上GCM服务器，也就无法获得GCM通知，WhatsApp放后台十分钟后，经常很长时间都收不到PUSH消息。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"MQTT协议2-推送\"><a href=\"#MQTT协议2-推送\" class=\"headerlink\" title=\"MQTT协议2 - 推送\"></a>MQTT协议2 - 推送</h1><h2 id=\"主流的推送方案\"><a href=\"#主流的推送方案\" class=\"headerlink\" title=\"主流的推送方案\"></a>主流的推送方案</h2><p>APNS(Apple Push Notification Service)<br>GCM(Google Cloud Messaging)</p>\n<p>APNS 和 GCM 是 IOS 和 Android 两大阵营退出的官方推送方案，两者技术架构较为相似，都是由系统来统一的维护一个长连接，所有 APP 统一发送心跳和接收推送。</p>\n<p>APNS 使用的方便性毋庸置疑，但是GCM却在国内举步维艰，主要原因有三个：</p>\n<p>1.GFW<br>2.由于国内2G和移动3G的NAT超时时间都小于GCM心跳时间（28min），TCP长连接必然无法保活，每次都要等28分钟心跳失败重连后才能接收到PUSH。<br>3.某些运营商可能限制了5228端口，移动3G/2G下，发现几乎无法连接上GCM服务器，也就无法获得GCM通知，WhatsApp放后台十分钟后，经常很长时间都收不到PUSH消息。</p>\n"},{"title":"NOTE for Task, Microtask Queues and Schedules","date":"2018-01-08T22:54:50.000Z","_content":"\n# NOTE for: Tasks, microtasks, queues and schedules\n\nThis is the note for [This Article](https://jakearchibald.com/2015/tasks-microtasks-queues-and-schedules/) And Thanks for Author\n\nFirst let's take a look with the code:\n\n```js\nconsole.log('script start')\n\nsetTimeout(function() {\n    console.log('setTimeout')\n})\n\nPromise.resolve().then(function() {\n    console.log('promise 1')\n}).then(function() {\n    console.log('promise 2')\n})\n\nconsole.log('script end')\n```\n\nand result:\n\n```\nscript start\nscript end\npromise1\npromise2\nsetTimeout\n```\n\nMicrosoft Edge, Firefox 40, iOS Safari and desktop Safari 8.0.8 log `setTimeout` before `promise1` and `promise2` - although it appears to be a race condition. This is weird, as firefox 39 and Safari 8.0.7 get it consistently right.\n\n## Why this happens\n\nThis is something about `event loop handles tasks and microtasks`.\n\nEach `thread` gets its own event loop, so such web worker gets its own, so it can execute independently communicate. The event loop runs continually, evecuting any tasks queued. An event loop has multiple task sources which guaratees evecution order within that source, but the browser gets to pick which source to take a task from on each turn  of the loop. This allows the browser to give preference to performance sensitive task such as user-input.\n\n**Tasks**: scheduled so the browser can get from its internals into JavaScript/DOM land and ensures these actions happen sequentially. Between tasks, the browser may render updates. Getting from a mouse click to an event callback requires scheduling a task, as does parsing HTML, and `setTimeout`\n\n`setTimeout` waits for a given delay then schedules a new task for its callback. This is why `setTimeout` is logged after `script end`, as logging `script end` is part of the first task, and `setTimeout` is logged in a separate task.\n\n**Microtasks**: usually scheduled for things that should happen straight after the currently executing script, such as reacting to a batch of actions, or to make something async without taking the penalty of a whole new task. The microtask queue is processed after callbacks as long as **no other JavaScript is mid-execution**, and at the end of each task. Any additional microtasks queued during microtasks are added to the end of the queue and also processed. Include mutation abserver callbacks, and promise callbacks.\n\nPromise settles(settled) -> queues a microtask for its reactionary callbacks. (ensures promise callbacks are async even if the promise has already settled).\n\nSo calling `.then()` against a settled promise immediately queues a microtask. This is why `promise1` and `promise2` are logged after `script end`, as the currently running script must finish before microtasks are handled. `promise1` and `promise2` are logged before `setTiemout`, as microtasks always happen before the next task.\n\n**Summary**\n\n- Tasks: Scheduled so the browser can get from its internals into JavaScript JavaScript/DOM land and ensures theses actions happen sequentially. Between tasks, browser may render updates, Geting from a mouse to an event callback requires scheduling a task, as does parsing HTML, and setTimeout\n- Microtasks: Scheduled for things taht should happen straight after the currently executing script.\n- JS stack: JS execute stack.\n\n## What are some browsers doing differently?\n\nSome browsers log `script start`, `script end`, `setTimeout`, `promise1`, `promise2`. They're running promise callbacks after `setTimeout`. It's likely that they calling promise callbacks as **part of a new task rather than as a microtask**.\n\nIt's work because promises come from ECMAScript rather tan HTML. ECMAScript has the concept of \"jobs\" which are similar to microtasks, but the relationship isn't explicit aside from [vague mailing list discusions](https://esdiscuss.org/topic/the-initialization-steps-for-web-browsers#content-16).\n\nTreating promises as task leads to performance problems, as callbacks may be unnecessarily delayed by task-related things such as rendering.  It also causes non-determinism due to interaction with other task sources, and can break interactions with other APIs.\n\n## How to tell if something uses tasks or microtasks.\n\nTesting see when logs appear relative to promises & setTimeout, although you're relying on the implementation to be correct.\n\nThe certain way, is to loop up the spec:\n\n- [Step 14 of settimeout queues a task](https://html.spec.whatwg.org/multipage/timers-and-user-prompts.html#timer-initialisation-steps)\n- [Step 5 of queuing a mutation record queues a microtask](https://dom.spec.whatwg.org/#queue-a-mutation-record)\n\nIn ECMAScript land, they call microtasks `jobs`. In [step 8.a of PerformPromiseThen](http://www.ecma-international.org/ecma-262/6.0/#sec-performpromisethen), EnqueueJob is called to queue a microtask.\n\n## Level 1 bossfight\n\n```html\n<div class=\"outer\">\n    <div class=\"inner\"></div>\n</div>\n```\n\nGiven the following JS, what will be logged if I click `div.innter`?\n\n```javascript\n// Let's get hold of those elements\nvar outer = document.querySelector('.outer')\nvar innter = document.querySelector('.inner')\n\n// Let's listen for attribute changes on the outer element\nnew MutationObserver(function() {\n    console.log('mutate')\n}).observe(outer, {\n    attributes: true\n})\n\n// Here's a click listener...\nfunction onClick() {\n    console.log('click')\n\n    setTimeout(function() {\n        console.log('timeout')\n    }, 0)\n\n    Promise.resolve().then(function() {\n        console.log('promise')\n    })\n\n    outer.setAttribute('data-random', Math.random())\n}\n\n// ...which we'll attach to both elements\ninner.addEventListener('click', onClick)\nouter.addEventListener('click', onClick)\n```\n\nResult is different in different browser\n\n![Pic](01.png)\n\n## Who's right?\n\nDispatching the `click` event is a task. Mutation observer and promise callbacks are queued as microtasks. The `setTimeout` callback is queued as a task.\n\nFirst task:\n\n- `Dispatch click` task\n- Log `click`\n- Add task `setTimeout callback`\n- Then `Promise then` will be declare in Microtasks.\n- `Mutation queues` a microtask to handle observers\n- `onClick` event finish in JS stack\n\nIt's time to execute microtasks\n\n- First `Promise then callback` will be execute\n- Log `promise`\n- Then `Mutation callback` execute\n- Log `mutate`\n\nBecause event bubbles, so our callback is called again for the outer element\n\n- Log `click`\n- Add task `setTimeout callback`\n- Add microtask `Promise then`\n- Add microtask `Mutation callback`\n- Microtask `Promise then` will be execute\n- Log `promise`\n- Microtask `Mutation observers` will be execute\n- Log `mutate`\n- Then tasks `Dispatch click` clear, Move to `setTimeout callback` task\n- Log `setTimeout`\n- Move to next `setTimeout callback` task\n- Log `setTimeout`\n\nThis is the right way in Chrome. That microtasks are processed after callbacks (as long as no other JavaScript is mid-execution), It may was limited to end-of-task. This rule:\n\n        If the [stack of script settings objects](https://html.spec.whatwg.org/multipage/webappapis.html#stack-of-script-settings-objects) is now empty, [perform a microtask checkpoint](https://html.spec.whatwg.org/multipage/webappapis.html#perform-a-microtask-checkpoint)\n\n            - [HTML: CLeaning up after a callback](https://html.spec.whatwg.org/multipage/webappapis.html#clean-up-after-running-a-callback) step 3\n\nA microtask checkpoint involves going through the microtask queue, unless we;re already processing the microtask queue. Similarly, ECMAScript says this of jobs:\n\n        Execution of a Job can be initiated only when there is no running execution context and the execution context stack is empty...\n\n        - ECMAScript: Jobs and Job Queues\n\n## What did browsers get wrong?\n\nFirefox and Safari are correctly exhausting the microtask queue between click listeners. as shown by the mutation callbacks, but promises appear to be queued differently. This is sort-of excusable given that the link between jobs & microtasks is vague, but I'd still expect them to execute between listener callbacks.\n\nWith Edge we've already seen it queue promises incorrectly, but it also fails to exhaust the microtask queue between click listeners, instead it does so after calling all listeners, which accounts for the single `mutate` lig after both `click` logs.\n\n## Level1 boss's angry older brother\n\nSame example from above, If we execute:\n\n```javascript\ninner.click()\n```\n\n![Pic](02.png)\n\n### Why is it different?\n\n- Run script\n- inner.click() will be executed and JS stack boot into `onClick`\n- Log `click`\n- `setTimeout` task been declared\n- Microtasks `Promise then` has been created\n- And add Microtasks `Mutation abservers`\n\nAfter this, we cannot process microtasks, because JS stack is not empty\n\n- Log `click`\n- `setTimeout` task been declared\n- Microtasks `Promise then` has been created\n\nAnd at this time, we cannot add another mutation microtask as one is already pending.\n\n`Script` is gone, we process microtasks\n\n- Microtasks `Promise then` executed and log `Promise`\n- Microtasks `Mutation observers` executed and log `Mutate`\n- Microtasks `Promise then` executed and log `Promise`\n\nRun script task is finished, move to execute two `setTimeout callback` task\n\n- Task `setTimeout callback` and log `timeout`\n- Task `setTimeout callback` and log `timeout`\n\nPreviously, this meant that microtasks run between listener callbacks, but `.click()` causes the eent to dispatch synchronously, so the script that calls `.click()` is still in the stack between callbacks. The above rule ensures microtasks don't interrupt JavaScript that's mid-execution.\n\nThis means we don't process the microtask queue between listener callbacks, they're processed after both listeners.\n\n### Summary\n\n- Task execute in order, and the browser may render between them\n- Microtasks execute in order, and are executed:\n    - After every callback, as long as no other JavaScript is mid-execute\n    - At the end of each task\n\n### Other Funny Thing\n\n- [Great talk at JSConf on the event loop](https://www.youtube.com/watch?v=8aGhZQkoFbQ)\n- [IndexedDB](http://w3c.github.io/IndexedDB/#database-access-task-source)\n- [Living Standard](https://html.spec.whatwg.org/multipage/timers-and-user-prompts.html#timer-initialisation-steps)\n- [ECMAScript® 2015 Language Specification](http://www.ecma-international.org/ecma-262/6.0/#sec-performpromisethen)\n","source":"_posts/NOTE-Task-Microtask-Queues-and-Schedules.md","raw":"---\ntitle: NOTE for Task, Microtask Queues and Schedules\ndate: 2018-01-09 06:54:50\ntags:\n---\n\n# NOTE for: Tasks, microtasks, queues and schedules\n\nThis is the note for [This Article](https://jakearchibald.com/2015/tasks-microtasks-queues-and-schedules/) And Thanks for Author\n\nFirst let's take a look with the code:\n\n```js\nconsole.log('script start')\n\nsetTimeout(function() {\n    console.log('setTimeout')\n})\n\nPromise.resolve().then(function() {\n    console.log('promise 1')\n}).then(function() {\n    console.log('promise 2')\n})\n\nconsole.log('script end')\n```\n\nand result:\n\n```\nscript start\nscript end\npromise1\npromise2\nsetTimeout\n```\n\nMicrosoft Edge, Firefox 40, iOS Safari and desktop Safari 8.0.8 log `setTimeout` before `promise1` and `promise2` - although it appears to be a race condition. This is weird, as firefox 39 and Safari 8.0.7 get it consistently right.\n\n## Why this happens\n\nThis is something about `event loop handles tasks and microtasks`.\n\nEach `thread` gets its own event loop, so such web worker gets its own, so it can execute independently communicate. The event loop runs continually, evecuting any tasks queued. An event loop has multiple task sources which guaratees evecution order within that source, but the browser gets to pick which source to take a task from on each turn  of the loop. This allows the browser to give preference to performance sensitive task such as user-input.\n\n**Tasks**: scheduled so the browser can get from its internals into JavaScript/DOM land and ensures these actions happen sequentially. Between tasks, the browser may render updates. Getting from a mouse click to an event callback requires scheduling a task, as does parsing HTML, and `setTimeout`\n\n`setTimeout` waits for a given delay then schedules a new task for its callback. This is why `setTimeout` is logged after `script end`, as logging `script end` is part of the first task, and `setTimeout` is logged in a separate task.\n\n**Microtasks**: usually scheduled for things that should happen straight after the currently executing script, such as reacting to a batch of actions, or to make something async without taking the penalty of a whole new task. The microtask queue is processed after callbacks as long as **no other JavaScript is mid-execution**, and at the end of each task. Any additional microtasks queued during microtasks are added to the end of the queue and also processed. Include mutation abserver callbacks, and promise callbacks.\n\nPromise settles(settled) -> queues a microtask for its reactionary callbacks. (ensures promise callbacks are async even if the promise has already settled).\n\nSo calling `.then()` against a settled promise immediately queues a microtask. This is why `promise1` and `promise2` are logged after `script end`, as the currently running script must finish before microtasks are handled. `promise1` and `promise2` are logged before `setTiemout`, as microtasks always happen before the next task.\n\n**Summary**\n\n- Tasks: Scheduled so the browser can get from its internals into JavaScript JavaScript/DOM land and ensures theses actions happen sequentially. Between tasks, browser may render updates, Geting from a mouse to an event callback requires scheduling a task, as does parsing HTML, and setTimeout\n- Microtasks: Scheduled for things taht should happen straight after the currently executing script.\n- JS stack: JS execute stack.\n\n## What are some browsers doing differently?\n\nSome browsers log `script start`, `script end`, `setTimeout`, `promise1`, `promise2`. They're running promise callbacks after `setTimeout`. It's likely that they calling promise callbacks as **part of a new task rather than as a microtask**.\n\nIt's work because promises come from ECMAScript rather tan HTML. ECMAScript has the concept of \"jobs\" which are similar to microtasks, but the relationship isn't explicit aside from [vague mailing list discusions](https://esdiscuss.org/topic/the-initialization-steps-for-web-browsers#content-16).\n\nTreating promises as task leads to performance problems, as callbacks may be unnecessarily delayed by task-related things such as rendering.  It also causes non-determinism due to interaction with other task sources, and can break interactions with other APIs.\n\n## How to tell if something uses tasks or microtasks.\n\nTesting see when logs appear relative to promises & setTimeout, although you're relying on the implementation to be correct.\n\nThe certain way, is to loop up the spec:\n\n- [Step 14 of settimeout queues a task](https://html.spec.whatwg.org/multipage/timers-and-user-prompts.html#timer-initialisation-steps)\n- [Step 5 of queuing a mutation record queues a microtask](https://dom.spec.whatwg.org/#queue-a-mutation-record)\n\nIn ECMAScript land, they call microtasks `jobs`. In [step 8.a of PerformPromiseThen](http://www.ecma-international.org/ecma-262/6.0/#sec-performpromisethen), EnqueueJob is called to queue a microtask.\n\n## Level 1 bossfight\n\n```html\n<div class=\"outer\">\n    <div class=\"inner\"></div>\n</div>\n```\n\nGiven the following JS, what will be logged if I click `div.innter`?\n\n```javascript\n// Let's get hold of those elements\nvar outer = document.querySelector('.outer')\nvar innter = document.querySelector('.inner')\n\n// Let's listen for attribute changes on the outer element\nnew MutationObserver(function() {\n    console.log('mutate')\n}).observe(outer, {\n    attributes: true\n})\n\n// Here's a click listener...\nfunction onClick() {\n    console.log('click')\n\n    setTimeout(function() {\n        console.log('timeout')\n    }, 0)\n\n    Promise.resolve().then(function() {\n        console.log('promise')\n    })\n\n    outer.setAttribute('data-random', Math.random())\n}\n\n// ...which we'll attach to both elements\ninner.addEventListener('click', onClick)\nouter.addEventListener('click', onClick)\n```\n\nResult is different in different browser\n\n![Pic](01.png)\n\n## Who's right?\n\nDispatching the `click` event is a task. Mutation observer and promise callbacks are queued as microtasks. The `setTimeout` callback is queued as a task.\n\nFirst task:\n\n- `Dispatch click` task\n- Log `click`\n- Add task `setTimeout callback`\n- Then `Promise then` will be declare in Microtasks.\n- `Mutation queues` a microtask to handle observers\n- `onClick` event finish in JS stack\n\nIt's time to execute microtasks\n\n- First `Promise then callback` will be execute\n- Log `promise`\n- Then `Mutation callback` execute\n- Log `mutate`\n\nBecause event bubbles, so our callback is called again for the outer element\n\n- Log `click`\n- Add task `setTimeout callback`\n- Add microtask `Promise then`\n- Add microtask `Mutation callback`\n- Microtask `Promise then` will be execute\n- Log `promise`\n- Microtask `Mutation observers` will be execute\n- Log `mutate`\n- Then tasks `Dispatch click` clear, Move to `setTimeout callback` task\n- Log `setTimeout`\n- Move to next `setTimeout callback` task\n- Log `setTimeout`\n\nThis is the right way in Chrome. That microtasks are processed after callbacks (as long as no other JavaScript is mid-execution), It may was limited to end-of-task. This rule:\n\n        If the [stack of script settings objects](https://html.spec.whatwg.org/multipage/webappapis.html#stack-of-script-settings-objects) is now empty, [perform a microtask checkpoint](https://html.spec.whatwg.org/multipage/webappapis.html#perform-a-microtask-checkpoint)\n\n            - [HTML: CLeaning up after a callback](https://html.spec.whatwg.org/multipage/webappapis.html#clean-up-after-running-a-callback) step 3\n\nA microtask checkpoint involves going through the microtask queue, unless we;re already processing the microtask queue. Similarly, ECMAScript says this of jobs:\n\n        Execution of a Job can be initiated only when there is no running execution context and the execution context stack is empty...\n\n        - ECMAScript: Jobs and Job Queues\n\n## What did browsers get wrong?\n\nFirefox and Safari are correctly exhausting the microtask queue between click listeners. as shown by the mutation callbacks, but promises appear to be queued differently. This is sort-of excusable given that the link between jobs & microtasks is vague, but I'd still expect them to execute between listener callbacks.\n\nWith Edge we've already seen it queue promises incorrectly, but it also fails to exhaust the microtask queue between click listeners, instead it does so after calling all listeners, which accounts for the single `mutate` lig after both `click` logs.\n\n## Level1 boss's angry older brother\n\nSame example from above, If we execute:\n\n```javascript\ninner.click()\n```\n\n![Pic](02.png)\n\n### Why is it different?\n\n- Run script\n- inner.click() will be executed and JS stack boot into `onClick`\n- Log `click`\n- `setTimeout` task been declared\n- Microtasks `Promise then` has been created\n- And add Microtasks `Mutation abservers`\n\nAfter this, we cannot process microtasks, because JS stack is not empty\n\n- Log `click`\n- `setTimeout` task been declared\n- Microtasks `Promise then` has been created\n\nAnd at this time, we cannot add another mutation microtask as one is already pending.\n\n`Script` is gone, we process microtasks\n\n- Microtasks `Promise then` executed and log `Promise`\n- Microtasks `Mutation observers` executed and log `Mutate`\n- Microtasks `Promise then` executed and log `Promise`\n\nRun script task is finished, move to execute two `setTimeout callback` task\n\n- Task `setTimeout callback` and log `timeout`\n- Task `setTimeout callback` and log `timeout`\n\nPreviously, this meant that microtasks run between listener callbacks, but `.click()` causes the eent to dispatch synchronously, so the script that calls `.click()` is still in the stack between callbacks. The above rule ensures microtasks don't interrupt JavaScript that's mid-execution.\n\nThis means we don't process the microtask queue between listener callbacks, they're processed after both listeners.\n\n### Summary\n\n- Task execute in order, and the browser may render between them\n- Microtasks execute in order, and are executed:\n    - After every callback, as long as no other JavaScript is mid-execute\n    - At the end of each task\n\n### Other Funny Thing\n\n- [Great talk at JSConf on the event loop](https://www.youtube.com/watch?v=8aGhZQkoFbQ)\n- [IndexedDB](http://w3c.github.io/IndexedDB/#database-access-task-source)\n- [Living Standard](https://html.spec.whatwg.org/multipage/timers-and-user-prompts.html#timer-initialisation-steps)\n- [ECMAScript® 2015 Language Specification](http://www.ecma-international.org/ecma-262/6.0/#sec-performpromisethen)\n","slug":"NOTE-Task-Microtask-Queues-and-Schedules","published":1,"updated":"2018-01-08T22:58:54.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjc88rlgy000la1jgiurviisn","content":"<h1 id=\"NOTE-for-Tasks-microtasks-queues-and-schedules\"><a href=\"#NOTE-for-Tasks-microtasks-queues-and-schedules\" class=\"headerlink\" title=\"NOTE for: Tasks, microtasks, queues and schedules\"></a>NOTE for: Tasks, microtasks, queues and schedules</h1><p>This is the note for <a href=\"https://jakearchibald.com/2015/tasks-microtasks-queues-and-schedules/\" target=\"_blank\" rel=\"noopener\">This Article</a> And Thanks for Author</p>\n<p>First let’s take a look with the code:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'script start'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'setTimeout'</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.resolve().then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'promise 1'</span>)</span><br><span class=\"line\">&#125;).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'promise 2'</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'script end'</span>)</span><br></pre></td></tr></table></figure>\n<p>and result:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">script start</span><br><span class=\"line\">script end</span><br><span class=\"line\">promise1</span><br><span class=\"line\">promise2</span><br><span class=\"line\">setTimeout</span><br></pre></td></tr></table></figure>\n<p>Microsoft Edge, Firefox 40, iOS Safari and desktop Safari 8.0.8 log <code>setTimeout</code> before <code>promise1</code> and <code>promise2</code> - although it appears to be a race condition. This is weird, as firefox 39 and Safari 8.0.7 get it consistently right.</p>\n<h2 id=\"Why-this-happens\"><a href=\"#Why-this-happens\" class=\"headerlink\" title=\"Why this happens\"></a>Why this happens</h2><p>This is something about <code>event loop handles tasks and microtasks</code>.</p>\n<p>Each <code>thread</code> gets its own event loop, so such web worker gets its own, so it can execute independently communicate. The event loop runs continually, evecuting any tasks queued. An event loop has multiple task sources which guaratees evecution order within that source, but the browser gets to pick which source to take a task from on each turn  of the loop. This allows the browser to give preference to performance sensitive task such as user-input.</p>\n<p><strong>Tasks</strong>: scheduled so the browser can get from its internals into JavaScript/DOM land and ensures these actions happen sequentially. Between tasks, the browser may render updates. Getting from a mouse click to an event callback requires scheduling a task, as does parsing HTML, and <code>setTimeout</code></p>\n<p><code>setTimeout</code> waits for a given delay then schedules a new task for its callback. This is why <code>setTimeout</code> is logged after <code>script end</code>, as logging <code>script end</code> is part of the first task, and <code>setTimeout</code> is logged in a separate task.</p>\n<p><strong>Microtasks</strong>: usually scheduled for things that should happen straight after the currently executing script, such as reacting to a batch of actions, or to make something async without taking the penalty of a whole new task. The microtask queue is processed after callbacks as long as <strong>no other JavaScript is mid-execution</strong>, and at the end of each task. Any additional microtasks queued during microtasks are added to the end of the queue and also processed. Include mutation abserver callbacks, and promise callbacks.</p>\n<p>Promise settles(settled) -&gt; queues a microtask for its reactionary callbacks. (ensures promise callbacks are async even if the promise has already settled).</p>\n<p>So calling <code>.then()</code> against a settled promise immediately queues a microtask. This is why <code>promise1</code> and <code>promise2</code> are logged after <code>script end</code>, as the currently running script must finish before microtasks are handled. <code>promise1</code> and <code>promise2</code> are logged before <code>setTiemout</code>, as microtasks always happen before the next task.</p>\n<p><strong>Summary</strong></p>\n<ul>\n<li>Tasks: Scheduled so the browser can get from its internals into JavaScript JavaScript/DOM land and ensures theses actions happen sequentially. Between tasks, browser may render updates, Geting from a mouse to an event callback requires scheduling a task, as does parsing HTML, and setTimeout</li>\n<li>Microtasks: Scheduled for things taht should happen straight after the currently executing script.</li>\n<li>JS stack: JS execute stack.</li>\n</ul>\n<h2 id=\"What-are-some-browsers-doing-differently\"><a href=\"#What-are-some-browsers-doing-differently\" class=\"headerlink\" title=\"What are some browsers doing differently?\"></a>What are some browsers doing differently?</h2><p>Some browsers log <code>script start</code>, <code>script end</code>, <code>setTimeout</code>, <code>promise1</code>, <code>promise2</code>. They’re running promise callbacks after <code>setTimeout</code>. It’s likely that they calling promise callbacks as <strong>part of a new task rather than as a microtask</strong>.</p>\n<p>It’s work because promises come from ECMAScript rather tan HTML. ECMAScript has the concept of “jobs” which are similar to microtasks, but the relationship isn’t explicit aside from <a href=\"https://esdiscuss.org/topic/the-initialization-steps-for-web-browsers#content-16\" target=\"_blank\" rel=\"noopener\">vague mailing list discusions</a>.</p>\n<p>Treating promises as task leads to performance problems, as callbacks may be unnecessarily delayed by task-related things such as rendering.  It also causes non-determinism due to interaction with other task sources, and can break interactions with other APIs.</p>\n<h2 id=\"How-to-tell-if-something-uses-tasks-or-microtasks\"><a href=\"#How-to-tell-if-something-uses-tasks-or-microtasks\" class=\"headerlink\" title=\"How to tell if something uses tasks or microtasks.\"></a>How to tell if something uses tasks or microtasks.</h2><p>Testing see when logs appear relative to promises &amp; setTimeout, although you’re relying on the implementation to be correct.</p>\n<p>The certain way, is to loop up the spec:</p>\n<ul>\n<li><a href=\"https://html.spec.whatwg.org/multipage/timers-and-user-prompts.html#timer-initialisation-steps\" target=\"_blank\" rel=\"noopener\">Step 14 of settimeout queues a task</a></li>\n<li><a href=\"https://dom.spec.whatwg.org/#queue-a-mutation-record\" target=\"_blank\" rel=\"noopener\">Step 5 of queuing a mutation record queues a microtask</a></li>\n</ul>\n<p>In ECMAScript land, they call microtasks <code>jobs</code>. In <a href=\"http://www.ecma-international.org/ecma-262/6.0/#sec-performpromisethen\" target=\"_blank\" rel=\"noopener\">step 8.a of PerformPromiseThen</a>, EnqueueJob is called to queue a microtask.</p>\n<h2 id=\"Level-1-bossfight\"><a href=\"#Level-1-bossfight\" class=\"headerlink\" title=\"Level 1 bossfight\"></a>Level 1 bossfight</h2><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"outer\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"inner\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>Given the following JS, what will be logged if I click <code>div.innter</code>?</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Let's get hold of those elements</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> outer = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'.outer'</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> innter = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'.inner'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Let's listen for attribute changes on the outer element</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> MutationObserver(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'mutate'</span>)</span><br><span class=\"line\">&#125;).observe(outer, &#123;</span><br><span class=\"line\">    attributes: <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Here's a click listener...</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">onClick</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'click'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'timeout'</span>)</span><br><span class=\"line\">    &#125;, <span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">Promise</span>.resolve().then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'promise'</span>)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    outer.setAttribute(<span class=\"string\">'data-random'</span>, <span class=\"built_in\">Math</span>.random())</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ...which we'll attach to both elements</span></span><br><span class=\"line\">inner.addEventListener(<span class=\"string\">'click'</span>, onClick)</span><br><span class=\"line\">outer.addEventListener(<span class=\"string\">'click'</span>, onClick)</span><br></pre></td></tr></table></figure>\n<p>Result is different in different browser</p>\n<p><img src=\"01.png\" alt=\"Pic\"></p>\n<h2 id=\"Who’s-right\"><a href=\"#Who’s-right\" class=\"headerlink\" title=\"Who’s right?\"></a>Who’s right?</h2><p>Dispatching the <code>click</code> event is a task. Mutation observer and promise callbacks are queued as microtasks. The <code>setTimeout</code> callback is queued as a task.</p>\n<p>First task:</p>\n<ul>\n<li><code>Dispatch click</code> task</li>\n<li>Log <code>click</code></li>\n<li>Add task <code>setTimeout callback</code></li>\n<li>Then <code>Promise then</code> will be declare in Microtasks.</li>\n<li><code>Mutation queues</code> a microtask to handle observers</li>\n<li><code>onClick</code> event finish in JS stack</li>\n</ul>\n<p>It’s time to execute microtasks</p>\n<ul>\n<li>First <code>Promise then callback</code> will be execute</li>\n<li>Log <code>promise</code></li>\n<li>Then <code>Mutation callback</code> execute</li>\n<li>Log <code>mutate</code></li>\n</ul>\n<p>Because event bubbles, so our callback is called again for the outer element</p>\n<ul>\n<li>Log <code>click</code></li>\n<li>Add task <code>setTimeout callback</code></li>\n<li>Add microtask <code>Promise then</code></li>\n<li>Add microtask <code>Mutation callback</code></li>\n<li>Microtask <code>Promise then</code> will be execute</li>\n<li>Log <code>promise</code></li>\n<li>Microtask <code>Mutation observers</code> will be execute</li>\n<li>Log <code>mutate</code></li>\n<li>Then tasks <code>Dispatch click</code> clear, Move to <code>setTimeout callback</code> task</li>\n<li>Log <code>setTimeout</code></li>\n<li>Move to next <code>setTimeout callback</code> task</li>\n<li>Log <code>setTimeout</code></li>\n</ul>\n<p>This is the right way in Chrome. That microtasks are processed after callbacks (as long as no other JavaScript is mid-execution), It may was limited to end-of-task. This rule:</p>\n<pre><code>If the [stack of script settings objects](https://html.spec.whatwg.org/multipage/webappapis.html#stack-of-script-settings-objects) is now empty, [perform a microtask checkpoint](https://html.spec.whatwg.org/multipage/webappapis.html#perform-a-microtask-checkpoint)\n\n    - [HTML: CLeaning up after a callback](https://html.spec.whatwg.org/multipage/webappapis.html#clean-up-after-running-a-callback) step 3\n</code></pre><p>A microtask checkpoint involves going through the microtask queue, unless we;re already processing the microtask queue. Similarly, ECMAScript says this of jobs:</p>\n<pre><code>Execution of a Job can be initiated only when there is no running execution context and the execution context stack is empty...\n\n- ECMAScript: Jobs and Job Queues\n</code></pre><h2 id=\"What-did-browsers-get-wrong\"><a href=\"#What-did-browsers-get-wrong\" class=\"headerlink\" title=\"What did browsers get wrong?\"></a>What did browsers get wrong?</h2><p>Firefox and Safari are correctly exhausting the microtask queue between click listeners. as shown by the mutation callbacks, but promises appear to be queued differently. This is sort-of excusable given that the link between jobs &amp; microtasks is vague, but I’d still expect them to execute between listener callbacks.</p>\n<p>With Edge we’ve already seen it queue promises incorrectly, but it also fails to exhaust the microtask queue between click listeners, instead it does so after calling all listeners, which accounts for the single <code>mutate</code> lig after both <code>click</code> logs.</p>\n<h2 id=\"Level1-boss’s-angry-older-brother\"><a href=\"#Level1-boss’s-angry-older-brother\" class=\"headerlink\" title=\"Level1 boss’s angry older brother\"></a>Level1 boss’s angry older brother</h2><p>Same example from above, If we execute:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">inner.click()</span><br></pre></td></tr></table></figure>\n<p><img src=\"02.png\" alt=\"Pic\"></p>\n<h3 id=\"Why-is-it-different\"><a href=\"#Why-is-it-different\" class=\"headerlink\" title=\"Why is it different?\"></a>Why is it different?</h3><ul>\n<li>Run script</li>\n<li>inner.click() will be executed and JS stack boot into <code>onClick</code></li>\n<li>Log <code>click</code></li>\n<li><code>setTimeout</code> task been declared</li>\n<li>Microtasks <code>Promise then</code> has been created</li>\n<li>And add Microtasks <code>Mutation abservers</code></li>\n</ul>\n<p>After this, we cannot process microtasks, because JS stack is not empty</p>\n<ul>\n<li>Log <code>click</code></li>\n<li><code>setTimeout</code> task been declared</li>\n<li>Microtasks <code>Promise then</code> has been created</li>\n</ul>\n<p>And at this time, we cannot add another mutation microtask as one is already pending.</p>\n<p><code>Script</code> is gone, we process microtasks</p>\n<ul>\n<li>Microtasks <code>Promise then</code> executed and log <code>Promise</code></li>\n<li>Microtasks <code>Mutation observers</code> executed and log <code>Mutate</code></li>\n<li>Microtasks <code>Promise then</code> executed and log <code>Promise</code></li>\n</ul>\n<p>Run script task is finished, move to execute two <code>setTimeout callback</code> task</p>\n<ul>\n<li>Task <code>setTimeout callback</code> and log <code>timeout</code></li>\n<li>Task <code>setTimeout callback</code> and log <code>timeout</code></li>\n</ul>\n<p>Previously, this meant that microtasks run between listener callbacks, but <code>.click()</code> causes the eent to dispatch synchronously, so the script that calls <code>.click()</code> is still in the stack between callbacks. The above rule ensures microtasks don’t interrupt JavaScript that’s mid-execution.</p>\n<p>This means we don’t process the microtask queue between listener callbacks, they’re processed after both listeners.</p>\n<h3 id=\"Summary\"><a href=\"#Summary\" class=\"headerlink\" title=\"Summary\"></a>Summary</h3><ul>\n<li>Task execute in order, and the browser may render between them</li>\n<li>Microtasks execute in order, and are executed:<ul>\n<li>After every callback, as long as no other JavaScript is mid-execute</li>\n<li>At the end of each task</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"Other-Funny-Thing\"><a href=\"#Other-Funny-Thing\" class=\"headerlink\" title=\"Other Funny Thing\"></a>Other Funny Thing</h3><ul>\n<li><a href=\"https://www.youtube.com/watch?v=8aGhZQkoFbQ\" target=\"_blank\" rel=\"noopener\">Great talk at JSConf on the event loop</a></li>\n<li><a href=\"http://w3c.github.io/IndexedDB/#database-access-task-source\" target=\"_blank\" rel=\"noopener\">IndexedDB</a></li>\n<li><a href=\"https://html.spec.whatwg.org/multipage/timers-and-user-prompts.html#timer-initialisation-steps\" target=\"_blank\" rel=\"noopener\">Living Standard</a></li>\n<li><a href=\"http://www.ecma-international.org/ecma-262/6.0/#sec-performpromisethen\" target=\"_blank\" rel=\"noopener\">ECMAScript® 2015 Language Specification</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"NOTE-for-Tasks-microtasks-queues-and-schedules\"><a href=\"#NOTE-for-Tasks-microtasks-queues-and-schedules\" class=\"headerlink\" title=\"NOTE for: Tasks, microtasks, queues and schedules\"></a>NOTE for: Tasks, microtasks, queues and schedules</h1><p>This is the note for <a href=\"https://jakearchibald.com/2015/tasks-microtasks-queues-and-schedules/\" target=\"_blank\" rel=\"noopener\">This Article</a> And Thanks for Author</p>\n<p>First let’s take a look with the code:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'script start'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'setTimeout'</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.resolve().then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'promise 1'</span>)</span><br><span class=\"line\">&#125;).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'promise 2'</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'script end'</span>)</span><br></pre></td></tr></table></figure>\n<p>and result:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">script start</span><br><span class=\"line\">script end</span><br><span class=\"line\">promise1</span><br><span class=\"line\">promise2</span><br><span class=\"line\">setTimeout</span><br></pre></td></tr></table></figure>\n<p>Microsoft Edge, Firefox 40, iOS Safari and desktop Safari 8.0.8 log <code>setTimeout</code> before <code>promise1</code> and <code>promise2</code> - although it appears to be a race condition. This is weird, as firefox 39 and Safari 8.0.7 get it consistently right.</p>\n<h2 id=\"Why-this-happens\"><a href=\"#Why-this-happens\" class=\"headerlink\" title=\"Why this happens\"></a>Why this happens</h2><p>This is something about <code>event loop handles tasks and microtasks</code>.</p>\n<p>Each <code>thread</code> gets its own event loop, so such web worker gets its own, so it can execute independently communicate. The event loop runs continually, evecuting any tasks queued. An event loop has multiple task sources which guaratees evecution order within that source, but the browser gets to pick which source to take a task from on each turn  of the loop. This allows the browser to give preference to performance sensitive task such as user-input.</p>\n<p><strong>Tasks</strong>: scheduled so the browser can get from its internals into JavaScript/DOM land and ensures these actions happen sequentially. Between tasks, the browser may render updates. Getting from a mouse click to an event callback requires scheduling a task, as does parsing HTML, and <code>setTimeout</code></p>\n<p><code>setTimeout</code> waits for a given delay then schedules a new task for its callback. This is why <code>setTimeout</code> is logged after <code>script end</code>, as logging <code>script end</code> is part of the first task, and <code>setTimeout</code> is logged in a separate task.</p>\n<p><strong>Microtasks</strong>: usually scheduled for things that should happen straight after the currently executing script, such as reacting to a batch of actions, or to make something async without taking the penalty of a whole new task. The microtask queue is processed after callbacks as long as <strong>no other JavaScript is mid-execution</strong>, and at the end of each task. Any additional microtasks queued during microtasks are added to the end of the queue and also processed. Include mutation abserver callbacks, and promise callbacks.</p>\n<p>Promise settles(settled) -&gt; queues a microtask for its reactionary callbacks. (ensures promise callbacks are async even if the promise has already settled).</p>\n<p>So calling <code>.then()</code> against a settled promise immediately queues a microtask. This is why <code>promise1</code> and <code>promise2</code> are logged after <code>script end</code>, as the currently running script must finish before microtasks are handled. <code>promise1</code> and <code>promise2</code> are logged before <code>setTiemout</code>, as microtasks always happen before the next task.</p>\n<p><strong>Summary</strong></p>\n<ul>\n<li>Tasks: Scheduled so the browser can get from its internals into JavaScript JavaScript/DOM land and ensures theses actions happen sequentially. Between tasks, browser may render updates, Geting from a mouse to an event callback requires scheduling a task, as does parsing HTML, and setTimeout</li>\n<li>Microtasks: Scheduled for things taht should happen straight after the currently executing script.</li>\n<li>JS stack: JS execute stack.</li>\n</ul>\n<h2 id=\"What-are-some-browsers-doing-differently\"><a href=\"#What-are-some-browsers-doing-differently\" class=\"headerlink\" title=\"What are some browsers doing differently?\"></a>What are some browsers doing differently?</h2><p>Some browsers log <code>script start</code>, <code>script end</code>, <code>setTimeout</code>, <code>promise1</code>, <code>promise2</code>. They’re running promise callbacks after <code>setTimeout</code>. It’s likely that they calling promise callbacks as <strong>part of a new task rather than as a microtask</strong>.</p>\n<p>It’s work because promises come from ECMAScript rather tan HTML. ECMAScript has the concept of “jobs” which are similar to microtasks, but the relationship isn’t explicit aside from <a href=\"https://esdiscuss.org/topic/the-initialization-steps-for-web-browsers#content-16\" target=\"_blank\" rel=\"noopener\">vague mailing list discusions</a>.</p>\n<p>Treating promises as task leads to performance problems, as callbacks may be unnecessarily delayed by task-related things such as rendering.  It also causes non-determinism due to interaction with other task sources, and can break interactions with other APIs.</p>\n<h2 id=\"How-to-tell-if-something-uses-tasks-or-microtasks\"><a href=\"#How-to-tell-if-something-uses-tasks-or-microtasks\" class=\"headerlink\" title=\"How to tell if something uses tasks or microtasks.\"></a>How to tell if something uses tasks or microtasks.</h2><p>Testing see when logs appear relative to promises &amp; setTimeout, although you’re relying on the implementation to be correct.</p>\n<p>The certain way, is to loop up the spec:</p>\n<ul>\n<li><a href=\"https://html.spec.whatwg.org/multipage/timers-and-user-prompts.html#timer-initialisation-steps\" target=\"_blank\" rel=\"noopener\">Step 14 of settimeout queues a task</a></li>\n<li><a href=\"https://dom.spec.whatwg.org/#queue-a-mutation-record\" target=\"_blank\" rel=\"noopener\">Step 5 of queuing a mutation record queues a microtask</a></li>\n</ul>\n<p>In ECMAScript land, they call microtasks <code>jobs</code>. In <a href=\"http://www.ecma-international.org/ecma-262/6.0/#sec-performpromisethen\" target=\"_blank\" rel=\"noopener\">step 8.a of PerformPromiseThen</a>, EnqueueJob is called to queue a microtask.</p>\n<h2 id=\"Level-1-bossfight\"><a href=\"#Level-1-bossfight\" class=\"headerlink\" title=\"Level 1 bossfight\"></a>Level 1 bossfight</h2><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"outer\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"inner\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>Given the following JS, what will be logged if I click <code>div.innter</code>?</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Let's get hold of those elements</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> outer = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'.outer'</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> innter = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'.inner'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Let's listen for attribute changes on the outer element</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> MutationObserver(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'mutate'</span>)</span><br><span class=\"line\">&#125;).observe(outer, &#123;</span><br><span class=\"line\">    attributes: <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Here's a click listener...</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">onClick</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'click'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'timeout'</span>)</span><br><span class=\"line\">    &#125;, <span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">Promise</span>.resolve().then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'promise'</span>)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    outer.setAttribute(<span class=\"string\">'data-random'</span>, <span class=\"built_in\">Math</span>.random())</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ...which we'll attach to both elements</span></span><br><span class=\"line\">inner.addEventListener(<span class=\"string\">'click'</span>, onClick)</span><br><span class=\"line\">outer.addEventListener(<span class=\"string\">'click'</span>, onClick)</span><br></pre></td></tr></table></figure>\n<p>Result is different in different browser</p>\n<p><img src=\"01.png\" alt=\"Pic\"></p>\n<h2 id=\"Who’s-right\"><a href=\"#Who’s-right\" class=\"headerlink\" title=\"Who’s right?\"></a>Who’s right?</h2><p>Dispatching the <code>click</code> event is a task. Mutation observer and promise callbacks are queued as microtasks. The <code>setTimeout</code> callback is queued as a task.</p>\n<p>First task:</p>\n<ul>\n<li><code>Dispatch click</code> task</li>\n<li>Log <code>click</code></li>\n<li>Add task <code>setTimeout callback</code></li>\n<li>Then <code>Promise then</code> will be declare in Microtasks.</li>\n<li><code>Mutation queues</code> a microtask to handle observers</li>\n<li><code>onClick</code> event finish in JS stack</li>\n</ul>\n<p>It’s time to execute microtasks</p>\n<ul>\n<li>First <code>Promise then callback</code> will be execute</li>\n<li>Log <code>promise</code></li>\n<li>Then <code>Mutation callback</code> execute</li>\n<li>Log <code>mutate</code></li>\n</ul>\n<p>Because event bubbles, so our callback is called again for the outer element</p>\n<ul>\n<li>Log <code>click</code></li>\n<li>Add task <code>setTimeout callback</code></li>\n<li>Add microtask <code>Promise then</code></li>\n<li>Add microtask <code>Mutation callback</code></li>\n<li>Microtask <code>Promise then</code> will be execute</li>\n<li>Log <code>promise</code></li>\n<li>Microtask <code>Mutation observers</code> will be execute</li>\n<li>Log <code>mutate</code></li>\n<li>Then tasks <code>Dispatch click</code> clear, Move to <code>setTimeout callback</code> task</li>\n<li>Log <code>setTimeout</code></li>\n<li>Move to next <code>setTimeout callback</code> task</li>\n<li>Log <code>setTimeout</code></li>\n</ul>\n<p>This is the right way in Chrome. That microtasks are processed after callbacks (as long as no other JavaScript is mid-execution), It may was limited to end-of-task. This rule:</p>\n<pre><code>If the [stack of script settings objects](https://html.spec.whatwg.org/multipage/webappapis.html#stack-of-script-settings-objects) is now empty, [perform a microtask checkpoint](https://html.spec.whatwg.org/multipage/webappapis.html#perform-a-microtask-checkpoint)\n\n    - [HTML: CLeaning up after a callback](https://html.spec.whatwg.org/multipage/webappapis.html#clean-up-after-running-a-callback) step 3\n</code></pre><p>A microtask checkpoint involves going through the microtask queue, unless we;re already processing the microtask queue. Similarly, ECMAScript says this of jobs:</p>\n<pre><code>Execution of a Job can be initiated only when there is no running execution context and the execution context stack is empty...\n\n- ECMAScript: Jobs and Job Queues\n</code></pre><h2 id=\"What-did-browsers-get-wrong\"><a href=\"#What-did-browsers-get-wrong\" class=\"headerlink\" title=\"What did browsers get wrong?\"></a>What did browsers get wrong?</h2><p>Firefox and Safari are correctly exhausting the microtask queue between click listeners. as shown by the mutation callbacks, but promises appear to be queued differently. This is sort-of excusable given that the link between jobs &amp; microtasks is vague, but I’d still expect them to execute between listener callbacks.</p>\n<p>With Edge we’ve already seen it queue promises incorrectly, but it also fails to exhaust the microtask queue between click listeners, instead it does so after calling all listeners, which accounts for the single <code>mutate</code> lig after both <code>click</code> logs.</p>\n<h2 id=\"Level1-boss’s-angry-older-brother\"><a href=\"#Level1-boss’s-angry-older-brother\" class=\"headerlink\" title=\"Level1 boss’s angry older brother\"></a>Level1 boss’s angry older brother</h2><p>Same example from above, If we execute:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">inner.click()</span><br></pre></td></tr></table></figure>\n<p><img src=\"02.png\" alt=\"Pic\"></p>\n<h3 id=\"Why-is-it-different\"><a href=\"#Why-is-it-different\" class=\"headerlink\" title=\"Why is it different?\"></a>Why is it different?</h3><ul>\n<li>Run script</li>\n<li>inner.click() will be executed and JS stack boot into <code>onClick</code></li>\n<li>Log <code>click</code></li>\n<li><code>setTimeout</code> task been declared</li>\n<li>Microtasks <code>Promise then</code> has been created</li>\n<li>And add Microtasks <code>Mutation abservers</code></li>\n</ul>\n<p>After this, we cannot process microtasks, because JS stack is not empty</p>\n<ul>\n<li>Log <code>click</code></li>\n<li><code>setTimeout</code> task been declared</li>\n<li>Microtasks <code>Promise then</code> has been created</li>\n</ul>\n<p>And at this time, we cannot add another mutation microtask as one is already pending.</p>\n<p><code>Script</code> is gone, we process microtasks</p>\n<ul>\n<li>Microtasks <code>Promise then</code> executed and log <code>Promise</code></li>\n<li>Microtasks <code>Mutation observers</code> executed and log <code>Mutate</code></li>\n<li>Microtasks <code>Promise then</code> executed and log <code>Promise</code></li>\n</ul>\n<p>Run script task is finished, move to execute two <code>setTimeout callback</code> task</p>\n<ul>\n<li>Task <code>setTimeout callback</code> and log <code>timeout</code></li>\n<li>Task <code>setTimeout callback</code> and log <code>timeout</code></li>\n</ul>\n<p>Previously, this meant that microtasks run between listener callbacks, but <code>.click()</code> causes the eent to dispatch synchronously, so the script that calls <code>.click()</code> is still in the stack between callbacks. The above rule ensures microtasks don’t interrupt JavaScript that’s mid-execution.</p>\n<p>This means we don’t process the microtask queue between listener callbacks, they’re processed after both listeners.</p>\n<h3 id=\"Summary\"><a href=\"#Summary\" class=\"headerlink\" title=\"Summary\"></a>Summary</h3><ul>\n<li>Task execute in order, and the browser may render between them</li>\n<li>Microtasks execute in order, and are executed:<ul>\n<li>After every callback, as long as no other JavaScript is mid-execute</li>\n<li>At the end of each task</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"Other-Funny-Thing\"><a href=\"#Other-Funny-Thing\" class=\"headerlink\" title=\"Other Funny Thing\"></a>Other Funny Thing</h3><ul>\n<li><a href=\"https://www.youtube.com/watch?v=8aGhZQkoFbQ\" target=\"_blank\" rel=\"noopener\">Great talk at JSConf on the event loop</a></li>\n<li><a href=\"http://w3c.github.io/IndexedDB/#database-access-task-source\" target=\"_blank\" rel=\"noopener\">IndexedDB</a></li>\n<li><a href=\"https://html.spec.whatwg.org/multipage/timers-and-user-prompts.html#timer-initialisation-steps\" target=\"_blank\" rel=\"noopener\">Living Standard</a></li>\n<li><a href=\"http://www.ecma-international.org/ecma-262/6.0/#sec-performpromisethen\" target=\"_blank\" rel=\"noopener\">ECMAScript® 2015 Language Specification</a></li>\n</ul>\n"},{"layout":"keynote","title":"Python Crawler","subtitle":"Keynote: Python Crawler","iframe":null,"date":"2016-06-27T01:27:35.000Z","author":"","header-img":"post-bg-js-version.jpg","_content":"# Python 爬虫实战\n\n###\n","source":"_posts/Python Crawler.markdown","raw":"---\nlayout:     keynote\ntitle:      \"Python Crawler\"\nsubtitle:   \"Keynote: Python Crawler\"\niframe:     \ndate:  2016-06-27 09:27:35\nauthor:     \"\"\nheader-img: \"post-bg-js-version.jpg\"\ntags:\n    - 数据\n    - Python\n---\n# Python 爬虫实战\n\n###\n","slug":"Python Crawler","published":1,"updated":"2018-01-07T22:28:37.000Z","comments":1,"photos":[],"link":"","_id":"cjc88rlh1000na1jgxzxlffn1","content":"<h1 id=\"Python-爬虫实战\"><a href=\"#Python-爬虫实战\" class=\"headerlink\" title=\"Python 爬虫实战\"></a>Python 爬虫实战</h1><p>###</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Python-爬虫实战\"><a href=\"#Python-爬虫实战\" class=\"headerlink\" title=\"Python 爬虫实战\"></a>Python 爬虫实战</h1><p>###</p>\n"},{"layout":"keynote","title":"Python 爬虫框架 —— Scrapy","subtitle":"python,spider,scrapy","iframe":null,"date":"2016-06-27T01:27:35.000Z","author":"","header-img":"post-bg-js-version.jpg","_content":"\n# Instruction\n\n框架（Framework）是整个或部分系统可重用设计，表现为一组抽象构建及构建间交互的方法；另一种定义认为，框架是可被应用开发者定义的应用骨架。简单讲框架是指对某一种技术进行抽象，提取出共同的特征，将其进行固化，使用框架可以避免重复造轮子，提高开发效率。Scrapy就是根据爬取数据流程设计的一种python爬虫框架\n\n![java-javascript](01.jpg)\n\n - 引擎(Scrapy Engine):用来处理整个系统的数据流，触发事务\n\n - 调度器(Scheduler):抽引擎发过来的请求， 压入队列中，并在引擎再次请求的时候返回。\n\n - 下载器(Downloader):下载网页内容，并将网页内容返回给蜘蛛\n\n - 蜘蛛(Spiders):主要干活的，用来指定特定的域名或网页的解析规则，编写用于分析 `response` 并提取 `item (即获取到的item)`或者额外跟进的URL的类。每个 `spider` 负责处理一个特定(或一些)网站。\n\n - 管道(Item Pipeline):管道内有蜘蛛从网页中抽取的项目，它的主要任务是清晰、验证和存储数据。当页面被蜘蛛解析后，将被发送到项目管道，并经过几个特定程序的次序处理数据。\n\n - 下载器中间件(Downloader Middlewares):scrapy引擎和下载器之间的钩子框架，主要是处理Scrapy引擎与下载器之间的请求及相应。\n\n - 蜘蛛中间件(Spider Middlewares):介于Scrapy引擎和蜘蛛之间的钩子框架，主要工作是处理蜘蛛的响应输入和请求输出。\n\n - 调度中间件(Scheduler Middlewares):介于Scrapy引擎和调度之间的中间件，从Scrapy引擎发送到调度的请求和响应。\n\n在实际的Scrapy应用中，我们一般只能用到三个模块，一个是`Spiders`，这个模块负责定义抓取地址和抓取规则并进行页面抓取；二是`items`，负责定义抓取的数据格式；三是`PipeLine`，负责将抓取到的数据进行处理。\n\n# Scrapy 详解\n\n## Setup Scrapy\n\n在Windows中安装Scrapy时一般会由于 Windows 底层库的问题导致安装比较繁琐，所以建议在 Linux 或 Mac OS 中安装。\n\n使用 pip 安装:\n\n```shell\n  pip install scrapy\n```\n\n安装完成后即可使用 `scrapy` 框架了。\n\n## Getting Start\n\n建立 Scrapy 项目`w3c`:\n\n```shell\n  scrapy startproject w3c\n```\n\n执行成功后在 `w3c/spiders` 下新建爬虫文件 `w3cSpider.py` 项目的目录及结构如下:\n\n![java-javascript](02.jpg)\n\n上述目录中，`setting.py` 负责进行项目配置（如`PipeLine`调用），延迟下载时间设置，代理设置，`user-agent`设置等。以 `PipeLine` 设置为例，抓取的数据后续可能需要多个 `PipeLine` 处理，如先进行数据清洗使用 `DataCleanPipeLine`，然后进行数据保存 `DataSavePipeLine`。\n\n在 `settings.py` 设置这两个 `pipeLine` 的代码如下:\n\n```python\n  ITEM_PIPELINES = {\n    'w3c.pipelines.DataCleanPipeLine':300,\n    'w3c.pipelines.DataSavePipeLine':301,\n  }\n```\n\n上述代码中 `PipeLine` 后的数字代表了执行顺序，数据越小越先执行。`setting` 配置好 `PipeLine` 后就需要进行代码编写，具体的 `PipeLine` 实现在 `pipelines.py` 中实现，一个 `PipeLine` 对应 `pipelines.py` 中一个类，类名和 `setting.py` 中设置的相同。`PipeLine`。\n\nitems.py 用来设置要爬取的数据字段，`scrapy` 借鉴了 `django` 数据模型的思想，将提取的数据组织成一个 `item` 类，类中属性是要爬取的字段。如要爬取一个用户的信息，`items.py` 可以这样写:\n\n```python\nimport scrapy\nclass UserItem(scrapy.Item):\n  name = scrapy.Field()\n  sex = scrapy.Field()\n  age = scrapy.Field()\n```\n\n当从网页中获取用户信息数据后可以将其保存在 `UserItem` 中。\n\n# Scrapy 实战\n\n首先编辑 `items.py` 设置要抓取的数据，本项目是抓取页面中的名称，链接和描述，具体实现如下：\n\n```python\n  import scrapy\n  class W3CItem(scrapy.Item):\n    #define the fields for your item there like:\n    title = scrapy.Field()\n    link = scrapy.Field()\n    desc = scrapy.Field()\n```\n\n然后编写 `w3cSpider.py` ,设置爬取页面的地址及爬取规则:\n\n```python\nimport scrapy\nfrom scrapy.selector import selector\nfrom w3c.items import W3CItem\nclass w3cSpider(scrapy.Spider):\n  name='w3c_spider' #爬虫名称，命令行运行时要用到\n  allowed_domain=['w3school.com.cn']\n  start_urls=[\n    \"<a href=\"http://www.w3school.com.cn/xml/xml_syntax.asp\">http://www.w3school.com.cn/xml/xml_syntax.asp</a>\" #爬取页面地址\n  ]\n  def parse(self,response): #scrapy根据爬取地址发送请求后调用parse 进行数据提取\n    sel=Selector(response)\n    sites=sel.xpath('//div[@id=\"course\"]/ul/li')#使用xpath提取页面信息\n    for site in sites:\n      item = W3CItem()\n      title = site.xpath('a/@title').extract()#提取title\n      link = site.xpath('a/@href').extract()#提取链接\n      desc=site.xpath('a/text()').extract()#提取描述\n\n      item['title']=title[0]#组织item 数据\n      item['link']=link[0]\n      item['desc']=desc[0]\n      yield item #返回item数据给pipeline使用\n\n```\n\n本项目只需要将抓取的数据存储起来即可。所以在 `pipeline.py` 中实现 `settings.py` 设置的 `W3CPipeline`类即可，\n","source":"_posts/Python-Spider-Framework-Scrapy.md","raw":"---\nlayout:     keynote\ntitle:      Python 爬虫框架 —— Scrapy\nsubtitle:   \"python,spider,scrapy\"\niframe:     \ndate:  2016-06-27 09:27:35\nauthor:     \"\"\nheader-img: \"post-bg-js-version.jpg\"\ntags:\n    - Python\n    - Spider\n---\n\n# Instruction\n\n框架（Framework）是整个或部分系统可重用设计，表现为一组抽象构建及构建间交互的方法；另一种定义认为，框架是可被应用开发者定义的应用骨架。简单讲框架是指对某一种技术进行抽象，提取出共同的特征，将其进行固化，使用框架可以避免重复造轮子，提高开发效率。Scrapy就是根据爬取数据流程设计的一种python爬虫框架\n\n![java-javascript](01.jpg)\n\n - 引擎(Scrapy Engine):用来处理整个系统的数据流，触发事务\n\n - 调度器(Scheduler):抽引擎发过来的请求， 压入队列中，并在引擎再次请求的时候返回。\n\n - 下载器(Downloader):下载网页内容，并将网页内容返回给蜘蛛\n\n - 蜘蛛(Spiders):主要干活的，用来指定特定的域名或网页的解析规则，编写用于分析 `response` 并提取 `item (即获取到的item)`或者额外跟进的URL的类。每个 `spider` 负责处理一个特定(或一些)网站。\n\n - 管道(Item Pipeline):管道内有蜘蛛从网页中抽取的项目，它的主要任务是清晰、验证和存储数据。当页面被蜘蛛解析后，将被发送到项目管道，并经过几个特定程序的次序处理数据。\n\n - 下载器中间件(Downloader Middlewares):scrapy引擎和下载器之间的钩子框架，主要是处理Scrapy引擎与下载器之间的请求及相应。\n\n - 蜘蛛中间件(Spider Middlewares):介于Scrapy引擎和蜘蛛之间的钩子框架，主要工作是处理蜘蛛的响应输入和请求输出。\n\n - 调度中间件(Scheduler Middlewares):介于Scrapy引擎和调度之间的中间件，从Scrapy引擎发送到调度的请求和响应。\n\n在实际的Scrapy应用中，我们一般只能用到三个模块，一个是`Spiders`，这个模块负责定义抓取地址和抓取规则并进行页面抓取；二是`items`，负责定义抓取的数据格式；三是`PipeLine`，负责将抓取到的数据进行处理。\n\n# Scrapy 详解\n\n## Setup Scrapy\n\n在Windows中安装Scrapy时一般会由于 Windows 底层库的问题导致安装比较繁琐，所以建议在 Linux 或 Mac OS 中安装。\n\n使用 pip 安装:\n\n```shell\n  pip install scrapy\n```\n\n安装完成后即可使用 `scrapy` 框架了。\n\n## Getting Start\n\n建立 Scrapy 项目`w3c`:\n\n```shell\n  scrapy startproject w3c\n```\n\n执行成功后在 `w3c/spiders` 下新建爬虫文件 `w3cSpider.py` 项目的目录及结构如下:\n\n![java-javascript](02.jpg)\n\n上述目录中，`setting.py` 负责进行项目配置（如`PipeLine`调用），延迟下载时间设置，代理设置，`user-agent`设置等。以 `PipeLine` 设置为例，抓取的数据后续可能需要多个 `PipeLine` 处理，如先进行数据清洗使用 `DataCleanPipeLine`，然后进行数据保存 `DataSavePipeLine`。\n\n在 `settings.py` 设置这两个 `pipeLine` 的代码如下:\n\n```python\n  ITEM_PIPELINES = {\n    'w3c.pipelines.DataCleanPipeLine':300,\n    'w3c.pipelines.DataSavePipeLine':301,\n  }\n```\n\n上述代码中 `PipeLine` 后的数字代表了执行顺序，数据越小越先执行。`setting` 配置好 `PipeLine` 后就需要进行代码编写，具体的 `PipeLine` 实现在 `pipelines.py` 中实现，一个 `PipeLine` 对应 `pipelines.py` 中一个类，类名和 `setting.py` 中设置的相同。`PipeLine`。\n\nitems.py 用来设置要爬取的数据字段，`scrapy` 借鉴了 `django` 数据模型的思想，将提取的数据组织成一个 `item` 类，类中属性是要爬取的字段。如要爬取一个用户的信息，`items.py` 可以这样写:\n\n```python\nimport scrapy\nclass UserItem(scrapy.Item):\n  name = scrapy.Field()\n  sex = scrapy.Field()\n  age = scrapy.Field()\n```\n\n当从网页中获取用户信息数据后可以将其保存在 `UserItem` 中。\n\n# Scrapy 实战\n\n首先编辑 `items.py` 设置要抓取的数据，本项目是抓取页面中的名称，链接和描述，具体实现如下：\n\n```python\n  import scrapy\n  class W3CItem(scrapy.Item):\n    #define the fields for your item there like:\n    title = scrapy.Field()\n    link = scrapy.Field()\n    desc = scrapy.Field()\n```\n\n然后编写 `w3cSpider.py` ,设置爬取页面的地址及爬取规则:\n\n```python\nimport scrapy\nfrom scrapy.selector import selector\nfrom w3c.items import W3CItem\nclass w3cSpider(scrapy.Spider):\n  name='w3c_spider' #爬虫名称，命令行运行时要用到\n  allowed_domain=['w3school.com.cn']\n  start_urls=[\n    \"<a href=\"http://www.w3school.com.cn/xml/xml_syntax.asp\">http://www.w3school.com.cn/xml/xml_syntax.asp</a>\" #爬取页面地址\n  ]\n  def parse(self,response): #scrapy根据爬取地址发送请求后调用parse 进行数据提取\n    sel=Selector(response)\n    sites=sel.xpath('//div[@id=\"course\"]/ul/li')#使用xpath提取页面信息\n    for site in sites:\n      item = W3CItem()\n      title = site.xpath('a/@title').extract()#提取title\n      link = site.xpath('a/@href').extract()#提取链接\n      desc=site.xpath('a/text()').extract()#提取描述\n\n      item['title']=title[0]#组织item 数据\n      item['link']=link[0]\n      item['desc']=desc[0]\n      yield item #返回item数据给pipeline使用\n\n```\n\n本项目只需要将抓取的数据存储起来即可。所以在 `pipeline.py` 中实现 `settings.py` 设置的 `W3CPipeline`类即可，\n","slug":"Python-Spider-Framework-Scrapy","published":1,"updated":"2018-01-07T22:28:37.000Z","comments":1,"photos":[],"link":"","_id":"cjc88rlh2000qa1jg5rp9jsq5","content":"<h1 id=\"Instruction\"><a href=\"#Instruction\" class=\"headerlink\" title=\"Instruction\"></a>Instruction</h1><p>框架（Framework）是整个或部分系统可重用设计，表现为一组抽象构建及构建间交互的方法；另一种定义认为，框架是可被应用开发者定义的应用骨架。简单讲框架是指对某一种技术进行抽象，提取出共同的特征，将其进行固化，使用框架可以避免重复造轮子，提高开发效率。Scrapy就是根据爬取数据流程设计的一种python爬虫框架</p>\n<p><img src=\"01.jpg\" alt=\"java-javascript\"></p>\n<ul>\n<li><p>引擎(Scrapy Engine):用来处理整个系统的数据流，触发事务</p>\n</li>\n<li><p>调度器(Scheduler):抽引擎发过来的请求， 压入队列中，并在引擎再次请求的时候返回。</p>\n</li>\n<li><p>下载器(Downloader):下载网页内容，并将网页内容返回给蜘蛛</p>\n</li>\n<li><p>蜘蛛(Spiders):主要干活的，用来指定特定的域名或网页的解析规则，编写用于分析 <code>response</code> 并提取 <code>item (即获取到的item)</code>或者额外跟进的URL的类。每个 <code>spider</code> 负责处理一个特定(或一些)网站。</p>\n</li>\n<li><p>管道(Item Pipeline):管道内有蜘蛛从网页中抽取的项目，它的主要任务是清晰、验证和存储数据。当页面被蜘蛛解析后，将被发送到项目管道，并经过几个特定程序的次序处理数据。</p>\n</li>\n<li><p>下载器中间件(Downloader Middlewares):scrapy引擎和下载器之间的钩子框架，主要是处理Scrapy引擎与下载器之间的请求及相应。</p>\n</li>\n<li><p>蜘蛛中间件(Spider Middlewares):介于Scrapy引擎和蜘蛛之间的钩子框架，主要工作是处理蜘蛛的响应输入和请求输出。</p>\n</li>\n<li><p>调度中间件(Scheduler Middlewares):介于Scrapy引擎和调度之间的中间件，从Scrapy引擎发送到调度的请求和响应。</p>\n</li>\n</ul>\n<p>在实际的Scrapy应用中，我们一般只能用到三个模块，一个是<code>Spiders</code>，这个模块负责定义抓取地址和抓取规则并进行页面抓取；二是<code>items</code>，负责定义抓取的数据格式；三是<code>PipeLine</code>，负责将抓取到的数据进行处理。</p>\n<h1 id=\"Scrapy-详解\"><a href=\"#Scrapy-详解\" class=\"headerlink\" title=\"Scrapy 详解\"></a>Scrapy 详解</h1><h2 id=\"Setup-Scrapy\"><a href=\"#Setup-Scrapy\" class=\"headerlink\" title=\"Setup Scrapy\"></a>Setup Scrapy</h2><p>在Windows中安装Scrapy时一般会由于 Windows 底层库的问题导致安装比较繁琐，所以建议在 Linux 或 Mac OS 中安装。</p>\n<p>使用 pip 安装:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">pip install scrapy</span><br></pre></td></tr></table></figure>\n<p>安装完成后即可使用 <code>scrapy</code> 框架了。</p>\n<h2 id=\"Getting-Start\"><a href=\"#Getting-Start\" class=\"headerlink\" title=\"Getting Start\"></a>Getting Start</h2><p>建立 Scrapy 项目<code>w3c</code>:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">scrapy startproject w3c</span><br></pre></td></tr></table></figure>\n<p>执行成功后在 <code>w3c/spiders</code> 下新建爬虫文件 <code>w3cSpider.py</code> 项目的目录及结构如下:</p>\n<p><img src=\"02.jpg\" alt=\"java-javascript\"></p>\n<p>上述目录中，<code>setting.py</code> 负责进行项目配置（如<code>PipeLine</code>调用），延迟下载时间设置，代理设置，<code>user-agent</code>设置等。以 <code>PipeLine</code> 设置为例，抓取的数据后续可能需要多个 <code>PipeLine</code> 处理，如先进行数据清洗使用 <code>DataCleanPipeLine</code>，然后进行数据保存 <code>DataSavePipeLine</code>。</p>\n<p>在 <code>settings.py</code> 设置这两个 <code>pipeLine</code> 的代码如下:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">ITEM_PIPELINES = &#123;</span><br><span class=\"line\">  <span class=\"string\">'w3c.pipelines.DataCleanPipeLine'</span>:<span class=\"number\">300</span>,</span><br><span class=\"line\">  <span class=\"string\">'w3c.pipelines.DataSavePipeLine'</span>:<span class=\"number\">301</span>,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上述代码中 <code>PipeLine</code> 后的数字代表了执行顺序，数据越小越先执行。<code>setting</code> 配置好 <code>PipeLine</code> 后就需要进行代码编写，具体的 <code>PipeLine</code> 实现在 <code>pipelines.py</code> 中实现，一个 <code>PipeLine</code> 对应 <code>pipelines.py</code> 中一个类，类名和 <code>setting.py</code> 中设置的相同。<code>PipeLine</code>。</p>\n<p>items.py 用来设置要爬取的数据字段，<code>scrapy</code> 借鉴了 <code>django</code> 数据模型的思想，将提取的数据组织成一个 <code>item</code> 类，类中属性是要爬取的字段。如要爬取一个用户的信息，<code>items.py</code> 可以这样写:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> scrapy</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserItem</span><span class=\"params\">(scrapy.Item)</span>:</span></span><br><span class=\"line\">  name = scrapy.Field()</span><br><span class=\"line\">  sex = scrapy.Field()</span><br><span class=\"line\">  age = scrapy.Field()</span><br></pre></td></tr></table></figure>\n<p>当从网页中获取用户信息数据后可以将其保存在 <code>UserItem</code> 中。</p>\n<h1 id=\"Scrapy-实战\"><a href=\"#Scrapy-实战\" class=\"headerlink\" title=\"Scrapy 实战\"></a>Scrapy 实战</h1><p>首先编辑 <code>items.py</code> 设置要抓取的数据，本项目是抓取页面中的名称，链接和描述，具体实现如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> scrapy</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">W3CItem</span><span class=\"params\">(scrapy.Item)</span>:</span></span><br><span class=\"line\">  <span class=\"comment\">#define the fields for your item there like:</span></span><br><span class=\"line\">  title = scrapy.Field()</span><br><span class=\"line\">  link = scrapy.Field()</span><br><span class=\"line\">  desc = scrapy.Field()</span><br></pre></td></tr></table></figure>\n<p>然后编写 <code>w3cSpider.py</code> ,设置爬取页面的地址及爬取规则:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> scrapy</span><br><span class=\"line\"><span class=\"keyword\">from</span> scrapy.selector <span class=\"keyword\">import</span> selector</span><br><span class=\"line\"><span class=\"keyword\">from</span> w3c.items <span class=\"keyword\">import</span> W3CItem</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">w3cSpider</span><span class=\"params\">(scrapy.Spider)</span>:</span></span><br><span class=\"line\">  name=<span class=\"string\">'w3c_spider'</span> <span class=\"comment\">#爬虫名称，命令行运行时要用到</span></span><br><span class=\"line\">  allowed_domain=[<span class=\"string\">'w3school.com.cn'</span>]</span><br><span class=\"line\">  start_urls=[</span><br><span class=\"line\">    <span class=\"string\">\"&lt;a href=\"</span>http://www.w3school.com.cn/xml/xml_syntax.asp<span class=\"string\">\"&gt;http://www.w3school.com.cn/xml/xml_syntax.asp&lt;/a&gt;\"</span> <span class=\"comment\">#爬取页面地址</span></span><br><span class=\"line\">  ]</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">parse</span><span class=\"params\">(self,response)</span>:</span> <span class=\"comment\">#scrapy根据爬取地址发送请求后调用parse 进行数据提取</span></span><br><span class=\"line\">    sel=Selector(response)</span><br><span class=\"line\">    sites=sel.xpath(<span class=\"string\">'//div[@id=\"course\"]/ul/li'</span>)<span class=\"comment\">#使用xpath提取页面信息</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> site <span class=\"keyword\">in</span> sites:</span><br><span class=\"line\">      item = W3CItem()</span><br><span class=\"line\">      title = site.xpath(<span class=\"string\">'a/@title'</span>).extract()<span class=\"comment\">#提取title</span></span><br><span class=\"line\">      link = site.xpath(<span class=\"string\">'a/@href'</span>).extract()<span class=\"comment\">#提取链接</span></span><br><span class=\"line\">      desc=site.xpath(<span class=\"string\">'a/text()'</span>).extract()<span class=\"comment\">#提取描述</span></span><br><span class=\"line\"></span><br><span class=\"line\">      item[<span class=\"string\">'title'</span>]=title[<span class=\"number\">0</span>]<span class=\"comment\">#组织item 数据</span></span><br><span class=\"line\">      item[<span class=\"string\">'link'</span>]=link[<span class=\"number\">0</span>]</span><br><span class=\"line\">      item[<span class=\"string\">'desc'</span>]=desc[<span class=\"number\">0</span>]</span><br><span class=\"line\">      <span class=\"keyword\">yield</span> item <span class=\"comment\">#返回item数据给pipeline使用</span></span><br></pre></td></tr></table></figure>\n<p>本项目只需要将抓取的数据存储起来即可。所以在 <code>pipeline.py</code> 中实现 <code>settings.py</code> 设置的 <code>W3CPipeline</code>类即可，</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Instruction\"><a href=\"#Instruction\" class=\"headerlink\" title=\"Instruction\"></a>Instruction</h1><p>框架（Framework）是整个或部分系统可重用设计，表现为一组抽象构建及构建间交互的方法；另一种定义认为，框架是可被应用开发者定义的应用骨架。简单讲框架是指对某一种技术进行抽象，提取出共同的特征，将其进行固化，使用框架可以避免重复造轮子，提高开发效率。Scrapy就是根据爬取数据流程设计的一种python爬虫框架</p>\n<p><img src=\"01.jpg\" alt=\"java-javascript\"></p>\n<ul>\n<li><p>引擎(Scrapy Engine):用来处理整个系统的数据流，触发事务</p>\n</li>\n<li><p>调度器(Scheduler):抽引擎发过来的请求， 压入队列中，并在引擎再次请求的时候返回。</p>\n</li>\n<li><p>下载器(Downloader):下载网页内容，并将网页内容返回给蜘蛛</p>\n</li>\n<li><p>蜘蛛(Spiders):主要干活的，用来指定特定的域名或网页的解析规则，编写用于分析 <code>response</code> 并提取 <code>item (即获取到的item)</code>或者额外跟进的URL的类。每个 <code>spider</code> 负责处理一个特定(或一些)网站。</p>\n</li>\n<li><p>管道(Item Pipeline):管道内有蜘蛛从网页中抽取的项目，它的主要任务是清晰、验证和存储数据。当页面被蜘蛛解析后，将被发送到项目管道，并经过几个特定程序的次序处理数据。</p>\n</li>\n<li><p>下载器中间件(Downloader Middlewares):scrapy引擎和下载器之间的钩子框架，主要是处理Scrapy引擎与下载器之间的请求及相应。</p>\n</li>\n<li><p>蜘蛛中间件(Spider Middlewares):介于Scrapy引擎和蜘蛛之间的钩子框架，主要工作是处理蜘蛛的响应输入和请求输出。</p>\n</li>\n<li><p>调度中间件(Scheduler Middlewares):介于Scrapy引擎和调度之间的中间件，从Scrapy引擎发送到调度的请求和响应。</p>\n</li>\n</ul>\n<p>在实际的Scrapy应用中，我们一般只能用到三个模块，一个是<code>Spiders</code>，这个模块负责定义抓取地址和抓取规则并进行页面抓取；二是<code>items</code>，负责定义抓取的数据格式；三是<code>PipeLine</code>，负责将抓取到的数据进行处理。</p>\n<h1 id=\"Scrapy-详解\"><a href=\"#Scrapy-详解\" class=\"headerlink\" title=\"Scrapy 详解\"></a>Scrapy 详解</h1><h2 id=\"Setup-Scrapy\"><a href=\"#Setup-Scrapy\" class=\"headerlink\" title=\"Setup Scrapy\"></a>Setup Scrapy</h2><p>在Windows中安装Scrapy时一般会由于 Windows 底层库的问题导致安装比较繁琐，所以建议在 Linux 或 Mac OS 中安装。</p>\n<p>使用 pip 安装:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">pip install scrapy</span><br></pre></td></tr></table></figure>\n<p>安装完成后即可使用 <code>scrapy</code> 框架了。</p>\n<h2 id=\"Getting-Start\"><a href=\"#Getting-Start\" class=\"headerlink\" title=\"Getting Start\"></a>Getting Start</h2><p>建立 Scrapy 项目<code>w3c</code>:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">scrapy startproject w3c</span><br></pre></td></tr></table></figure>\n<p>执行成功后在 <code>w3c/spiders</code> 下新建爬虫文件 <code>w3cSpider.py</code> 项目的目录及结构如下:</p>\n<p><img src=\"02.jpg\" alt=\"java-javascript\"></p>\n<p>上述目录中，<code>setting.py</code> 负责进行项目配置（如<code>PipeLine</code>调用），延迟下载时间设置，代理设置，<code>user-agent</code>设置等。以 <code>PipeLine</code> 设置为例，抓取的数据后续可能需要多个 <code>PipeLine</code> 处理，如先进行数据清洗使用 <code>DataCleanPipeLine</code>，然后进行数据保存 <code>DataSavePipeLine</code>。</p>\n<p>在 <code>settings.py</code> 设置这两个 <code>pipeLine</code> 的代码如下:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">ITEM_PIPELINES = &#123;</span><br><span class=\"line\">  <span class=\"string\">'w3c.pipelines.DataCleanPipeLine'</span>:<span class=\"number\">300</span>,</span><br><span class=\"line\">  <span class=\"string\">'w3c.pipelines.DataSavePipeLine'</span>:<span class=\"number\">301</span>,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上述代码中 <code>PipeLine</code> 后的数字代表了执行顺序，数据越小越先执行。<code>setting</code> 配置好 <code>PipeLine</code> 后就需要进行代码编写，具体的 <code>PipeLine</code> 实现在 <code>pipelines.py</code> 中实现，一个 <code>PipeLine</code> 对应 <code>pipelines.py</code> 中一个类，类名和 <code>setting.py</code> 中设置的相同。<code>PipeLine</code>。</p>\n<p>items.py 用来设置要爬取的数据字段，<code>scrapy</code> 借鉴了 <code>django</code> 数据模型的思想，将提取的数据组织成一个 <code>item</code> 类，类中属性是要爬取的字段。如要爬取一个用户的信息，<code>items.py</code> 可以这样写:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> scrapy</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserItem</span><span class=\"params\">(scrapy.Item)</span>:</span></span><br><span class=\"line\">  name = scrapy.Field()</span><br><span class=\"line\">  sex = scrapy.Field()</span><br><span class=\"line\">  age = scrapy.Field()</span><br></pre></td></tr></table></figure>\n<p>当从网页中获取用户信息数据后可以将其保存在 <code>UserItem</code> 中。</p>\n<h1 id=\"Scrapy-实战\"><a href=\"#Scrapy-实战\" class=\"headerlink\" title=\"Scrapy 实战\"></a>Scrapy 实战</h1><p>首先编辑 <code>items.py</code> 设置要抓取的数据，本项目是抓取页面中的名称，链接和描述，具体实现如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> scrapy</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">W3CItem</span><span class=\"params\">(scrapy.Item)</span>:</span></span><br><span class=\"line\">  <span class=\"comment\">#define the fields for your item there like:</span></span><br><span class=\"line\">  title = scrapy.Field()</span><br><span class=\"line\">  link = scrapy.Field()</span><br><span class=\"line\">  desc = scrapy.Field()</span><br></pre></td></tr></table></figure>\n<p>然后编写 <code>w3cSpider.py</code> ,设置爬取页面的地址及爬取规则:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> scrapy</span><br><span class=\"line\"><span class=\"keyword\">from</span> scrapy.selector <span class=\"keyword\">import</span> selector</span><br><span class=\"line\"><span class=\"keyword\">from</span> w3c.items <span class=\"keyword\">import</span> W3CItem</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">w3cSpider</span><span class=\"params\">(scrapy.Spider)</span>:</span></span><br><span class=\"line\">  name=<span class=\"string\">'w3c_spider'</span> <span class=\"comment\">#爬虫名称，命令行运行时要用到</span></span><br><span class=\"line\">  allowed_domain=[<span class=\"string\">'w3school.com.cn'</span>]</span><br><span class=\"line\">  start_urls=[</span><br><span class=\"line\">    <span class=\"string\">\"&lt;a href=\"</span>http://www.w3school.com.cn/xml/xml_syntax.asp<span class=\"string\">\"&gt;http://www.w3school.com.cn/xml/xml_syntax.asp&lt;/a&gt;\"</span> <span class=\"comment\">#爬取页面地址</span></span><br><span class=\"line\">  ]</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">parse</span><span class=\"params\">(self,response)</span>:</span> <span class=\"comment\">#scrapy根据爬取地址发送请求后调用parse 进行数据提取</span></span><br><span class=\"line\">    sel=Selector(response)</span><br><span class=\"line\">    sites=sel.xpath(<span class=\"string\">'//div[@id=\"course\"]/ul/li'</span>)<span class=\"comment\">#使用xpath提取页面信息</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> site <span class=\"keyword\">in</span> sites:</span><br><span class=\"line\">      item = W3CItem()</span><br><span class=\"line\">      title = site.xpath(<span class=\"string\">'a/@title'</span>).extract()<span class=\"comment\">#提取title</span></span><br><span class=\"line\">      link = site.xpath(<span class=\"string\">'a/@href'</span>).extract()<span class=\"comment\">#提取链接</span></span><br><span class=\"line\">      desc=site.xpath(<span class=\"string\">'a/text()'</span>).extract()<span class=\"comment\">#提取描述</span></span><br><span class=\"line\"></span><br><span class=\"line\">      item[<span class=\"string\">'title'</span>]=title[<span class=\"number\">0</span>]<span class=\"comment\">#组织item 数据</span></span><br><span class=\"line\">      item[<span class=\"string\">'link'</span>]=link[<span class=\"number\">0</span>]</span><br><span class=\"line\">      item[<span class=\"string\">'desc'</span>]=desc[<span class=\"number\">0</span>]</span><br><span class=\"line\">      <span class=\"keyword\">yield</span> item <span class=\"comment\">#返回item数据给pipeline使用</span></span><br></pre></td></tr></table></figure>\n<p>本项目只需要将抓取的数据存储起来即可。所以在 <code>pipeline.py</code> 中实现 <code>settings.py</code> 设置的 <code>W3CPipeline</code>类即可，</p>\n"},{"layout":"keynote","title":"Transitioning from Server to Client Side Web Development with Angular 2","subtitle":"Keynote: JavaScript Modularization Journey","iframe":null,"date":"2016-06-27T01:27:35.000Z","author":"","header-img":"post-bg-js-version.jpg","_content":"# Transitioning from Server to Client Side Web Development with Angular 2\n\nOriginal:   http://angularshowcase.github.io/ng2-bootstrap-sbadmin/slides/20151110/assets/player/KeynoteDHTMLPlayer.html#0\n\n## Part 1:History\n\n### Brief history of Dynamic Web\n\n  - 1993 : Someone somewhere uses C to customize the HTML devlivered to a brower.Yahoo is born .Perl,ColdFusion,PHP(all via CGL) follow.\n\n  - 1996 : Iframes allow partial page to be loaded via parameterized URL.\n\n  - 1998 : HTML4/DHTML - JS manipulating DOM and dynamic style\n\n  - 2002 : XHR/Ajax opens door from \"single page apps\".\n\n  - 2006 : JS & CSS frameworks emerge,large apps become hard to maintain.\n\n  - 2010 : MVC(ExtJS,Angular) addresses separation of concerns.Unit testing and TDD emerges and grows.\n\n  - 2013 : Asm/WebAsm-based languages address JS shortcomings.\n\n  - 2015 : First frameworks written in type safe languages\n\n### Net Effect\n\n  - Web finally \"Just another native environment\".\n\n  - Server does not differentiate by client - Same REST everywhere,server not responsible for view.\n\n  - Web developers avoid politics of fragile server builds,work with tooling and workflows tuned to their productivity instead of some other team's\n\n  - Faster,more reliable web development due to build process and type safety.\n\n### Evolution to GUI\n\n\n\n\n## Part2: Generic Architecture\n\n---------------- Thin vs. Fat Client --------------------\n\n### Thin\n\n  - A thin client wholly relies on the server for client view management.\n\n  - A server session forms the context by which views progress\n\n  - Consider a six-page wizard:each view sequenced and sent by server.\n\n  - Network transaction boundary on every view change.\n\n  - Scaling is difficult with server-based sessions since a cluster node reboot drops the session and in-flight user work.Requires session replication,rerouting requests on the fly,etc.\n\n  - Fat(Standalone) client is one which only communicates changes to model.\n\n  - In out wizard example,user has expectation of losing data if their device reboots.Data that is submitted at end of wizard is data from every page.\n\n  - Network transaction boundary is on reads or writes to model.\n\n  - REST models CRUD via POST,PUT,GET,DELETE.Simple\n\n  - Scaling is simple,any server endpoint can accept transactional requests without reference to previous transactions.\n\n## Authentication (身份认证)\n\n - Transactional systems are always based on the credentials of a requesting principal.One can't unlock or start a vehicle without a key.The key is the credentials\n\n - Computers systems are not different.A credential identifies a transactional counterparty.\n\n - For a human,a credential might be a username and password.For inter-computer communication,we might use a public/private key pair.\n\n - In any case,we have to decide who is presenting a command before deciding what they can do.\n\n## Authorization (授权)\n\n - In the example of a vehicle,the key generally grants complete operational access to the vehicle.Some vehicles have \"valet keys\" with downgraded access\n\n - Such access levels delineate authorizations or permissions.\n\n - Now scale permissions to the level of 100k people in a large organization.Example:All members may be granted office access,but each to certain campuses.Only a few members may have access ti payroll,etc.There can easily be hundreds of thousands of permissions once CRUD aspects of each one are captured.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ns\n","source":"_posts/Transitioning from server to client side web development with angular2.markdown","raw":"---\nlayout:     keynote\ntitle:      \"Transitioning from Server to Client Side Web Development with Angular 2\"\nsubtitle:   \"Keynote: JavaScript Modularization Journey\"\niframe:     \ndate:  2016-06-27 09:27:35\nauthor:     \"\"\nheader-img: \"post-bg-js-version.jpg\"\ntags:\n    - 前端开发\n    - Angular2\n---\n# Transitioning from Server to Client Side Web Development with Angular 2\n\nOriginal:   http://angularshowcase.github.io/ng2-bootstrap-sbadmin/slides/20151110/assets/player/KeynoteDHTMLPlayer.html#0\n\n## Part 1:History\n\n### Brief history of Dynamic Web\n\n  - 1993 : Someone somewhere uses C to customize the HTML devlivered to a brower.Yahoo is born .Perl,ColdFusion,PHP(all via CGL) follow.\n\n  - 1996 : Iframes allow partial page to be loaded via parameterized URL.\n\n  - 1998 : HTML4/DHTML - JS manipulating DOM and dynamic style\n\n  - 2002 : XHR/Ajax opens door from \"single page apps\".\n\n  - 2006 : JS & CSS frameworks emerge,large apps become hard to maintain.\n\n  - 2010 : MVC(ExtJS,Angular) addresses separation of concerns.Unit testing and TDD emerges and grows.\n\n  - 2013 : Asm/WebAsm-based languages address JS shortcomings.\n\n  - 2015 : First frameworks written in type safe languages\n\n### Net Effect\n\n  - Web finally \"Just another native environment\".\n\n  - Server does not differentiate by client - Same REST everywhere,server not responsible for view.\n\n  - Web developers avoid politics of fragile server builds,work with tooling and workflows tuned to their productivity instead of some other team's\n\n  - Faster,more reliable web development due to build process and type safety.\n\n### Evolution to GUI\n\n\n\n\n## Part2: Generic Architecture\n\n---------------- Thin vs. Fat Client --------------------\n\n### Thin\n\n  - A thin client wholly relies on the server for client view management.\n\n  - A server session forms the context by which views progress\n\n  - Consider a six-page wizard:each view sequenced and sent by server.\n\n  - Network transaction boundary on every view change.\n\n  - Scaling is difficult with server-based sessions since a cluster node reboot drops the session and in-flight user work.Requires session replication,rerouting requests on the fly,etc.\n\n  - Fat(Standalone) client is one which only communicates changes to model.\n\n  - In out wizard example,user has expectation of losing data if their device reboots.Data that is submitted at end of wizard is data from every page.\n\n  - Network transaction boundary is on reads or writes to model.\n\n  - REST models CRUD via POST,PUT,GET,DELETE.Simple\n\n  - Scaling is simple,any server endpoint can accept transactional requests without reference to previous transactions.\n\n## Authentication (身份认证)\n\n - Transactional systems are always based on the credentials of a requesting principal.One can't unlock or start a vehicle without a key.The key is the credentials\n\n - Computers systems are not different.A credential identifies a transactional counterparty.\n\n - For a human,a credential might be a username and password.For inter-computer communication,we might use a public/private key pair.\n\n - In any case,we have to decide who is presenting a command before deciding what they can do.\n\n## Authorization (授权)\n\n - In the example of a vehicle,the key generally grants complete operational access to the vehicle.Some vehicles have \"valet keys\" with downgraded access\n\n - Such access levels delineate authorizations or permissions.\n\n - Now scale permissions to the level of 100k people in a large organization.Example:All members may be granted office access,but each to certain campuses.Only a few members may have access ti payroll,etc.There can easily be hundreds of thousands of permissions once CRUD aspects of each one are captured.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ns\n","slug":"Transitioning from server to client side web development with angular2","published":1,"updated":"2018-01-07T22:28:37.000Z","comments":1,"photos":[],"link":"","_id":"cjc88rlh4000ra1jgp64134zi","content":"<h1 id=\"Transitioning-from-Server-to-Client-Side-Web-Development-with-Angular-2\"><a href=\"#Transitioning-from-Server-to-Client-Side-Web-Development-with-Angular-2\" class=\"headerlink\" title=\"Transitioning from Server to Client Side Web Development with Angular 2\"></a>Transitioning from Server to Client Side Web Development with Angular 2</h1><p>Original:   <a href=\"http://angularshowcase.github.io/ng2-bootstrap-sbadmin/slides/20151110/assets/player/KeynoteDHTMLPlayer.html#0\" target=\"_blank\" rel=\"noopener\">http://angularshowcase.github.io/ng2-bootstrap-sbadmin/slides/20151110/assets/player/KeynoteDHTMLPlayer.html#0</a></p>\n<h2 id=\"Part-1-History\"><a href=\"#Part-1-History\" class=\"headerlink\" title=\"Part 1:History\"></a>Part 1:History</h2><h3 id=\"Brief-history-of-Dynamic-Web\"><a href=\"#Brief-history-of-Dynamic-Web\" class=\"headerlink\" title=\"Brief history of Dynamic Web\"></a>Brief history of Dynamic Web</h3><ul>\n<li><p>1993 : Someone somewhere uses C to customize the HTML devlivered to a brower.Yahoo is born .Perl,ColdFusion,PHP(all via CGL) follow.</p>\n</li>\n<li><p>1996 : Iframes allow partial page to be loaded via parameterized URL.</p>\n</li>\n<li><p>1998 : HTML4/DHTML - JS manipulating DOM and dynamic style</p>\n</li>\n<li><p>2002 : XHR/Ajax opens door from “single page apps”.</p>\n</li>\n<li><p>2006 : JS &amp; CSS frameworks emerge,large apps become hard to maintain.</p>\n</li>\n<li><p>2010 : MVC(ExtJS,Angular) addresses separation of concerns.Unit testing and TDD emerges and grows.</p>\n</li>\n<li><p>2013 : Asm/WebAsm-based languages address JS shortcomings.</p>\n</li>\n<li><p>2015 : First frameworks written in type safe languages</p>\n</li>\n</ul>\n<h3 id=\"Net-Effect\"><a href=\"#Net-Effect\" class=\"headerlink\" title=\"Net Effect\"></a>Net Effect</h3><ul>\n<li><p>Web finally “Just another native environment”.</p>\n</li>\n<li><p>Server does not differentiate by client - Same REST everywhere,server not responsible for view.</p>\n</li>\n<li><p>Web developers avoid politics of fragile server builds,work with tooling and workflows tuned to their productivity instead of some other team’s</p>\n</li>\n<li><p>Faster,more reliable web development due to build process and type safety.</p>\n</li>\n</ul>\n<h3 id=\"Evolution-to-GUI\"><a href=\"#Evolution-to-GUI\" class=\"headerlink\" title=\"Evolution to GUI\"></a>Evolution to GUI</h3><h2 id=\"Part2-Generic-Architecture\"><a href=\"#Part2-Generic-Architecture\" class=\"headerlink\" title=\"Part2: Generic Architecture\"></a>Part2: Generic Architecture</h2><p>—————- Thin vs. Fat Client ——————–</p>\n<h3 id=\"Thin\"><a href=\"#Thin\" class=\"headerlink\" title=\"Thin\"></a>Thin</h3><ul>\n<li><p>A thin client wholly relies on the server for client view management.</p>\n</li>\n<li><p>A server session forms the context by which views progress</p>\n</li>\n<li><p>Consider a six-page wizard:each view sequenced and sent by server.</p>\n</li>\n<li><p>Network transaction boundary on every view change.</p>\n</li>\n<li><p>Scaling is difficult with server-based sessions since a cluster node reboot drops the session and in-flight user work.Requires session replication,rerouting requests on the fly,etc.</p>\n</li>\n<li><p>Fat(Standalone) client is one which only communicates changes to model.</p>\n</li>\n<li><p>In out wizard example,user has expectation of losing data if their device reboots.Data that is submitted at end of wizard is data from every page.</p>\n</li>\n<li><p>Network transaction boundary is on reads or writes to model.</p>\n</li>\n<li><p>REST models CRUD via POST,PUT,GET,DELETE.Simple</p>\n</li>\n<li><p>Scaling is simple,any server endpoint can accept transactional requests without reference to previous transactions.</p>\n</li>\n</ul>\n<h2 id=\"Authentication-身份认证\"><a href=\"#Authentication-身份认证\" class=\"headerlink\" title=\"Authentication (身份认证)\"></a>Authentication (身份认证)</h2><ul>\n<li><p>Transactional systems are always based on the credentials of a requesting principal.One can’t unlock or start a vehicle without a key.The key is the credentials</p>\n</li>\n<li><p>Computers systems are not different.A credential identifies a transactional counterparty.</p>\n</li>\n<li><p>For a human,a credential might be a username and password.For inter-computer communication,we might use a public/private key pair.</p>\n</li>\n<li><p>In any case,we have to decide who is presenting a command before deciding what they can do.</p>\n</li>\n</ul>\n<h2 id=\"Authorization-授权\"><a href=\"#Authorization-授权\" class=\"headerlink\" title=\"Authorization (授权)\"></a>Authorization (授权)</h2><ul>\n<li><p>In the example of a vehicle,the key generally grants complete operational access to the vehicle.Some vehicles have “valet keys” with downgraded access</p>\n</li>\n<li><p>Such access levels delineate authorizations or permissions.</p>\n</li>\n<li><p>Now scale permissions to the level of 100k people in a large organization.Example:All members may be granted office access,but each to certain campuses.Only a few members may have access ti payroll,etc.There can easily be hundreds of thousands of permissions once CRUD aspects of each one are captured.</p>\n</li>\n</ul>\n<p>s</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Transitioning-from-Server-to-Client-Side-Web-Development-with-Angular-2\"><a href=\"#Transitioning-from-Server-to-Client-Side-Web-Development-with-Angular-2\" class=\"headerlink\" title=\"Transitioning from Server to Client Side Web Development with Angular 2\"></a>Transitioning from Server to Client Side Web Development with Angular 2</h1><p>Original:   <a href=\"http://angularshowcase.github.io/ng2-bootstrap-sbadmin/slides/20151110/assets/player/KeynoteDHTMLPlayer.html#0\" target=\"_blank\" rel=\"noopener\">http://angularshowcase.github.io/ng2-bootstrap-sbadmin/slides/20151110/assets/player/KeynoteDHTMLPlayer.html#0</a></p>\n<h2 id=\"Part-1-History\"><a href=\"#Part-1-History\" class=\"headerlink\" title=\"Part 1:History\"></a>Part 1:History</h2><h3 id=\"Brief-history-of-Dynamic-Web\"><a href=\"#Brief-history-of-Dynamic-Web\" class=\"headerlink\" title=\"Brief history of Dynamic Web\"></a>Brief history of Dynamic Web</h3><ul>\n<li><p>1993 : Someone somewhere uses C to customize the HTML devlivered to a brower.Yahoo is born .Perl,ColdFusion,PHP(all via CGL) follow.</p>\n</li>\n<li><p>1996 : Iframes allow partial page to be loaded via parameterized URL.</p>\n</li>\n<li><p>1998 : HTML4/DHTML - JS manipulating DOM and dynamic style</p>\n</li>\n<li><p>2002 : XHR/Ajax opens door from “single page apps”.</p>\n</li>\n<li><p>2006 : JS &amp; CSS frameworks emerge,large apps become hard to maintain.</p>\n</li>\n<li><p>2010 : MVC(ExtJS,Angular) addresses separation of concerns.Unit testing and TDD emerges and grows.</p>\n</li>\n<li><p>2013 : Asm/WebAsm-based languages address JS shortcomings.</p>\n</li>\n<li><p>2015 : First frameworks written in type safe languages</p>\n</li>\n</ul>\n<h3 id=\"Net-Effect\"><a href=\"#Net-Effect\" class=\"headerlink\" title=\"Net Effect\"></a>Net Effect</h3><ul>\n<li><p>Web finally “Just another native environment”.</p>\n</li>\n<li><p>Server does not differentiate by client - Same REST everywhere,server not responsible for view.</p>\n</li>\n<li><p>Web developers avoid politics of fragile server builds,work with tooling and workflows tuned to their productivity instead of some other team’s</p>\n</li>\n<li><p>Faster,more reliable web development due to build process and type safety.</p>\n</li>\n</ul>\n<h3 id=\"Evolution-to-GUI\"><a href=\"#Evolution-to-GUI\" class=\"headerlink\" title=\"Evolution to GUI\"></a>Evolution to GUI</h3><h2 id=\"Part2-Generic-Architecture\"><a href=\"#Part2-Generic-Architecture\" class=\"headerlink\" title=\"Part2: Generic Architecture\"></a>Part2: Generic Architecture</h2><p>—————- Thin vs. Fat Client ——————–</p>\n<h3 id=\"Thin\"><a href=\"#Thin\" class=\"headerlink\" title=\"Thin\"></a>Thin</h3><ul>\n<li><p>A thin client wholly relies on the server for client view management.</p>\n</li>\n<li><p>A server session forms the context by which views progress</p>\n</li>\n<li><p>Consider a six-page wizard:each view sequenced and sent by server.</p>\n</li>\n<li><p>Network transaction boundary on every view change.</p>\n</li>\n<li><p>Scaling is difficult with server-based sessions since a cluster node reboot drops the session and in-flight user work.Requires session replication,rerouting requests on the fly,etc.</p>\n</li>\n<li><p>Fat(Standalone) client is one which only communicates changes to model.</p>\n</li>\n<li><p>In out wizard example,user has expectation of losing data if their device reboots.Data that is submitted at end of wizard is data from every page.</p>\n</li>\n<li><p>Network transaction boundary is on reads or writes to model.</p>\n</li>\n<li><p>REST models CRUD via POST,PUT,GET,DELETE.Simple</p>\n</li>\n<li><p>Scaling is simple,any server endpoint can accept transactional requests without reference to previous transactions.</p>\n</li>\n</ul>\n<h2 id=\"Authentication-身份认证\"><a href=\"#Authentication-身份认证\" class=\"headerlink\" title=\"Authentication (身份认证)\"></a>Authentication (身份认证)</h2><ul>\n<li><p>Transactional systems are always based on the credentials of a requesting principal.One can’t unlock or start a vehicle without a key.The key is the credentials</p>\n</li>\n<li><p>Computers systems are not different.A credential identifies a transactional counterparty.</p>\n</li>\n<li><p>For a human,a credential might be a username and password.For inter-computer communication,we might use a public/private key pair.</p>\n</li>\n<li><p>In any case,we have to decide who is presenting a command before deciding what they can do.</p>\n</li>\n</ul>\n<h2 id=\"Authorization-授权\"><a href=\"#Authorization-授权\" class=\"headerlink\" title=\"Authorization (授权)\"></a>Authorization (授权)</h2><ul>\n<li><p>In the example of a vehicle,the key generally grants complete operational access to the vehicle.Some vehicles have “valet keys” with downgraded access</p>\n</li>\n<li><p>Such access levels delineate authorizations or permissions.</p>\n</li>\n<li><p>Now scale permissions to the level of 100k people in a large organization.Example:All members may be granted office access,but each to certain campuses.Only a few members may have access ti payroll,etc.There can easily be hundreds of thousands of permissions once CRUD aspects of each one are captured.</p>\n</li>\n</ul>\n<p>s</p>\n"},{"layout":"keynote","title":"Example Post using Keynote Layout","subtitle":"Keynote: JavaScript Modularization Journey","iframe":"http://huangxuan.me/js-module-7day/","date":"2016-06-27T01:27:35.000Z","author":"Hux","header-img":"post-bg-js-version.jpg","_content":"\n\n> 下滑这里查看更多内容\n\n7月9日，我在公司内部进行了名为「JavaScript 模块化七日谈」分享，并将该 Slides 分享到了微博上。出乎意料地，这篇微博先后被 @JS小组 @尤小右 @寸志 等近 200 人转发，阅读达到 10w，获得了还不错的评价。\n\n于是，我决定将它重新发到我的博客上，并为它专门制作了适用于 Keynote 展示文稿的新布局。它能自动根据屏幕大小/旋转以一定比例填充屏幕，你也可以直接点击下方链接在新页面打开，来获得更好的、沉浸式的全屏体验\n\n\n### [Watch Slides →](http://huangxuan.me/js-module-7day)\n\n<img src=\"http://huangxuan.me/js-module-7day/attach/qrcode.png\" width=\"350\" height=\"350\"/>\n\n<small class=\"img-hint\">你也可以通过扫描二维码在手机上观看</small>\n\n\n这个 Web Slides 开源在[我的 Github 上](https://github.com/Huxpro/js-module-7day)，欢迎你帮助我完善这个展示文稿，你可以给我提 issue，可以 fork & pull request。如果它能帮助到你了，希望你还能不吝啬 star 一下这个项目\n\n\n### Catalog\n\n- 第一日 上古时期 ***Module?*** 从设计模式说起\n- 第二日 石器时代 ***Script Loader*** 只有封装性可不够，我们还需要加载\n- 第三日 蒸汽朋克 ***Module Loader*** 模块化架构的工业革命\n- 第四日 号角吹响 ***CommonJS*** 征服世界的第一步是跳出浏览器\n- 第五日 双塔奇兵 ***AMD/CMD*** 浏览器环境模块化方案\n- 第六日 精灵宝钻 ***Browserify/Webpack*** 大势所趋，去掉这层包裹！\n- 第七日 王者归来 ***ES6 Module*** 最后的战役\n\n### Thanks\n\n[Reveal.js](http://lab.hakim.se/reveal-js)\n","source":"_posts/js-module-7day.markdown","raw":"---\nlayout:     keynote\ntitle:      \"Example Post using Keynote Layout\"\nsubtitle:   \"Keynote: JavaScript Modularization Journey\"\niframe:     \"http://huangxuan.me/js-module-7day/\"\ndate:  2016-06-27 09:27:35\nauthor:     \"Hux\"\nheader-img: \"post-bg-js-version.jpg\"\ntags:\n    - 前端开发\n    - JavaScript\n---\n\n\n> 下滑这里查看更多内容\n\n7月9日，我在公司内部进行了名为「JavaScript 模块化七日谈」分享，并将该 Slides 分享到了微博上。出乎意料地，这篇微博先后被 @JS小组 @尤小右 @寸志 等近 200 人转发，阅读达到 10w，获得了还不错的评价。\n\n于是，我决定将它重新发到我的博客上，并为它专门制作了适用于 Keynote 展示文稿的新布局。它能自动根据屏幕大小/旋转以一定比例填充屏幕，你也可以直接点击下方链接在新页面打开，来获得更好的、沉浸式的全屏体验\n\n\n### [Watch Slides →](http://huangxuan.me/js-module-7day)\n\n<img src=\"http://huangxuan.me/js-module-7day/attach/qrcode.png\" width=\"350\" height=\"350\"/>\n\n<small class=\"img-hint\">你也可以通过扫描二维码在手机上观看</small>\n\n\n这个 Web Slides 开源在[我的 Github 上](https://github.com/Huxpro/js-module-7day)，欢迎你帮助我完善这个展示文稿，你可以给我提 issue，可以 fork & pull request。如果它能帮助到你了，希望你还能不吝啬 star 一下这个项目\n\n\n### Catalog\n\n- 第一日 上古时期 ***Module?*** 从设计模式说起\n- 第二日 石器时代 ***Script Loader*** 只有封装性可不够，我们还需要加载\n- 第三日 蒸汽朋克 ***Module Loader*** 模块化架构的工业革命\n- 第四日 号角吹响 ***CommonJS*** 征服世界的第一步是跳出浏览器\n- 第五日 双塔奇兵 ***AMD/CMD*** 浏览器环境模块化方案\n- 第六日 精灵宝钻 ***Browserify/Webpack*** 大势所趋，去掉这层包裹！\n- 第七日 王者归来 ***ES6 Module*** 最后的战役\n\n### Thanks\n\n[Reveal.js](http://lab.hakim.se/reveal-js)\n","slug":"js-module-7day","published":1,"updated":"2018-01-07T22:28:37.000Z","comments":1,"photos":[],"link":"","_id":"cjc88rlh5000ta1jgtxpssupd","content":"<blockquote>\n<p>下滑这里查看更多内容</p>\n</blockquote>\n<p>7月9日，我在公司内部进行了名为「JavaScript 模块化七日谈」分享，并将该 Slides 分享到了微博上。出乎意料地，这篇微博先后被 @JS小组 @尤小右 @寸志 等近 200 人转发，阅读达到 10w，获得了还不错的评价。</p>\n<p>于是，我决定将它重新发到我的博客上，并为它专门制作了适用于 Keynote 展示文稿的新布局。它能自动根据屏幕大小/旋转以一定比例填充屏幕，你也可以直接点击下方链接在新页面打开，来获得更好的、沉浸式的全屏体验</p>\n<h3 id=\"Watch-Slides-→\"><a href=\"#Watch-Slides-→\" class=\"headerlink\" title=\"Watch Slides →\"></a><a href=\"http://huangxuan.me/js-module-7day\" target=\"_blank\" rel=\"noopener\">Watch Slides →</a></h3><p><img src=\"http://huangxuan.me/js-module-7day/attach/qrcode.png\" width=\"350\" height=\"350\"></p>\n<p><small class=\"img-hint\">你也可以通过扫描二维码在手机上观看</small></p>\n<p>这个 Web Slides 开源在<a href=\"https://github.com/Huxpro/js-module-7day\" target=\"_blank\" rel=\"noopener\">我的 Github 上</a>，欢迎你帮助我完善这个展示文稿，你可以给我提 issue，可以 fork &amp; pull request。如果它能帮助到你了，希望你还能不吝啬 star 一下这个项目</p>\n<h3 id=\"Catalog\"><a href=\"#Catalog\" class=\"headerlink\" title=\"Catalog\"></a>Catalog</h3><ul>\n<li>第一日 上古时期 <strong><em>Module?</em></strong> 从设计模式说起</li>\n<li>第二日 石器时代 <strong><em>Script Loader</em></strong> 只有封装性可不够，我们还需要加载</li>\n<li>第三日 蒸汽朋克 <strong><em>Module Loader</em></strong> 模块化架构的工业革命</li>\n<li>第四日 号角吹响 <strong><em>CommonJS</em></strong> 征服世界的第一步是跳出浏览器</li>\n<li>第五日 双塔奇兵 <strong><em>AMD/CMD</em></strong> 浏览器环境模块化方案</li>\n<li>第六日 精灵宝钻 <strong><em>Browserify/Webpack</em></strong> 大势所趋，去掉这层包裹！</li>\n<li>第七日 王者归来 <strong><em>ES6 Module</em></strong> 最后的战役</li>\n</ul>\n<h3 id=\"Thanks\"><a href=\"#Thanks\" class=\"headerlink\" title=\"Thanks\"></a>Thanks</h3><p><a href=\"http://lab.hakim.se/reveal-js\" target=\"_blank\" rel=\"noopener\">Reveal.js</a></p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>下滑这里查看更多内容</p>\n</blockquote>\n<p>7月9日，我在公司内部进行了名为「JavaScript 模块化七日谈」分享，并将该 Slides 分享到了微博上。出乎意料地，这篇微博先后被 @JS小组 @尤小右 @寸志 等近 200 人转发，阅读达到 10w，获得了还不错的评价。</p>\n<p>于是，我决定将它重新发到我的博客上，并为它专门制作了适用于 Keynote 展示文稿的新布局。它能自动根据屏幕大小/旋转以一定比例填充屏幕，你也可以直接点击下方链接在新页面打开，来获得更好的、沉浸式的全屏体验</p>\n<h3 id=\"Watch-Slides-→\"><a href=\"#Watch-Slides-→\" class=\"headerlink\" title=\"Watch Slides →\"></a><a href=\"http://huangxuan.me/js-module-7day\" target=\"_blank\" rel=\"noopener\">Watch Slides →</a></h3><p><img src=\"http://huangxuan.me/js-module-7day/attach/qrcode.png\" width=\"350\" height=\"350\"></p>\n<p><small class=\"img-hint\">你也可以通过扫描二维码在手机上观看</small></p>\n<p>这个 Web Slides 开源在<a href=\"https://github.com/Huxpro/js-module-7day\" target=\"_blank\" rel=\"noopener\">我的 Github 上</a>，欢迎你帮助我完善这个展示文稿，你可以给我提 issue，可以 fork &amp; pull request。如果它能帮助到你了，希望你还能不吝啬 star 一下这个项目</p>\n<h3 id=\"Catalog\"><a href=\"#Catalog\" class=\"headerlink\" title=\"Catalog\"></a>Catalog</h3><ul>\n<li>第一日 上古时期 <strong><em>Module?</em></strong> 从设计模式说起</li>\n<li>第二日 石器时代 <strong><em>Script Loader</em></strong> 只有封装性可不够，我们还需要加载</li>\n<li>第三日 蒸汽朋克 <strong><em>Module Loader</em></strong> 模块化架构的工业革命</li>\n<li>第四日 号角吹响 <strong><em>CommonJS</em></strong> 征服世界的第一步是跳出浏览器</li>\n<li>第五日 双塔奇兵 <strong><em>AMD/CMD</em></strong> 浏览器环境模块化方案</li>\n<li>第六日 精灵宝钻 <strong><em>Browserify/Webpack</em></strong> 大势所趋，去掉这层包裹！</li>\n<li>第七日 王者归来 <strong><em>ES6 Module</em></strong> 最后的战役</li>\n</ul>\n<h3 id=\"Thanks\"><a href=\"#Thanks\" class=\"headerlink\" title=\"Thanks\"></a>Thanks</h3><p><a href=\"http://lab.hakim.se/reveal-js\" target=\"_blank\" rel=\"noopener\">Reveal.js</a></p>\n"},{"layout":"post","title":"Example Post with Code Highlight","subtitle":"CommonJS，RequireJS，SeaJS 归纳笔记","date":"2016-06-27T01:27:35.000Z","author":"Hux","catalog":true,"header-img":"post-bg-js-module.jpg","_content":"\n\n\n## Foreword\n\n> Here comes Module!\n\n随着网站逐渐变成「互联网应用程序」，嵌入网页的 JavaScript 代码越来越庞大，越来越复杂。网页越来越像桌面程序，需要一个团队分工协作、进度管理、单元测试……我们不得不使用软件工程的方法，来管理网页的业务逻辑。\n\n于是，JavaScript 的模块化成为迫切需求。在 ES6 Module 来临之前，JavaScript 社区提供了强大支持，尝试在现有的运行环境下，实现模块的效果。\n\n\n---\n\n## Catalog\n\n\n1.  [CommonJS & Node](#commonjs--node)\n3.  [History](#history)\n4.  [RequireJS & AMD](#requirejs--amd)\n5.  [SeaJS & CMD](#seajs--cmd)\n6.  [AMD vs CMD](#amd-vs-cmd)\n7.  [WebPack](#webpack)\n\n\n\n## CommonJS & Node\n\n> Javascript: not just for browsers any more! —— CommonJS Slogen\n\n前端模块化的事实标准之一，2009 年 8 月，[CommonJS](http://wiki.commonjs.org/wiki/CommonJS) 诞生。\n\nCommonJS 本质上只是一套规范（API 定义），而 Node.js 采用并实现了部分规范，CommonJS Module 的写法也因此广泛流行。\n\n\n让我们看看 Node 中的实现：\n{% codeblock lang:js %}\n// 由于 Node 原生支持模块的作用域，并不需要额外的 wrapper\n// \"as though the module was wrapped in a function\"\n\nvar a = require('./a')  // 加载模块（同步加载）\na.doSomething()         // 等上一句执行完才会执行\n\nexports.b = function(){ // 暴露 b 函数接口\n  // do something\n}\n{% endcodeblock %}\n\n\n`exports`是一个内置对象，就像`require`是一个内置加载函数一样。如果你希望直接赋值一个完整的对象或者构造函数，覆写`module.exports`就可以了。\n\nCommonJS 前身叫 ServerJS ，**后来希望能更加 COMMON，成为通吃各种环境的模块规范，改名为 CommonJS** 。CommonJS 最初只专注于 Server-side 而非浏览器环境，因此它采用了同步加载的机制，这对服务器环境（硬盘 I/O 速度）不是问题，而对浏览器环境（网速）来说并不合适。\n\n\n因此，各种适用于浏览器环境的模块框架与标准逐个诞生，他们的共同点是：\n\n* 采用异步加载（预先加载所有依赖的模块后回调执行，符合浏览器的网络环境）\n* 虽然代码风格不同，但其实都可以看作 CommonJS Modules 语法的变体。\n* 都在向着 **COMMON** 的方向进化：**兼容不同风格，兼容浏览器和服务器两种环境**\n\n本文接下来要讨论的典例是：\n\n* RequireJS & AMD（异步加载，预执行，依赖前置。默认推荐 AMD 写法）\n* SeaJS & CMD（异步加载，懒执行，依赖就近，默认推荐 CommonJS 写法）\n\n\n\n\n\n## History\n\n<!--<h2 id=\"history\"> History </h2>-->\n\n> 此段落参考自玉伯的 [前端模块化开发那点历史](https://github.com/seajs/seajs/issues/588)\n\n09-10 年间，CommonJS（那时还叫 ServerJS） 社区推出 [Modules/1.0](http://wiki.commonjs.org/wiki/Modules) 规范，并且在 Node.js 等环境下取得了很不错的实践。\n\n09年下半年这帮充满干劲的小伙子们想把 ServerJS 的成功经验进一步推广到浏览器端，于是将社区改名叫 CommonJS，同时激烈争论 Modules 的下一版规范。分歧和冲突由此诞生，逐步形成了三大流派：\n\n\n1. **Modules/1.x** 流派。这个观点觉得 1.x 规范已经够用，只要移植到浏览器端就好。要做的是新增 [Modules/Transport](http://wiki.commonjs.org/wiki/Modules/Transport) 规范，即在浏览器上运行前，先通过转换工具将模块转换为符合 Transport 规范的代码。主流代表是服务端的开发人员。现在值得关注的有两个实现：越来越火的 component 和走在前沿的 es6 module transpiler。\n2. **Modules/Async** 流派。这个观点觉得浏览器有自身的特征，不应该直接用 Modules/1.x 规范。这个观点下的典型代表是 [AMD](http://wiki.commonjs.org/wiki/Modules/AsynchronousDefinition) 规范及其实现 [RequireJS](http://requirejs.org/)。这个稍后再细说。\n3. **Modules/2.0** 流派。这个观点觉得浏览器有自身的特征，不应该直接用 Modules/1.x 规范，但应该尽可能与 Modules/1.x 规范保持一致。这个观点下的典型代表是 BravoJS 和 FlyScript 的作者。BravoJS 作者对 CommonJS 的社区的贡献很大，这份 Modules/2.0-draft 规范花了很多心思。FlyScript 的作者提出了 Modules/Wrappings 规范，这规范是 CMD 规范的前身。可惜的是 BravoJS 太学院派，FlyScript 后来做了自我阉割，将整个网站（flyscript.org）下线了。这个观点在本文中的典型代表就是 SeaJS 和 CMD 了\n\n\n补一嘴：阿里 KISSY 的 KMD 其实跟 AMD 非常类似，只是用 `add`和`use` 两个源自于 YUI Modules 的函数名替换了 `define` 和 `require` ，但其原理更接近 RequireJS ，与 YUI Modules 的 `Y` 沙箱 Attach 机制并不相同\n\n\n## RequireJS & AMD\n\n[AMD (Async Module Definition)](http://wiki.commonjs.org/wiki/Modules/AsynchronousDefinition) 是 RequireJS 在推广过程中对模块定义的规范化产出。\n\n> RequireJS is a JavaScript file and module loader. It is optimized for in-browser use, but it can be used in other JavaScript environments\n\nRequireJS 主要解决的还是 CommonJS 同步加载脚本不适合浏览器 这个问题：\n\n{% gist 65481dbbf6d16e831a6cc89c3e37e6e5 display-emails-from-database.php %}\n\n\n> As the comment indicates above, if require() is async, this code will not work. However, loading scripts synchronously in the browser kills performance. So, what to do?\n\n所以我们需要 **Function Wrapping** 来获取依赖并且提前通过 script tag 提前加载进来\n\n\n{% jsfiddle shorttag [tabs] [skin] [width] [height] %}\n\n\n当依赖模块非常多时，这种**依赖前置**的写法会显得有点奇怪，所以 AMD 给了一个语法糖， **simplified CommonJS wrapping**，借鉴了 CommonJS 的 require 就近风格，也更方便对 CommonJS 模块的兼容：\n\n```js\ndefine(function (require) {\n    var dependency1 = require('dependency1'),\n        dependency2 = require('dependency2');\n\n    return function () {};\n});\n```\nThe AMD loader will parse out the `require('')` calls by using `Function.prototype.toString()`, then internally convert the above define call into this:\n\n```js\ndefine(['require', 'dependency1', 'dependency2'], function (require) {\n    var dependency1 = require('dependency1'),\n        dependency2 = require('dependency2');\n\n    return function () {};\n});\n```\n\n出于`Function.prototype.toString()`兼容性和性能的考虑，最好的做法还是做一次 **optimized build**\n\n\n\nAMD 和 CommonJS 的核心争议如下：\n\n### 1. **执行时机**\n\nModules/1.0:\n\n```js\nvar a = require(\"./a\") // 执行到此时，a.js 才同步下载并执行\n```\n\nAMD: （使用 require 的语法糖时）\n\n```js\ndefine([\"require\"],function(require)){\n    // 在这里，a.js 已经下载并且执行好了\n    // 使用 require() 并不是 AMD 的推荐写法\n    var a = require(\"./a\") // 此处仅仅是取模块 a 的 exports\n})\n```\n\nAMD 里提前下载 a.js 是出于对浏览器环境的考虑，只能采取异步下载，这个社区都认可（Sea.js 也是这么做的）\n\n但是 AMD 的执行是 Early Executing，而 Modules/1.0 是第一次 require 时才执行。这个差异很多人不能接受，包括持 Modules/2.0 观点的人也不能接受。\n\n### 2. **书写风格**\n\nAMD 推荐的风格并不使用`require`，而是通过参数传入，破坏了**依赖就近**：\n\n```js\ndefine([\"a\", \"b\", \"c\"],function(a, b, c){\n    // 提前申明了并初始化了所有模块\n\n    true || b.foo(); //即便根本没用到模块 b，但 b 还是提前执行了。\n})\n```\n\n不过，在笔者看来，风格喜好因人而异，主要还是**预执行**和**懒执行**的差异。\n\n另外，require 2.0 也开始思考异步处理**软依赖**（区别于一定需要的**硬依赖**）的问题，提出了这样的方案：\n\n```js\n// 函数体内：\nif(status){\n    async(['a'],function(a){\n        a.doSomething()\n    })\n}\n```\n\n## SeaJS & CMD\n\nCMD (Common Module Definition) 是 [SeaJS](http://seajs.org/docs/) 在推广过程中对模块定义的规范化产出，是 Modules/2.0 流派的支持者，因此 SeaJS 的模块写法尽可能与 Modules/1.x 规范保持一致。\n\n不过目前国外的该流派都死得差不多了，RequireJS 目前成为浏览器端模块的事实标准，国内最有名气的就是玉伯的 Sea.js ，不过对国际的推广力度不够。\n\n* CMD Specification\n    * [English (CMDJS-repo)](https://github.com/cmdjs/specification/blob/master/draft/module.md)\n    * [Chinese (SeaJS-repo)](https://github.com/seajs/seajs/issues/242)\n\n\nCMD 主要有 define, factory, require, export 这么几个东西\n\n * define `define(id?, deps?, factory)`\n * factory `factory(require, exports, module)`\n * require `require(id)`\n * exports `Object`\n\n\nCMD 推荐的 Code Style 是使用 CommonJS 风格的 `require`：\n\n* 这个 require 实际上是一个全局函数，用于加载模块，这里实际就是传入而已\n\n```js\ndefine(function(require, exports) {\n\n    // 获取模块 a 的接口\n    var a = require('./a');\n    // 调用模块 a 的方法\n    a.doSomething();\n\n    // 对外提供 foo 属性\n    exports.foo = 'bar';\n    // 对外提供 doSomething 方法\n    exports.doSomething = function() {};\n\n});\n```\n\n但是你也可以使用 AMD 风格，或者使用 return 来进行模块暴露\n\n```js\ndefine('hello', ['jquery'], function(require, exports, module) {\n\n    // 模块代码...\n\n    // 直接通过 return 暴露接口\n    return {\n        foo: 'bar',\n        doSomething: function() {}\n    };\n\n});\n```\n\n\n\nSea.js 借鉴了 RequireJS 的不少东西，比如将 FlyScript 中的 module.declare 改名为 define 等。Sea.js 更多地来自 Modules/2.0 的观点，但尽可能去掉了学院派的东西，加入了不少实战派的理念。\n\n\n\n## AMD vs CMD\n\n**虽然两者目前都兼容各种风格，但其底层原理并不相同，从其分别推荐的写法就可以看出两者背后原理的不同：**\n\n1. 对于依赖的模块，AMD 是**提前执行**，CMD 是**懒执行**。（都是先加载）\n*  CMD 推崇**依赖就近**，AMD 推崇**依赖前置**。   \n\n看代码：\n\n```js\n// AMD 默认推荐\n\ndefine(['./a', './b'], function(a, b) {  // 依赖前置，提前执行\n\n    a.doSomething()\n    b.doSomething()\n\n})\n\n```\n\n```js\n// CMD\n\ndefine(function(require, exports, module) {\n\n    var a = require('./a')\n    a.doSomething()\n\n    var b = require('./b') // 依赖就近，延迟执行\n    b.doSomething()\n})\n```\n\n\n\n\n\n\n## WebPack\n\n> working...\n","source":"_posts/js-module-loader.markdown","raw":"---\nlayout:     post\ntitle:      \"Example Post with Code Highlight\"\nsubtitle:   \"CommonJS，RequireJS，SeaJS 归纳笔记\"\ndate:  2016-06-27 09:27:35\nauthor:     \"Hux\"\ncatalog:    true\nheader-img: \"post-bg-js-module.jpg\"\ntags:\n    - 前端开发\n    - JavaScript\n---\n\n\n\n## Foreword\n\n> Here comes Module!\n\n随着网站逐渐变成「互联网应用程序」，嵌入网页的 JavaScript 代码越来越庞大，越来越复杂。网页越来越像桌面程序，需要一个团队分工协作、进度管理、单元测试……我们不得不使用软件工程的方法，来管理网页的业务逻辑。\n\n于是，JavaScript 的模块化成为迫切需求。在 ES6 Module 来临之前，JavaScript 社区提供了强大支持，尝试在现有的运行环境下，实现模块的效果。\n\n\n---\n\n## Catalog\n\n\n1.  [CommonJS & Node](#commonjs--node)\n3.  [History](#history)\n4.  [RequireJS & AMD](#requirejs--amd)\n5.  [SeaJS & CMD](#seajs--cmd)\n6.  [AMD vs CMD](#amd-vs-cmd)\n7.  [WebPack](#webpack)\n\n\n\n## CommonJS & Node\n\n> Javascript: not just for browsers any more! —— CommonJS Slogen\n\n前端模块化的事实标准之一，2009 年 8 月，[CommonJS](http://wiki.commonjs.org/wiki/CommonJS) 诞生。\n\nCommonJS 本质上只是一套规范（API 定义），而 Node.js 采用并实现了部分规范，CommonJS Module 的写法也因此广泛流行。\n\n\n让我们看看 Node 中的实现：\n{% codeblock lang:js %}\n// 由于 Node 原生支持模块的作用域，并不需要额外的 wrapper\n// \"as though the module was wrapped in a function\"\n\nvar a = require('./a')  // 加载模块（同步加载）\na.doSomething()         // 等上一句执行完才会执行\n\nexports.b = function(){ // 暴露 b 函数接口\n  // do something\n}\n{% endcodeblock %}\n\n\n`exports`是一个内置对象，就像`require`是一个内置加载函数一样。如果你希望直接赋值一个完整的对象或者构造函数，覆写`module.exports`就可以了。\n\nCommonJS 前身叫 ServerJS ，**后来希望能更加 COMMON，成为通吃各种环境的模块规范，改名为 CommonJS** 。CommonJS 最初只专注于 Server-side 而非浏览器环境，因此它采用了同步加载的机制，这对服务器环境（硬盘 I/O 速度）不是问题，而对浏览器环境（网速）来说并不合适。\n\n\n因此，各种适用于浏览器环境的模块框架与标准逐个诞生，他们的共同点是：\n\n* 采用异步加载（预先加载所有依赖的模块后回调执行，符合浏览器的网络环境）\n* 虽然代码风格不同，但其实都可以看作 CommonJS Modules 语法的变体。\n* 都在向着 **COMMON** 的方向进化：**兼容不同风格，兼容浏览器和服务器两种环境**\n\n本文接下来要讨论的典例是：\n\n* RequireJS & AMD（异步加载，预执行，依赖前置。默认推荐 AMD 写法）\n* SeaJS & CMD（异步加载，懒执行，依赖就近，默认推荐 CommonJS 写法）\n\n\n\n\n\n## History\n\n<!--<h2 id=\"history\"> History </h2>-->\n\n> 此段落参考自玉伯的 [前端模块化开发那点历史](https://github.com/seajs/seajs/issues/588)\n\n09-10 年间，CommonJS（那时还叫 ServerJS） 社区推出 [Modules/1.0](http://wiki.commonjs.org/wiki/Modules) 规范，并且在 Node.js 等环境下取得了很不错的实践。\n\n09年下半年这帮充满干劲的小伙子们想把 ServerJS 的成功经验进一步推广到浏览器端，于是将社区改名叫 CommonJS，同时激烈争论 Modules 的下一版规范。分歧和冲突由此诞生，逐步形成了三大流派：\n\n\n1. **Modules/1.x** 流派。这个观点觉得 1.x 规范已经够用，只要移植到浏览器端就好。要做的是新增 [Modules/Transport](http://wiki.commonjs.org/wiki/Modules/Transport) 规范，即在浏览器上运行前，先通过转换工具将模块转换为符合 Transport 规范的代码。主流代表是服务端的开发人员。现在值得关注的有两个实现：越来越火的 component 和走在前沿的 es6 module transpiler。\n2. **Modules/Async** 流派。这个观点觉得浏览器有自身的特征，不应该直接用 Modules/1.x 规范。这个观点下的典型代表是 [AMD](http://wiki.commonjs.org/wiki/Modules/AsynchronousDefinition) 规范及其实现 [RequireJS](http://requirejs.org/)。这个稍后再细说。\n3. **Modules/2.0** 流派。这个观点觉得浏览器有自身的特征，不应该直接用 Modules/1.x 规范，但应该尽可能与 Modules/1.x 规范保持一致。这个观点下的典型代表是 BravoJS 和 FlyScript 的作者。BravoJS 作者对 CommonJS 的社区的贡献很大，这份 Modules/2.0-draft 规范花了很多心思。FlyScript 的作者提出了 Modules/Wrappings 规范，这规范是 CMD 规范的前身。可惜的是 BravoJS 太学院派，FlyScript 后来做了自我阉割，将整个网站（flyscript.org）下线了。这个观点在本文中的典型代表就是 SeaJS 和 CMD 了\n\n\n补一嘴：阿里 KISSY 的 KMD 其实跟 AMD 非常类似，只是用 `add`和`use` 两个源自于 YUI Modules 的函数名替换了 `define` 和 `require` ，但其原理更接近 RequireJS ，与 YUI Modules 的 `Y` 沙箱 Attach 机制并不相同\n\n\n## RequireJS & AMD\n\n[AMD (Async Module Definition)](http://wiki.commonjs.org/wiki/Modules/AsynchronousDefinition) 是 RequireJS 在推广过程中对模块定义的规范化产出。\n\n> RequireJS is a JavaScript file and module loader. It is optimized for in-browser use, but it can be used in other JavaScript environments\n\nRequireJS 主要解决的还是 CommonJS 同步加载脚本不适合浏览器 这个问题：\n\n{% gist 65481dbbf6d16e831a6cc89c3e37e6e5 display-emails-from-database.php %}\n\n\n> As the comment indicates above, if require() is async, this code will not work. However, loading scripts synchronously in the browser kills performance. So, what to do?\n\n所以我们需要 **Function Wrapping** 来获取依赖并且提前通过 script tag 提前加载进来\n\n\n{% jsfiddle shorttag [tabs] [skin] [width] [height] %}\n\n\n当依赖模块非常多时，这种**依赖前置**的写法会显得有点奇怪，所以 AMD 给了一个语法糖， **simplified CommonJS wrapping**，借鉴了 CommonJS 的 require 就近风格，也更方便对 CommonJS 模块的兼容：\n\n```js\ndefine(function (require) {\n    var dependency1 = require('dependency1'),\n        dependency2 = require('dependency2');\n\n    return function () {};\n});\n```\nThe AMD loader will parse out the `require('')` calls by using `Function.prototype.toString()`, then internally convert the above define call into this:\n\n```js\ndefine(['require', 'dependency1', 'dependency2'], function (require) {\n    var dependency1 = require('dependency1'),\n        dependency2 = require('dependency2');\n\n    return function () {};\n});\n```\n\n出于`Function.prototype.toString()`兼容性和性能的考虑，最好的做法还是做一次 **optimized build**\n\n\n\nAMD 和 CommonJS 的核心争议如下：\n\n### 1. **执行时机**\n\nModules/1.0:\n\n```js\nvar a = require(\"./a\") // 执行到此时，a.js 才同步下载并执行\n```\n\nAMD: （使用 require 的语法糖时）\n\n```js\ndefine([\"require\"],function(require)){\n    // 在这里，a.js 已经下载并且执行好了\n    // 使用 require() 并不是 AMD 的推荐写法\n    var a = require(\"./a\") // 此处仅仅是取模块 a 的 exports\n})\n```\n\nAMD 里提前下载 a.js 是出于对浏览器环境的考虑，只能采取异步下载，这个社区都认可（Sea.js 也是这么做的）\n\n但是 AMD 的执行是 Early Executing，而 Modules/1.0 是第一次 require 时才执行。这个差异很多人不能接受，包括持 Modules/2.0 观点的人也不能接受。\n\n### 2. **书写风格**\n\nAMD 推荐的风格并不使用`require`，而是通过参数传入，破坏了**依赖就近**：\n\n```js\ndefine([\"a\", \"b\", \"c\"],function(a, b, c){\n    // 提前申明了并初始化了所有模块\n\n    true || b.foo(); //即便根本没用到模块 b，但 b 还是提前执行了。\n})\n```\n\n不过，在笔者看来，风格喜好因人而异，主要还是**预执行**和**懒执行**的差异。\n\n另外，require 2.0 也开始思考异步处理**软依赖**（区别于一定需要的**硬依赖**）的问题，提出了这样的方案：\n\n```js\n// 函数体内：\nif(status){\n    async(['a'],function(a){\n        a.doSomething()\n    })\n}\n```\n\n## SeaJS & CMD\n\nCMD (Common Module Definition) 是 [SeaJS](http://seajs.org/docs/) 在推广过程中对模块定义的规范化产出，是 Modules/2.0 流派的支持者，因此 SeaJS 的模块写法尽可能与 Modules/1.x 规范保持一致。\n\n不过目前国外的该流派都死得差不多了，RequireJS 目前成为浏览器端模块的事实标准，国内最有名气的就是玉伯的 Sea.js ，不过对国际的推广力度不够。\n\n* CMD Specification\n    * [English (CMDJS-repo)](https://github.com/cmdjs/specification/blob/master/draft/module.md)\n    * [Chinese (SeaJS-repo)](https://github.com/seajs/seajs/issues/242)\n\n\nCMD 主要有 define, factory, require, export 这么几个东西\n\n * define `define(id?, deps?, factory)`\n * factory `factory(require, exports, module)`\n * require `require(id)`\n * exports `Object`\n\n\nCMD 推荐的 Code Style 是使用 CommonJS 风格的 `require`：\n\n* 这个 require 实际上是一个全局函数，用于加载模块，这里实际就是传入而已\n\n```js\ndefine(function(require, exports) {\n\n    // 获取模块 a 的接口\n    var a = require('./a');\n    // 调用模块 a 的方法\n    a.doSomething();\n\n    // 对外提供 foo 属性\n    exports.foo = 'bar';\n    // 对外提供 doSomething 方法\n    exports.doSomething = function() {};\n\n});\n```\n\n但是你也可以使用 AMD 风格，或者使用 return 来进行模块暴露\n\n```js\ndefine('hello', ['jquery'], function(require, exports, module) {\n\n    // 模块代码...\n\n    // 直接通过 return 暴露接口\n    return {\n        foo: 'bar',\n        doSomething: function() {}\n    };\n\n});\n```\n\n\n\nSea.js 借鉴了 RequireJS 的不少东西，比如将 FlyScript 中的 module.declare 改名为 define 等。Sea.js 更多地来自 Modules/2.0 的观点，但尽可能去掉了学院派的东西，加入了不少实战派的理念。\n\n\n\n## AMD vs CMD\n\n**虽然两者目前都兼容各种风格，但其底层原理并不相同，从其分别推荐的写法就可以看出两者背后原理的不同：**\n\n1. 对于依赖的模块，AMD 是**提前执行**，CMD 是**懒执行**。（都是先加载）\n*  CMD 推崇**依赖就近**，AMD 推崇**依赖前置**。   \n\n看代码：\n\n```js\n// AMD 默认推荐\n\ndefine(['./a', './b'], function(a, b) {  // 依赖前置，提前执行\n\n    a.doSomething()\n    b.doSomething()\n\n})\n\n```\n\n```js\n// CMD\n\ndefine(function(require, exports, module) {\n\n    var a = require('./a')\n    a.doSomething()\n\n    var b = require('./b') // 依赖就近，延迟执行\n    b.doSomething()\n})\n```\n\n\n\n\n\n\n## WebPack\n\n> working...\n","slug":"js-module-loader","published":1,"updated":"2018-01-07T22:28:37.000Z","comments":1,"photos":[],"link":"","_id":"cjc88rlh6000va1jglj59luas","content":"<h2 id=\"Foreword\"><a href=\"#Foreword\" class=\"headerlink\" title=\"Foreword\"></a>Foreword</h2><blockquote>\n<p>Here comes Module!</p>\n</blockquote>\n<p>随着网站逐渐变成「互联网应用程序」，嵌入网页的 JavaScript 代码越来越庞大，越来越复杂。网页越来越像桌面程序，需要一个团队分工协作、进度管理、单元测试……我们不得不使用软件工程的方法，来管理网页的业务逻辑。</p>\n<p>于是，JavaScript 的模块化成为迫切需求。在 ES6 Module 来临之前，JavaScript 社区提供了强大支持，尝试在现有的运行环境下，实现模块的效果。</p>\n<hr>\n<h2 id=\"Catalog\"><a href=\"#Catalog\" class=\"headerlink\" title=\"Catalog\"></a>Catalog</h2><ol>\n<li><a href=\"#commonjs--node\">CommonJS &amp; Node</a></li>\n<li><a href=\"#history\">History</a></li>\n<li><a href=\"#requirejs--amd\">RequireJS &amp; AMD</a></li>\n<li><a href=\"#seajs--cmd\">SeaJS &amp; CMD</a></li>\n<li><a href=\"#amd-vs-cmd\">AMD vs CMD</a></li>\n<li><a href=\"#webpack\">WebPack</a></li>\n</ol>\n<h2 id=\"CommonJS-amp-Node\"><a href=\"#CommonJS-amp-Node\" class=\"headerlink\" title=\"CommonJS &amp; Node\"></a>CommonJS &amp; Node</h2><blockquote>\n<p>Javascript: not just for browsers any more! —— CommonJS Slogen</p>\n</blockquote>\n<p>前端模块化的事实标准之一，2009 年 8 月，<a href=\"http://wiki.commonjs.org/wiki/CommonJS\" target=\"_blank\" rel=\"noopener\">CommonJS</a> 诞生。</p>\n<p>CommonJS 本质上只是一套规范（API 定义），而 Node.js 采用并实现了部分规范，CommonJS Module 的写法也因此广泛流行。</p>\n<p>让我们看看 Node 中的实现：<br><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 由于 Node 原生支持模块的作用域，并不需要额外的 wrapper</span></span><br><span class=\"line\"><span class=\"comment\">// \"as though the module was wrapped in a function\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"built_in\">require</span>(<span class=\"string\">'./a'</span>)  <span class=\"comment\">// 加载模块（同步加载）</span></span><br><span class=\"line\">a.doSomething()         <span class=\"comment\">// 等上一句执行完才会执行</span></span><br><span class=\"line\"></span><br><span class=\"line\">exports.b = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123; <span class=\"comment\">// 暴露 b 函数接口</span></span><br><span class=\"line\">  <span class=\"comment\">// do something</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><code>exports</code>是一个内置对象，就像<code>require</code>是一个内置加载函数一样。如果你希望直接赋值一个完整的对象或者构造函数，覆写<code>module.exports</code>就可以了。</p>\n<p>CommonJS 前身叫 ServerJS ，<strong>后来希望能更加 COMMON，成为通吃各种环境的模块规范，改名为 CommonJS</strong> 。CommonJS 最初只专注于 Server-side 而非浏览器环境，因此它采用了同步加载的机制，这对服务器环境（硬盘 I/O 速度）不是问题，而对浏览器环境（网速）来说并不合适。</p>\n<p>因此，各种适用于浏览器环境的模块框架与标准逐个诞生，他们的共同点是：</p>\n<ul>\n<li>采用异步加载（预先加载所有依赖的模块后回调执行，符合浏览器的网络环境）</li>\n<li>虽然代码风格不同，但其实都可以看作 CommonJS Modules 语法的变体。</li>\n<li>都在向着 <strong>COMMON</strong> 的方向进化：<strong>兼容不同风格，兼容浏览器和服务器两种环境</strong></li>\n</ul>\n<p>本文接下来要讨论的典例是：</p>\n<ul>\n<li>RequireJS &amp; AMD（异步加载，预执行，依赖前置。默认推荐 AMD 写法）</li>\n<li>SeaJS &amp; CMD（异步加载，懒执行，依赖就近，默认推荐 CommonJS 写法）</li>\n</ul>\n<h2 id=\"History\"><a href=\"#History\" class=\"headerlink\" title=\"History\"></a>History</h2><!--<h2 id=\"history\"> History </h2>-->\n<blockquote>\n<p>此段落参考自玉伯的 <a href=\"https://github.com/seajs/seajs/issues/588\" target=\"_blank\" rel=\"noopener\">前端模块化开发那点历史</a></p>\n</blockquote>\n<p>09-10 年间，CommonJS（那时还叫 ServerJS） 社区推出 <a href=\"http://wiki.commonjs.org/wiki/Modules\" target=\"_blank\" rel=\"noopener\">Modules/1.0</a> 规范，并且在 Node.js 等环境下取得了很不错的实践。</p>\n<p>09年下半年这帮充满干劲的小伙子们想把 ServerJS 的成功经验进一步推广到浏览器端，于是将社区改名叫 CommonJS，同时激烈争论 Modules 的下一版规范。分歧和冲突由此诞生，逐步形成了三大流派：</p>\n<ol>\n<li><strong>Modules/1.x</strong> 流派。这个观点觉得 1.x 规范已经够用，只要移植到浏览器端就好。要做的是新增 <a href=\"http://wiki.commonjs.org/wiki/Modules/Transport\" target=\"_blank\" rel=\"noopener\">Modules/Transport</a> 规范，即在浏览器上运行前，先通过转换工具将模块转换为符合 Transport 规范的代码。主流代表是服务端的开发人员。现在值得关注的有两个实现：越来越火的 component 和走在前沿的 es6 module transpiler。</li>\n<li><strong>Modules/Async</strong> 流派。这个观点觉得浏览器有自身的特征，不应该直接用 Modules/1.x 规范。这个观点下的典型代表是 <a href=\"http://wiki.commonjs.org/wiki/Modules/AsynchronousDefinition\" target=\"_blank\" rel=\"noopener\">AMD</a> 规范及其实现 <a href=\"http://requirejs.org/\" target=\"_blank\" rel=\"noopener\">RequireJS</a>。这个稍后再细说。</li>\n<li><strong>Modules/2.0</strong> 流派。这个观点觉得浏览器有自身的特征，不应该直接用 Modules/1.x 规范，但应该尽可能与 Modules/1.x 规范保持一致。这个观点下的典型代表是 BravoJS 和 FlyScript 的作者。BravoJS 作者对 CommonJS 的社区的贡献很大，这份 Modules/2.0-draft 规范花了很多心思。FlyScript 的作者提出了 Modules/Wrappings 规范，这规范是 CMD 规范的前身。可惜的是 BravoJS 太学院派，FlyScript 后来做了自我阉割，将整个网站（flyscript.org）下线了。这个观点在本文中的典型代表就是 SeaJS 和 CMD 了</li>\n</ol>\n<p>补一嘴：阿里 KISSY 的 KMD 其实跟 AMD 非常类似，只是用 <code>add</code>和<code>use</code> 两个源自于 YUI Modules 的函数名替换了 <code>define</code> 和 <code>require</code> ，但其原理更接近 RequireJS ，与 YUI Modules 的 <code>Y</code> 沙箱 Attach 机制并不相同</p>\n<h2 id=\"RequireJS-amp-AMD\"><a href=\"#RequireJS-amp-AMD\" class=\"headerlink\" title=\"RequireJS &amp; AMD\"></a>RequireJS &amp; AMD</h2><p><a href=\"http://wiki.commonjs.org/wiki/Modules/AsynchronousDefinition\" target=\"_blank\" rel=\"noopener\">AMD (Async Module Definition)</a> 是 RequireJS 在推广过程中对模块定义的规范化产出。</p>\n<blockquote>\n<p>RequireJS is a JavaScript file and module loader. It is optimized for in-browser use, but it can be used in other JavaScript environments</p>\n</blockquote>\n<p>RequireJS 主要解决的还是 CommonJS 同步加载脚本不适合浏览器 这个问题：</p>\n<script src=\"//gist.github.com/65481dbbf6d16e831a6cc89c3e37e6e5.js?file=display-emails-from-database.php\"></script>\n<blockquote>\n<p>As the comment indicates above, if require() is async, this code will not work. However, loading scripts synchronously in the browser kills performance. So, what to do?</p>\n</blockquote>\n<p>所以我们需要 <strong>Function Wrapping</strong> 来获取依赖并且提前通过 script tag 提前加载进来</p>\n<iframe scrolling=\"no\" width=\"[width]\" height=\"[height]\" src=\"//jsfiddle.net/shorttag/embedded/[tabs]/[skin]\" frameborder=\"0\" allowfullscreen></iframe>\n<p>当依赖模块非常多时，这种<strong>依赖前置</strong>的写法会显得有点奇怪，所以 AMD 给了一个语法糖， <strong>simplified CommonJS wrapping</strong>，借鉴了 CommonJS 的 require 就近风格，也更方便对 CommonJS 模块的兼容：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">define(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">require</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> dependency1 = <span class=\"built_in\">require</span>(<span class=\"string\">'dependency1'</span>),</span><br><span class=\"line\">        dependency2 = <span class=\"built_in\">require</span>(<span class=\"string\">'dependency2'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;&#125;;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>The AMD loader will parse out the <code>require(&#39;&#39;)</code> calls by using <code>Function.prototype.toString()</code>, then internally convert the above define call into this:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">define([<span class=\"string\">'require'</span>, <span class=\"string\">'dependency1'</span>, <span class=\"string\">'dependency2'</span>], <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">require</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> dependency1 = <span class=\"built_in\">require</span>(<span class=\"string\">'dependency1'</span>),</span><br><span class=\"line\">        dependency2 = <span class=\"built_in\">require</span>(<span class=\"string\">'dependency2'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;&#125;;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>出于<code>Function.prototype.toString()</code>兼容性和性能的考虑，最好的做法还是做一次 <strong>optimized build</strong></p>\n<p>AMD 和 CommonJS 的核心争议如下：</p>\n<h3 id=\"1-执行时机\"><a href=\"#1-执行时机\" class=\"headerlink\" title=\"1. 执行时机\"></a>1. <strong>执行时机</strong></h3><p>Modules/1.0:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"built_in\">require</span>(<span class=\"string\">\"./a\"</span>) <span class=\"comment\">// 执行到此时，a.js 才同步下载并执行</span></span><br></pre></td></tr></table></figure>\n<p>AMD: （使用 require 的语法糖时）</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">define([<span class=\"string\">\"require\"</span>],<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">require</span>))</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 在这里，a.js 已经下载并且执行好了</span></span><br><span class=\"line\">    <span class=\"comment\">// 使用 require() 并不是 AMD 的推荐写法</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> a = <span class=\"built_in\">require</span>(<span class=\"string\">\"./a\"</span>) <span class=\"comment\">// 此处仅仅是取模块 a 的 exports</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>AMD 里提前下载 a.js 是出于对浏览器环境的考虑，只能采取异步下载，这个社区都认可（Sea.js 也是这么做的）</p>\n<p>但是 AMD 的执行是 Early Executing，而 Modules/1.0 是第一次 require 时才执行。这个差异很多人不能接受，包括持 Modules/2.0 观点的人也不能接受。</p>\n<h3 id=\"2-书写风格\"><a href=\"#2-书写风格\" class=\"headerlink\" title=\"2. 书写风格\"></a>2. <strong>书写风格</strong></h3><p>AMD 推荐的风格并不使用<code>require</code>，而是通过参数传入，破坏了<strong>依赖就近</strong>：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">define([<span class=\"string\">\"a\"</span>, <span class=\"string\">\"b\"</span>, <span class=\"string\">\"c\"</span>],<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a, b, c</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 提前申明了并初始化了所有模块</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"literal\">true</span> || b.foo(); <span class=\"comment\">//即便根本没用到模块 b，但 b 还是提前执行了。</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>不过，在笔者看来，风格喜好因人而异，主要还是<strong>预执行</strong>和<strong>懒执行</strong>的差异。</p>\n<p>另外，require 2.0 也开始思考异步处理<strong>软依赖</strong>（区别于一定需要的<strong>硬依赖</strong>）的问题，提出了这样的方案：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 函数体内：</span></span><br><span class=\"line\"><span class=\"keyword\">if</span>(status)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">async</span>([<span class=\"string\">'a'</span>],<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a</span>)</span>&#123;</span><br><span class=\"line\">        a.doSomething()</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"SeaJS-amp-CMD\"><a href=\"#SeaJS-amp-CMD\" class=\"headerlink\" title=\"SeaJS &amp; CMD\"></a>SeaJS &amp; CMD</h2><p>CMD (Common Module Definition) 是 <a href=\"http://seajs.org/docs/\" target=\"_blank\" rel=\"noopener\">SeaJS</a> 在推广过程中对模块定义的规范化产出，是 Modules/2.0 流派的支持者，因此 SeaJS 的模块写法尽可能与 Modules/1.x 规范保持一致。</p>\n<p>不过目前国外的该流派都死得差不多了，RequireJS 目前成为浏览器端模块的事实标准，国内最有名气的就是玉伯的 Sea.js ，不过对国际的推广力度不够。</p>\n<ul>\n<li>CMD Specification<ul>\n<li><a href=\"https://github.com/cmdjs/specification/blob/master/draft/module.md\" target=\"_blank\" rel=\"noopener\">English (CMDJS-repo)</a></li>\n<li><a href=\"https://github.com/seajs/seajs/issues/242\" target=\"_blank\" rel=\"noopener\">Chinese (SeaJS-repo)</a></li>\n</ul>\n</li>\n</ul>\n<p>CMD 主要有 define, factory, require, export 这么几个东西</p>\n<ul>\n<li>define <code>define(id?, deps?, factory)</code></li>\n<li>factory <code>factory(require, exports, module)</code></li>\n<li>require <code>require(id)</code></li>\n<li>exports <code>Object</code></li>\n</ul>\n<p>CMD 推荐的 Code Style 是使用 CommonJS 风格的 <code>require</code>：</p>\n<ul>\n<li>这个 require 实际上是一个全局函数，用于加载模块，这里实际就是传入而已</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">define(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">require, exports</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 获取模块 a 的接口</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> a = <span class=\"built_in\">require</span>(<span class=\"string\">'./a'</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 调用模块 a 的方法</span></span><br><span class=\"line\">    a.doSomething();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 对外提供 foo 属性</span></span><br><span class=\"line\">    exports.foo = <span class=\"string\">'bar'</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 对外提供 doSomething 方法</span></span><br><span class=\"line\">    exports.doSomething = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>但是你也可以使用 AMD 风格，或者使用 return 来进行模块暴露</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">define(<span class=\"string\">'hello'</span>, [<span class=\"string\">'jquery'</span>], <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">require, exports, module</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 模块代码...</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 直接通过 return 暴露接口</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        foo: <span class=\"string\">'bar'</span>,</span><br><span class=\"line\">        doSomething: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>Sea.js 借鉴了 RequireJS 的不少东西，比如将 FlyScript 中的 module.declare 改名为 define 等。Sea.js 更多地来自 Modules/2.0 的观点，但尽可能去掉了学院派的东西，加入了不少实战派的理念。</p>\n<h2 id=\"AMD-vs-CMD\"><a href=\"#AMD-vs-CMD\" class=\"headerlink\" title=\"AMD vs CMD\"></a>AMD vs CMD</h2><p><strong>虽然两者目前都兼容各种风格，但其底层原理并不相同，从其分别推荐的写法就可以看出两者背后原理的不同：</strong></p>\n<ol>\n<li>对于依赖的模块，AMD 是<strong>提前执行</strong>，CMD 是<strong>懒执行</strong>。（都是先加载）</li>\n</ol>\n<ul>\n<li>CMD 推崇<strong>依赖就近</strong>，AMD 推崇<strong>依赖前置</strong>。   </li>\n</ul>\n<p>看代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// AMD 默认推荐</span></span><br><span class=\"line\"></span><br><span class=\"line\">define([<span class=\"string\">'./a'</span>, <span class=\"string\">'./b'</span>], <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a, b</span>) </span>&#123;  <span class=\"comment\">// 依赖前置，提前执行</span></span><br><span class=\"line\"></span><br><span class=\"line\">    a.doSomething()</span><br><span class=\"line\">    b.doSomething()</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// CMD</span></span><br><span class=\"line\"></span><br><span class=\"line\">define(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">require, exports, module</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> a = <span class=\"built_in\">require</span>(<span class=\"string\">'./a'</span>)</span><br><span class=\"line\">    a.doSomething()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> b = <span class=\"built_in\">require</span>(<span class=\"string\">'./b'</span>) <span class=\"comment\">// 依赖就近，延迟执行</span></span><br><span class=\"line\">    b.doSomething()</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h2 id=\"WebPack\"><a href=\"#WebPack\" class=\"headerlink\" title=\"WebPack\"></a>WebPack</h2><blockquote>\n<p>working…</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Foreword\"><a href=\"#Foreword\" class=\"headerlink\" title=\"Foreword\"></a>Foreword</h2><blockquote>\n<p>Here comes Module!</p>\n</blockquote>\n<p>随着网站逐渐变成「互联网应用程序」，嵌入网页的 JavaScript 代码越来越庞大，越来越复杂。网页越来越像桌面程序，需要一个团队分工协作、进度管理、单元测试……我们不得不使用软件工程的方法，来管理网页的业务逻辑。</p>\n<p>于是，JavaScript 的模块化成为迫切需求。在 ES6 Module 来临之前，JavaScript 社区提供了强大支持，尝试在现有的运行环境下，实现模块的效果。</p>\n<hr>\n<h2 id=\"Catalog\"><a href=\"#Catalog\" class=\"headerlink\" title=\"Catalog\"></a>Catalog</h2><ol>\n<li><a href=\"#commonjs--node\">CommonJS &amp; Node</a></li>\n<li><a href=\"#history\">History</a></li>\n<li><a href=\"#requirejs--amd\">RequireJS &amp; AMD</a></li>\n<li><a href=\"#seajs--cmd\">SeaJS &amp; CMD</a></li>\n<li><a href=\"#amd-vs-cmd\">AMD vs CMD</a></li>\n<li><a href=\"#webpack\">WebPack</a></li>\n</ol>\n<h2 id=\"CommonJS-amp-Node\"><a href=\"#CommonJS-amp-Node\" class=\"headerlink\" title=\"CommonJS &amp; Node\"></a>CommonJS &amp; Node</h2><blockquote>\n<p>Javascript: not just for browsers any more! —— CommonJS Slogen</p>\n</blockquote>\n<p>前端模块化的事实标准之一，2009 年 8 月，<a href=\"http://wiki.commonjs.org/wiki/CommonJS\" target=\"_blank\" rel=\"noopener\">CommonJS</a> 诞生。</p>\n<p>CommonJS 本质上只是一套规范（API 定义），而 Node.js 采用并实现了部分规范，CommonJS Module 的写法也因此广泛流行。</p>\n<p>让我们看看 Node 中的实现：<br><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 由于 Node 原生支持模块的作用域，并不需要额外的 wrapper</span></span><br><span class=\"line\"><span class=\"comment\">// \"as though the module was wrapped in a function\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"built_in\">require</span>(<span class=\"string\">'./a'</span>)  <span class=\"comment\">// 加载模块（同步加载）</span></span><br><span class=\"line\">a.doSomething()         <span class=\"comment\">// 等上一句执行完才会执行</span></span><br><span class=\"line\"></span><br><span class=\"line\">exports.b = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123; <span class=\"comment\">// 暴露 b 函数接口</span></span><br><span class=\"line\">  <span class=\"comment\">// do something</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><code>exports</code>是一个内置对象，就像<code>require</code>是一个内置加载函数一样。如果你希望直接赋值一个完整的对象或者构造函数，覆写<code>module.exports</code>就可以了。</p>\n<p>CommonJS 前身叫 ServerJS ，<strong>后来希望能更加 COMMON，成为通吃各种环境的模块规范，改名为 CommonJS</strong> 。CommonJS 最初只专注于 Server-side 而非浏览器环境，因此它采用了同步加载的机制，这对服务器环境（硬盘 I/O 速度）不是问题，而对浏览器环境（网速）来说并不合适。</p>\n<p>因此，各种适用于浏览器环境的模块框架与标准逐个诞生，他们的共同点是：</p>\n<ul>\n<li>采用异步加载（预先加载所有依赖的模块后回调执行，符合浏览器的网络环境）</li>\n<li>虽然代码风格不同，但其实都可以看作 CommonJS Modules 语法的变体。</li>\n<li>都在向着 <strong>COMMON</strong> 的方向进化：<strong>兼容不同风格，兼容浏览器和服务器两种环境</strong></li>\n</ul>\n<p>本文接下来要讨论的典例是：</p>\n<ul>\n<li>RequireJS &amp; AMD（异步加载，预执行，依赖前置。默认推荐 AMD 写法）</li>\n<li>SeaJS &amp; CMD（异步加载，懒执行，依赖就近，默认推荐 CommonJS 写法）</li>\n</ul>\n<h2 id=\"History\"><a href=\"#History\" class=\"headerlink\" title=\"History\"></a>History</h2><!--<h2 id=\"history\"> History </h2>-->\n<blockquote>\n<p>此段落参考自玉伯的 <a href=\"https://github.com/seajs/seajs/issues/588\" target=\"_blank\" rel=\"noopener\">前端模块化开发那点历史</a></p>\n</blockquote>\n<p>09-10 年间，CommonJS（那时还叫 ServerJS） 社区推出 <a href=\"http://wiki.commonjs.org/wiki/Modules\" target=\"_blank\" rel=\"noopener\">Modules/1.0</a> 规范，并且在 Node.js 等环境下取得了很不错的实践。</p>\n<p>09年下半年这帮充满干劲的小伙子们想把 ServerJS 的成功经验进一步推广到浏览器端，于是将社区改名叫 CommonJS，同时激烈争论 Modules 的下一版规范。分歧和冲突由此诞生，逐步形成了三大流派：</p>\n<ol>\n<li><strong>Modules/1.x</strong> 流派。这个观点觉得 1.x 规范已经够用，只要移植到浏览器端就好。要做的是新增 <a href=\"http://wiki.commonjs.org/wiki/Modules/Transport\" target=\"_blank\" rel=\"noopener\">Modules/Transport</a> 规范，即在浏览器上运行前，先通过转换工具将模块转换为符合 Transport 规范的代码。主流代表是服务端的开发人员。现在值得关注的有两个实现：越来越火的 component 和走在前沿的 es6 module transpiler。</li>\n<li><strong>Modules/Async</strong> 流派。这个观点觉得浏览器有自身的特征，不应该直接用 Modules/1.x 规范。这个观点下的典型代表是 <a href=\"http://wiki.commonjs.org/wiki/Modules/AsynchronousDefinition\" target=\"_blank\" rel=\"noopener\">AMD</a> 规范及其实现 <a href=\"http://requirejs.org/\" target=\"_blank\" rel=\"noopener\">RequireJS</a>。这个稍后再细说。</li>\n<li><strong>Modules/2.0</strong> 流派。这个观点觉得浏览器有自身的特征，不应该直接用 Modules/1.x 规范，但应该尽可能与 Modules/1.x 规范保持一致。这个观点下的典型代表是 BravoJS 和 FlyScript 的作者。BravoJS 作者对 CommonJS 的社区的贡献很大，这份 Modules/2.0-draft 规范花了很多心思。FlyScript 的作者提出了 Modules/Wrappings 规范，这规范是 CMD 规范的前身。可惜的是 BravoJS 太学院派，FlyScript 后来做了自我阉割，将整个网站（flyscript.org）下线了。这个观点在本文中的典型代表就是 SeaJS 和 CMD 了</li>\n</ol>\n<p>补一嘴：阿里 KISSY 的 KMD 其实跟 AMD 非常类似，只是用 <code>add</code>和<code>use</code> 两个源自于 YUI Modules 的函数名替换了 <code>define</code> 和 <code>require</code> ，但其原理更接近 RequireJS ，与 YUI Modules 的 <code>Y</code> 沙箱 Attach 机制并不相同</p>\n<h2 id=\"RequireJS-amp-AMD\"><a href=\"#RequireJS-amp-AMD\" class=\"headerlink\" title=\"RequireJS &amp; AMD\"></a>RequireJS &amp; AMD</h2><p><a href=\"http://wiki.commonjs.org/wiki/Modules/AsynchronousDefinition\" target=\"_blank\" rel=\"noopener\">AMD (Async Module Definition)</a> 是 RequireJS 在推广过程中对模块定义的规范化产出。</p>\n<blockquote>\n<p>RequireJS is a JavaScript file and module loader. It is optimized for in-browser use, but it can be used in other JavaScript environments</p>\n</blockquote>\n<p>RequireJS 主要解决的还是 CommonJS 同步加载脚本不适合浏览器 这个问题：</p>\n<script src=\"//gist.github.com/65481dbbf6d16e831a6cc89c3e37e6e5.js?file=display-emails-from-database.php\"></script>\n<blockquote>\n<p>As the comment indicates above, if require() is async, this code will not work. However, loading scripts synchronously in the browser kills performance. So, what to do?</p>\n</blockquote>\n<p>所以我们需要 <strong>Function Wrapping</strong> 来获取依赖并且提前通过 script tag 提前加载进来</p>\n<iframe scrolling=\"no\" width=\"[width]\" height=\"[height]\" src=\"//jsfiddle.net/shorttag/embedded/[tabs]/[skin]\" frameborder=\"0\" allowfullscreen></iframe>\n<p>当依赖模块非常多时，这种<strong>依赖前置</strong>的写法会显得有点奇怪，所以 AMD 给了一个语法糖， <strong>simplified CommonJS wrapping</strong>，借鉴了 CommonJS 的 require 就近风格，也更方便对 CommonJS 模块的兼容：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">define(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">require</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> dependency1 = <span class=\"built_in\">require</span>(<span class=\"string\">'dependency1'</span>),</span><br><span class=\"line\">        dependency2 = <span class=\"built_in\">require</span>(<span class=\"string\">'dependency2'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;&#125;;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>The AMD loader will parse out the <code>require(&#39;&#39;)</code> calls by using <code>Function.prototype.toString()</code>, then internally convert the above define call into this:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">define([<span class=\"string\">'require'</span>, <span class=\"string\">'dependency1'</span>, <span class=\"string\">'dependency2'</span>], <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">require</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> dependency1 = <span class=\"built_in\">require</span>(<span class=\"string\">'dependency1'</span>),</span><br><span class=\"line\">        dependency2 = <span class=\"built_in\">require</span>(<span class=\"string\">'dependency2'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;&#125;;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>出于<code>Function.prototype.toString()</code>兼容性和性能的考虑，最好的做法还是做一次 <strong>optimized build</strong></p>\n<p>AMD 和 CommonJS 的核心争议如下：</p>\n<h3 id=\"1-执行时机\"><a href=\"#1-执行时机\" class=\"headerlink\" title=\"1. 执行时机\"></a>1. <strong>执行时机</strong></h3><p>Modules/1.0:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"built_in\">require</span>(<span class=\"string\">\"./a\"</span>) <span class=\"comment\">// 执行到此时，a.js 才同步下载并执行</span></span><br></pre></td></tr></table></figure>\n<p>AMD: （使用 require 的语法糖时）</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">define([<span class=\"string\">\"require\"</span>],<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">require</span>))</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 在这里，a.js 已经下载并且执行好了</span></span><br><span class=\"line\">    <span class=\"comment\">// 使用 require() 并不是 AMD 的推荐写法</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> a = <span class=\"built_in\">require</span>(<span class=\"string\">\"./a\"</span>) <span class=\"comment\">// 此处仅仅是取模块 a 的 exports</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>AMD 里提前下载 a.js 是出于对浏览器环境的考虑，只能采取异步下载，这个社区都认可（Sea.js 也是这么做的）</p>\n<p>但是 AMD 的执行是 Early Executing，而 Modules/1.0 是第一次 require 时才执行。这个差异很多人不能接受，包括持 Modules/2.0 观点的人也不能接受。</p>\n<h3 id=\"2-书写风格\"><a href=\"#2-书写风格\" class=\"headerlink\" title=\"2. 书写风格\"></a>2. <strong>书写风格</strong></h3><p>AMD 推荐的风格并不使用<code>require</code>，而是通过参数传入，破坏了<strong>依赖就近</strong>：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">define([<span class=\"string\">\"a\"</span>, <span class=\"string\">\"b\"</span>, <span class=\"string\">\"c\"</span>],<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a, b, c</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 提前申明了并初始化了所有模块</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"literal\">true</span> || b.foo(); <span class=\"comment\">//即便根本没用到模块 b，但 b 还是提前执行了。</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>不过，在笔者看来，风格喜好因人而异，主要还是<strong>预执行</strong>和<strong>懒执行</strong>的差异。</p>\n<p>另外，require 2.0 也开始思考异步处理<strong>软依赖</strong>（区别于一定需要的<strong>硬依赖</strong>）的问题，提出了这样的方案：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 函数体内：</span></span><br><span class=\"line\"><span class=\"keyword\">if</span>(status)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">async</span>([<span class=\"string\">'a'</span>],<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a</span>)</span>&#123;</span><br><span class=\"line\">        a.doSomething()</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"SeaJS-amp-CMD\"><a href=\"#SeaJS-amp-CMD\" class=\"headerlink\" title=\"SeaJS &amp; CMD\"></a>SeaJS &amp; CMD</h2><p>CMD (Common Module Definition) 是 <a href=\"http://seajs.org/docs/\" target=\"_blank\" rel=\"noopener\">SeaJS</a> 在推广过程中对模块定义的规范化产出，是 Modules/2.0 流派的支持者，因此 SeaJS 的模块写法尽可能与 Modules/1.x 规范保持一致。</p>\n<p>不过目前国外的该流派都死得差不多了，RequireJS 目前成为浏览器端模块的事实标准，国内最有名气的就是玉伯的 Sea.js ，不过对国际的推广力度不够。</p>\n<ul>\n<li>CMD Specification<ul>\n<li><a href=\"https://github.com/cmdjs/specification/blob/master/draft/module.md\" target=\"_blank\" rel=\"noopener\">English (CMDJS-repo)</a></li>\n<li><a href=\"https://github.com/seajs/seajs/issues/242\" target=\"_blank\" rel=\"noopener\">Chinese (SeaJS-repo)</a></li>\n</ul>\n</li>\n</ul>\n<p>CMD 主要有 define, factory, require, export 这么几个东西</p>\n<ul>\n<li>define <code>define(id?, deps?, factory)</code></li>\n<li>factory <code>factory(require, exports, module)</code></li>\n<li>require <code>require(id)</code></li>\n<li>exports <code>Object</code></li>\n</ul>\n<p>CMD 推荐的 Code Style 是使用 CommonJS 风格的 <code>require</code>：</p>\n<ul>\n<li>这个 require 实际上是一个全局函数，用于加载模块，这里实际就是传入而已</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">define(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">require, exports</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 获取模块 a 的接口</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> a = <span class=\"built_in\">require</span>(<span class=\"string\">'./a'</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 调用模块 a 的方法</span></span><br><span class=\"line\">    a.doSomething();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 对外提供 foo 属性</span></span><br><span class=\"line\">    exports.foo = <span class=\"string\">'bar'</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 对外提供 doSomething 方法</span></span><br><span class=\"line\">    exports.doSomething = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>但是你也可以使用 AMD 风格，或者使用 return 来进行模块暴露</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">define(<span class=\"string\">'hello'</span>, [<span class=\"string\">'jquery'</span>], <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">require, exports, module</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 模块代码...</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 直接通过 return 暴露接口</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        foo: <span class=\"string\">'bar'</span>,</span><br><span class=\"line\">        doSomething: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>Sea.js 借鉴了 RequireJS 的不少东西，比如将 FlyScript 中的 module.declare 改名为 define 等。Sea.js 更多地来自 Modules/2.0 的观点，但尽可能去掉了学院派的东西，加入了不少实战派的理念。</p>\n<h2 id=\"AMD-vs-CMD\"><a href=\"#AMD-vs-CMD\" class=\"headerlink\" title=\"AMD vs CMD\"></a>AMD vs CMD</h2><p><strong>虽然两者目前都兼容各种风格，但其底层原理并不相同，从其分别推荐的写法就可以看出两者背后原理的不同：</strong></p>\n<ol>\n<li>对于依赖的模块，AMD 是<strong>提前执行</strong>，CMD 是<strong>懒执行</strong>。（都是先加载）</li>\n</ol>\n<ul>\n<li>CMD 推崇<strong>依赖就近</strong>，AMD 推崇<strong>依赖前置</strong>。   </li>\n</ul>\n<p>看代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// AMD 默认推荐</span></span><br><span class=\"line\"></span><br><span class=\"line\">define([<span class=\"string\">'./a'</span>, <span class=\"string\">'./b'</span>], <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a, b</span>) </span>&#123;  <span class=\"comment\">// 依赖前置，提前执行</span></span><br><span class=\"line\"></span><br><span class=\"line\">    a.doSomething()</span><br><span class=\"line\">    b.doSomething()</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// CMD</span></span><br><span class=\"line\"></span><br><span class=\"line\">define(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">require, exports, module</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> a = <span class=\"built_in\">require</span>(<span class=\"string\">'./a'</span>)</span><br><span class=\"line\">    a.doSomething()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> b = <span class=\"built_in\">require</span>(<span class=\"string\">'./b'</span>) <span class=\"comment\">// 依赖就近，延迟执行</span></span><br><span class=\"line\">    b.doSomething()</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h2 id=\"WebPack\"><a href=\"#WebPack\" class=\"headerlink\" title=\"WebPack\"></a>WebPack</h2><blockquote>\n<p>working…</p>\n</blockquote>\n"},{"layout":"keynote","title":"基于Redis的三种分布式爬虫策略","subtitle":"基于Redis的三种分布式爬虫策略","date":"2016-06-27T01:27:35.000Z","author":"","_content":"\n# 基于 Redis 的三总分布式爬虫策略\n\n## 前言\n\n爬虫是偏IO型人物，分布式爬虫的实现难度比分布式计算和分布式存储简单的多，分布式爬虫主要需要考虑的问题有以下几点：\n\n  - 爬虫任务的统一调度\n  - 爬虫任务的统一去重\n  - 存储问题\n  - 速度问题\n  - 足够强壮并且简单方便\n  - 支持“断点续爬”\n\nPython 分布式爬虫比较常见的是用 `scrapy` 框架加上 `Redis` 内存数据库，中间的任务调度等用 `scrapy-redis` 模块实现。此处介绍一下基于 `Redis` 的三种分布式策略，其实他们之间还是很相似的，只是为了适应不同的网络或爬虫环境做了一些调整。\n\n## 策略一\n\n![策略一](1.jpg)\n\nSlaver 端从 Master 端拿到任务 `Request/URL/ID` 进行数据抓取，在抓取数据的同事也生成新任务，并将任务抛给 Master。Master 端只有一个 Redis数据库，负责对Slaver 提交的任务进行去重，加入待爬队列。\n\n优点：`scrapy-redis` 默认使用的就是这种策略，我们实现起来很简单，因为任务调度等工作 `scrapy-redis` 已经帮我们做好了，我们只需要继承 `RedisSpider`、指定 `redis_key` 就行了。\n\n缺点：`scrapy-redis` 调度的任务是 `Request`对象，里面信息量比较大 （不仅包括URL，还有`callback函数`、headers等信息），导致的结果就是会降低爬虫速度。尔且会占用 Redis 大量的存储空间。当然我们可以重写方法来实现调度 URL 或者 用户ID。\n\n## 策略二\n\n![策略二](2.jpg)\n\n这是对策略的一种改进：在 Master 端跑一个程序去生成任务 (Request/URL/ID)。Master 端负责的是生产任务，并把任务去重、加入到待爬队列。Slaver 只管从 Master 端拿任务去爬取。\n\n优点：将生成任务和抓取数据分开，分工明确，减少了 Master 和 Slaver之间的数据交流；Master 端生成任务还有一个好处就是可以很方便的重写判重策略（当数据量大时优化判重的性能和速度还是很重要的）。\n\n缺点：像QQ或者新浪这种网站，发送一个请求范湖的内容里面可能包含几十个待爬的用户ID，即几十个新的爬虫任务。但有些网站一个请求只能得到一两个新任务，并且返回内容里也包含爬虫要抓取的目标信息，如果将生成和抓取任务分开反而会降低爬虫的效率。冰晶带宽也是爬虫的一个瓶颈问题，我们要秉承着发送尽量少的请求为原则，同时也是为了减轻网站服务器的压力，要做到一只有道德的 Crawler。所以视情况而定。\n\n## 策略三\n\n![策略三](3.jpg)\n\nMaster 中只有一个集合，它只有查询的作用。Slaver在遇到新任务时询问 Master 此任务是够已经爬取，如果未爬则加入 Slaver 自己的待爬队列中，Master 把此任务记为已爬。他和策略一比较像，但是明显比策略一简单。策略一的简单是因为有 `scrapy-redis` 实现了 `scheduler` 中间件，他并不适用于非 `scrapy` 框架的爬虫。\n\n优点：实现简单，非 `scrapy` 框架的爬虫也适用。Master 端压力比较小，Master 和 Slaver 的数据交流也不大。\n\n缺点：强壮性还不够，需要另外定时保存待爬队列以实现断点续爬功能。各 Slaver 的待爬任务不通用。\n\n结语\n如果把 Slaver 比作工人，把 Master 比作工头。策略一就是工人遇到新任务都上报给工头，需要干活的时候就去工头那里领任务；策略二是工头去找任务，工人只管从工头那里领任务干活；策略三就是工人遇到新任务时询问工头此任务是否有人做了，没有的话工人就将此任务加到自己的行程表。\n\n\n本文转载，感谢原作者（原文链接：http://blog.csdn.net/bone_ace/article/details/50989104）\n","source":"_posts/基于Redis的三种分布式爬虫策略.md","raw":"---\nlayout:     keynote\ntitle:      \"基于Redis的三种分布式爬虫策略\"\nsubtitle:   \"基于Redis的三种分布式爬虫策略\"\ndate: 2016-06-27 09:27:35\nauthor:     \"\"\ntags:\n    - 爬虫\n    - Redis\n    - Python\n---\n\n# 基于 Redis 的三总分布式爬虫策略\n\n## 前言\n\n爬虫是偏IO型人物，分布式爬虫的实现难度比分布式计算和分布式存储简单的多，分布式爬虫主要需要考虑的问题有以下几点：\n\n  - 爬虫任务的统一调度\n  - 爬虫任务的统一去重\n  - 存储问题\n  - 速度问题\n  - 足够强壮并且简单方便\n  - 支持“断点续爬”\n\nPython 分布式爬虫比较常见的是用 `scrapy` 框架加上 `Redis` 内存数据库，中间的任务调度等用 `scrapy-redis` 模块实现。此处介绍一下基于 `Redis` 的三种分布式策略，其实他们之间还是很相似的，只是为了适应不同的网络或爬虫环境做了一些调整。\n\n## 策略一\n\n![策略一](1.jpg)\n\nSlaver 端从 Master 端拿到任务 `Request/URL/ID` 进行数据抓取，在抓取数据的同事也生成新任务，并将任务抛给 Master。Master 端只有一个 Redis数据库，负责对Slaver 提交的任务进行去重，加入待爬队列。\n\n优点：`scrapy-redis` 默认使用的就是这种策略，我们实现起来很简单，因为任务调度等工作 `scrapy-redis` 已经帮我们做好了，我们只需要继承 `RedisSpider`、指定 `redis_key` 就行了。\n\n缺点：`scrapy-redis` 调度的任务是 `Request`对象，里面信息量比较大 （不仅包括URL，还有`callback函数`、headers等信息），导致的结果就是会降低爬虫速度。尔且会占用 Redis 大量的存储空间。当然我们可以重写方法来实现调度 URL 或者 用户ID。\n\n## 策略二\n\n![策略二](2.jpg)\n\n这是对策略的一种改进：在 Master 端跑一个程序去生成任务 (Request/URL/ID)。Master 端负责的是生产任务，并把任务去重、加入到待爬队列。Slaver 只管从 Master 端拿任务去爬取。\n\n优点：将生成任务和抓取数据分开，分工明确，减少了 Master 和 Slaver之间的数据交流；Master 端生成任务还有一个好处就是可以很方便的重写判重策略（当数据量大时优化判重的性能和速度还是很重要的）。\n\n缺点：像QQ或者新浪这种网站，发送一个请求范湖的内容里面可能包含几十个待爬的用户ID，即几十个新的爬虫任务。但有些网站一个请求只能得到一两个新任务，并且返回内容里也包含爬虫要抓取的目标信息，如果将生成和抓取任务分开反而会降低爬虫的效率。冰晶带宽也是爬虫的一个瓶颈问题，我们要秉承着发送尽量少的请求为原则，同时也是为了减轻网站服务器的压力，要做到一只有道德的 Crawler。所以视情况而定。\n\n## 策略三\n\n![策略三](3.jpg)\n\nMaster 中只有一个集合，它只有查询的作用。Slaver在遇到新任务时询问 Master 此任务是够已经爬取，如果未爬则加入 Slaver 自己的待爬队列中，Master 把此任务记为已爬。他和策略一比较像，但是明显比策略一简单。策略一的简单是因为有 `scrapy-redis` 实现了 `scheduler` 中间件，他并不适用于非 `scrapy` 框架的爬虫。\n\n优点：实现简单，非 `scrapy` 框架的爬虫也适用。Master 端压力比较小，Master 和 Slaver 的数据交流也不大。\n\n缺点：强壮性还不够，需要另外定时保存待爬队列以实现断点续爬功能。各 Slaver 的待爬任务不通用。\n\n结语\n如果把 Slaver 比作工人，把 Master 比作工头。策略一就是工人遇到新任务都上报给工头，需要干活的时候就去工头那里领任务；策略二是工头去找任务，工人只管从工头那里领任务干活；策略三就是工人遇到新任务时询问工头此任务是否有人做了，没有的话工人就将此任务加到自己的行程表。\n\n\n本文转载，感谢原作者（原文链接：http://blog.csdn.net/bone_ace/article/details/50989104）\n","slug":"基于Redis的三种分布式爬虫策略","published":1,"updated":"2018-01-07T22:28:37.000Z","comments":1,"photos":[],"link":"","_id":"cjc88rlh7000xa1jgvus39udy","content":"<h1 id=\"基于-Redis-的三总分布式爬虫策略\"><a href=\"#基于-Redis-的三总分布式爬虫策略\" class=\"headerlink\" title=\"基于 Redis 的三总分布式爬虫策略\"></a>基于 Redis 的三总分布式爬虫策略</h1><h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>爬虫是偏IO型人物，分布式爬虫的实现难度比分布式计算和分布式存储简单的多，分布式爬虫主要需要考虑的问题有以下几点：</p>\n<ul>\n<li>爬虫任务的统一调度</li>\n<li>爬虫任务的统一去重</li>\n<li>存储问题</li>\n<li>速度问题</li>\n<li>足够强壮并且简单方便</li>\n<li>支持“断点续爬”</li>\n</ul>\n<p>Python 分布式爬虫比较常见的是用 <code>scrapy</code> 框架加上 <code>Redis</code> 内存数据库，中间的任务调度等用 <code>scrapy-redis</code> 模块实现。此处介绍一下基于 <code>Redis</code> 的三种分布式策略，其实他们之间还是很相似的，只是为了适应不同的网络或爬虫环境做了一些调整。</p>\n<h2 id=\"策略一\"><a href=\"#策略一\" class=\"headerlink\" title=\"策略一\"></a>策略一</h2><p><img src=\"1.jpg\" alt=\"策略一\"></p>\n<p>Slaver 端从 Master 端拿到任务 <code>Request/URL/ID</code> 进行数据抓取，在抓取数据的同事也生成新任务，并将任务抛给 Master。Master 端只有一个 Redis数据库，负责对Slaver 提交的任务进行去重，加入待爬队列。</p>\n<p>优点：<code>scrapy-redis</code> 默认使用的就是这种策略，我们实现起来很简单，因为任务调度等工作 <code>scrapy-redis</code> 已经帮我们做好了，我们只需要继承 <code>RedisSpider</code>、指定 <code>redis_key</code> 就行了。</p>\n<p>缺点：<code>scrapy-redis</code> 调度的任务是 <code>Request</code>对象，里面信息量比较大 （不仅包括URL，还有<code>callback函数</code>、headers等信息），导致的结果就是会降低爬虫速度。尔且会占用 Redis 大量的存储空间。当然我们可以重写方法来实现调度 URL 或者 用户ID。</p>\n<h2 id=\"策略二\"><a href=\"#策略二\" class=\"headerlink\" title=\"策略二\"></a>策略二</h2><p><img src=\"2.jpg\" alt=\"策略二\"></p>\n<p>这是对策略的一种改进：在 Master 端跑一个程序去生成任务 (Request/URL/ID)。Master 端负责的是生产任务，并把任务去重、加入到待爬队列。Slaver 只管从 Master 端拿任务去爬取。</p>\n<p>优点：将生成任务和抓取数据分开，分工明确，减少了 Master 和 Slaver之间的数据交流；Master 端生成任务还有一个好处就是可以很方便的重写判重策略（当数据量大时优化判重的性能和速度还是很重要的）。</p>\n<p>缺点：像QQ或者新浪这种网站，发送一个请求范湖的内容里面可能包含几十个待爬的用户ID，即几十个新的爬虫任务。但有些网站一个请求只能得到一两个新任务，并且返回内容里也包含爬虫要抓取的目标信息，如果将生成和抓取任务分开反而会降低爬虫的效率。冰晶带宽也是爬虫的一个瓶颈问题，我们要秉承着发送尽量少的请求为原则，同时也是为了减轻网站服务器的压力，要做到一只有道德的 Crawler。所以视情况而定。</p>\n<h2 id=\"策略三\"><a href=\"#策略三\" class=\"headerlink\" title=\"策略三\"></a>策略三</h2><p><img src=\"3.jpg\" alt=\"策略三\"></p>\n<p>Master 中只有一个集合，它只有查询的作用。Slaver在遇到新任务时询问 Master 此任务是够已经爬取，如果未爬则加入 Slaver 自己的待爬队列中，Master 把此任务记为已爬。他和策略一比较像，但是明显比策略一简单。策略一的简单是因为有 <code>scrapy-redis</code> 实现了 <code>scheduler</code> 中间件，他并不适用于非 <code>scrapy</code> 框架的爬虫。</p>\n<p>优点：实现简单，非 <code>scrapy</code> 框架的爬虫也适用。Master 端压力比较小，Master 和 Slaver 的数据交流也不大。</p>\n<p>缺点：强壮性还不够，需要另外定时保存待爬队列以实现断点续爬功能。各 Slaver 的待爬任务不通用。</p>\n<p>结语<br>如果把 Slaver 比作工人，把 Master 比作工头。策略一就是工人遇到新任务都上报给工头，需要干活的时候就去工头那里领任务；策略二是工头去找任务，工人只管从工头那里领任务干活；策略三就是工人遇到新任务时询问工头此任务是否有人做了，没有的话工人就将此任务加到自己的行程表。</p>\n<p>本文转载，感谢原作者（原文链接：<a href=\"http://blog.csdn.net/bone_ace/article/details/50989104）\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/bone_ace/article/details/50989104）</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"基于-Redis-的三总分布式爬虫策略\"><a href=\"#基于-Redis-的三总分布式爬虫策略\" class=\"headerlink\" title=\"基于 Redis 的三总分布式爬虫策略\"></a>基于 Redis 的三总分布式爬虫策略</h1><h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>爬虫是偏IO型人物，分布式爬虫的实现难度比分布式计算和分布式存储简单的多，分布式爬虫主要需要考虑的问题有以下几点：</p>\n<ul>\n<li>爬虫任务的统一调度</li>\n<li>爬虫任务的统一去重</li>\n<li>存储问题</li>\n<li>速度问题</li>\n<li>足够强壮并且简单方便</li>\n<li>支持“断点续爬”</li>\n</ul>\n<p>Python 分布式爬虫比较常见的是用 <code>scrapy</code> 框架加上 <code>Redis</code> 内存数据库，中间的任务调度等用 <code>scrapy-redis</code> 模块实现。此处介绍一下基于 <code>Redis</code> 的三种分布式策略，其实他们之间还是很相似的，只是为了适应不同的网络或爬虫环境做了一些调整。</p>\n<h2 id=\"策略一\"><a href=\"#策略一\" class=\"headerlink\" title=\"策略一\"></a>策略一</h2><p><img src=\"1.jpg\" alt=\"策略一\"></p>\n<p>Slaver 端从 Master 端拿到任务 <code>Request/URL/ID</code> 进行数据抓取，在抓取数据的同事也生成新任务，并将任务抛给 Master。Master 端只有一个 Redis数据库，负责对Slaver 提交的任务进行去重，加入待爬队列。</p>\n<p>优点：<code>scrapy-redis</code> 默认使用的就是这种策略，我们实现起来很简单，因为任务调度等工作 <code>scrapy-redis</code> 已经帮我们做好了，我们只需要继承 <code>RedisSpider</code>、指定 <code>redis_key</code> 就行了。</p>\n<p>缺点：<code>scrapy-redis</code> 调度的任务是 <code>Request</code>对象，里面信息量比较大 （不仅包括URL，还有<code>callback函数</code>、headers等信息），导致的结果就是会降低爬虫速度。尔且会占用 Redis 大量的存储空间。当然我们可以重写方法来实现调度 URL 或者 用户ID。</p>\n<h2 id=\"策略二\"><a href=\"#策略二\" class=\"headerlink\" title=\"策略二\"></a>策略二</h2><p><img src=\"2.jpg\" alt=\"策略二\"></p>\n<p>这是对策略的一种改进：在 Master 端跑一个程序去生成任务 (Request/URL/ID)。Master 端负责的是生产任务，并把任务去重、加入到待爬队列。Slaver 只管从 Master 端拿任务去爬取。</p>\n<p>优点：将生成任务和抓取数据分开，分工明确，减少了 Master 和 Slaver之间的数据交流；Master 端生成任务还有一个好处就是可以很方便的重写判重策略（当数据量大时优化判重的性能和速度还是很重要的）。</p>\n<p>缺点：像QQ或者新浪这种网站，发送一个请求范湖的内容里面可能包含几十个待爬的用户ID，即几十个新的爬虫任务。但有些网站一个请求只能得到一两个新任务，并且返回内容里也包含爬虫要抓取的目标信息，如果将生成和抓取任务分开反而会降低爬虫的效率。冰晶带宽也是爬虫的一个瓶颈问题，我们要秉承着发送尽量少的请求为原则，同时也是为了减轻网站服务器的压力，要做到一只有道德的 Crawler。所以视情况而定。</p>\n<h2 id=\"策略三\"><a href=\"#策略三\" class=\"headerlink\" title=\"策略三\"></a>策略三</h2><p><img src=\"3.jpg\" alt=\"策略三\"></p>\n<p>Master 中只有一个集合，它只有查询的作用。Slaver在遇到新任务时询问 Master 此任务是够已经爬取，如果未爬则加入 Slaver 自己的待爬队列中，Master 把此任务记为已爬。他和策略一比较像，但是明显比策略一简单。策略一的简单是因为有 <code>scrapy-redis</code> 实现了 <code>scheduler</code> 中间件，他并不适用于非 <code>scrapy</code> 框架的爬虫。</p>\n<p>优点：实现简单，非 <code>scrapy</code> 框架的爬虫也适用。Master 端压力比较小，Master 和 Slaver 的数据交流也不大。</p>\n<p>缺点：强壮性还不够，需要另外定时保存待爬队列以实现断点续爬功能。各 Slaver 的待爬任务不通用。</p>\n<p>结语<br>如果把 Slaver 比作工人，把 Master 比作工头。策略一就是工人遇到新任务都上报给工头，需要干活的时候就去工头那里领任务；策略二是工头去找任务，工人只管从工头那里领任务干活；策略三就是工人遇到新任务时询问工头此任务是否有人做了，没有的话工人就将此任务加到自己的行程表。</p>\n<p>本文转载，感谢原作者（原文链接：<a href=\"http://blog.csdn.net/bone_ace/article/details/50989104）\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/bone_ace/article/details/50989104）</a></p>\n"},{"layout":"keynote","title":"基于Tomcat + Nginx + Memcached 搭建集群HA架构","subtitle":"基于Tomcat + Nginx + Memcached 搭建集群HA架构","date":"2016-07-05T08:03:51.000Z","author":"George Zou","_content":"\n# 名词解释\n\n## 高可用 (HA)\n\nHA (Highly Avaliable) 是一种集群常用策略。即在集群环境中，当一台服务器挂掉之后，其他服务器可以立即接着这台服务器未完成的任务继续工作。\n","source":"_posts/基于Tomcat-Nginx-Memcached-搭建集群HA架构.md","raw":"---\nlayout:     keynote\ntitle:      \"基于Tomcat + Nginx + Memcached 搭建集群HA架构\"\nsubtitle:   \"基于Tomcat + Nginx + Memcached 搭建集群HA架构\"\ndate: 2016-07-05 16:03:51\nauthor:     \"George Zou\"\ntags:\n    - Nginx\n    - Memcached\n    - 集群\n    -\n---\n\n# 名词解释\n\n## 高可用 (HA)\n\nHA (Highly Avaliable) 是一种集群常用策略。即在集群环境中，当一台服务器挂掉之后，其他服务器可以立即接着这台服务器未完成的任务继续工作。\n","slug":"基于Tomcat-Nginx-Memcached-搭建集群HA架构","published":1,"updated":"2018-01-07T22:28:37.000Z","comments":1,"photos":[],"link":"","_id":"cjc88rlh80010a1jgonkzob0p","content":"<h1 id=\"名词解释\"><a href=\"#名词解释\" class=\"headerlink\" title=\"名词解释\"></a>名词解释</h1><h2 id=\"高可用-HA\"><a href=\"#高可用-HA\" class=\"headerlink\" title=\"高可用 (HA)\"></a>高可用 (HA)</h2><p>HA (Highly Avaliable) 是一种集群常用策略。即在集群环境中，当一台服务器挂掉之后，其他服务器可以立即接着这台服务器未完成的任务继续工作。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"名词解释\"><a href=\"#名词解释\" class=\"headerlink\" title=\"名词解释\"></a>名词解释</h1><h2 id=\"高可用-HA\"><a href=\"#高可用-HA\" class=\"headerlink\" title=\"高可用 (HA)\"></a>高可用 (HA)</h2><p>HA (Highly Avaliable) 是一种集群常用策略。即在集群环境中，当一台服务器挂掉之后，其他服务器可以立即接着这台服务器未完成的任务继续工作。</p>\n"}],"PostAsset":[{"_id":"source/_posts/NOTE-Task-Microtask-Queues-and-Schedules/01.png","slug":"01.png","post":"cjc88rlgy000la1jgiurviisn","modified":1,"renderable":0},{"_id":"source/_posts/NOTE-Task-Microtask-Queues-and-Schedules/02.png","slug":"02.png","post":"cjc88rlgy000la1jgiurviisn","modified":1,"renderable":0},{"_id":"source/_posts/js-module-loader/post-bg-js-module.jpg","post":"cjc88rlh6000va1jglj59luas","slug":"post-bg-js-module.jpg","modified":1,"renderable":1},{"_id":"source/_posts/CAP-Consistency-Availability-Partition-Tolerance-理论学习/1.png","post":"cjc88rlgn0007a1jg8ukcdsqt","slug":"1.png","modified":1,"renderable":1},{"_id":"source/_posts/CAP-Consistency-Availability-Partition-Tolerance-理论学习/2.jpg","post":"cjc88rlgn0007a1jg8ukcdsqt","slug":"2.jpg","modified":1,"renderable":1},{"_id":"source/_posts/FP-Growth-Algorithm/1.jpg","post":"cjc88rlgr000ba1jgkkfqbpo2","slug":"1.jpg","modified":1,"renderable":1},{"_id":"source/_posts/FP-Growth-Algorithm/2.jpg","post":"cjc88rlgr000ba1jgkkfqbpo2","slug":"2.jpg","modified":1,"renderable":1},{"_id":"source/_posts/Python-Spider-Framework-Scrapy/01.jpg","post":"cjc88rlh2000qa1jg5rp9jsq5","slug":"01.jpg","modified":1,"renderable":1},{"_id":"source/_posts/Python-Spider-Framework-Scrapy/02.png","post":"cjc88rlh2000qa1jg5rp9jsq5","slug":"02.png","modified":1,"renderable":1},{"_id":"source/_posts/基于Redis的三种分布式爬虫策略/1.jpg","post":"cjc88rlh7000xa1jgvus39udy","slug":"1.jpg","modified":1,"renderable":1},{"_id":"source/_posts/基于Redis的三种分布式爬虫策略/2.jpg","post":"cjc88rlh7000xa1jgvus39udy","slug":"2.jpg","modified":1,"renderable":1},{"_id":"source/_posts/基于Redis的三种分布式爬虫策略/3.jpg","post":"cjc88rlh7000xa1jgvus39udy","slug":"3.jpg","modified":1,"renderable":1}],"PostCategory":[],"PostTag":[{"post_id":"cjc88rlga0001a1jg3av8rkan","tag_id":"cjc88rlgi0005a1jgjn491svn","_id":"cjc88rlgr000aa1jgsnbwynvp"},{"post_id":"cjc88rlgf0003a1jgpmnvt75w","tag_id":"cjc88rlgq0009a1jgn4kt0wfy","_id":"cjc88rlgv000fa1jgd9vrhzpe"},{"post_id":"cjc88rlgk0006a1jg4450w7q7","tag_id":"cjc88rlgu000da1jgjhbggq1o","_id":"cjc88rlh0000ma1jg4xdpcij4"},{"post_id":"cjc88rlgk0006a1jg4450w7q7","tag_id":"cjc88rlgw000ha1jgfczedwi8","_id":"cjc88rlh2000oa1jghhtj97vf"},{"post_id":"cjc88rlgn0007a1jg8ukcdsqt","tag_id":"cjc88rlgu000da1jgjhbggq1o","_id":"cjc88rlh6000ua1jg7b7hos7u"},{"post_id":"cjc88rlgn0007a1jg8ukcdsqt","tag_id":"cjc88rlgw000ha1jgfczedwi8","_id":"cjc88rlh7000wa1jglax5by9o"},{"post_id":"cjc88rlgo0008a1jgv0levmjd","tag_id":"cjc88rlh5000sa1jgxi0y1mf3","_id":"cjc88rlh8000za1jgffq2lrjw"},{"post_id":"cjc88rlgr000ba1jgkkfqbpo2","tag_id":"cjc88rlh5000sa1jgxi0y1mf3","_id":"cjc88rlha0012a1jgl0rf2c13"},{"post_id":"cjc88rlgt000ca1jgptmbri6r","tag_id":"cjc88rlh90011a1jgdkqefg8f","_id":"cjc88rlha0014a1jgm0lpcda5"},{"post_id":"cjc88rlgv000ga1jgj1w3rlfa","tag_id":"cjc88rlha0013a1jgx4xa6hs7","_id":"cjc88rlhb0017a1jgmobi4tdw"},{"post_id":"cjc88rlgv000ga1jgj1w3rlfa","tag_id":"cjc88rlha0015a1jg4h41r963","_id":"cjc88rlhb0018a1jgn2wl0yig"},{"post_id":"cjc88rlgw000ia1jg3ro3jgsy","tag_id":"cjc88rlha0016a1jggpqj44pr","_id":"cjc88rlhb001ba1jg5pvt2xsx"},{"post_id":"cjc88rlgw000ia1jg3ro3jgsy","tag_id":"cjc88rlhb0019a1jg53i3cj1p","_id":"cjc88rlhc001ca1jgma9rfl8s"},{"post_id":"cjc88rlgx000ja1jg1w95hte7","tag_id":"cjc88rlha0016a1jggpqj44pr","_id":"cjc88rlhd001fa1jg2k5iex99"},{"post_id":"cjc88rlgx000ja1jg1w95hte7","tag_id":"cjc88rlhb0019a1jg53i3cj1p","_id":"cjc88rlhd001ga1jg7l6hsuyk"},{"post_id":"cjc88rlh1000na1jgxzxlffn1","tag_id":"cjc88rlhc001ea1jgb7lbdcgi","_id":"cjc88rlhd001ja1jgvrc4vvvg"},{"post_id":"cjc88rlh1000na1jgxzxlffn1","tag_id":"cjc88rlhd001ha1jgw5zdd0vv","_id":"cjc88rlhe001ka1jg4inlfwik"},{"post_id":"cjc88rlh2000qa1jg5rp9jsq5","tag_id":"cjc88rlhd001ha1jgw5zdd0vv","_id":"cjc88rlhe001na1jg1mksi0xb"},{"post_id":"cjc88rlh2000qa1jg5rp9jsq5","tag_id":"cjc88rlhe001la1jg39q5tqc4","_id":"cjc88rlhe001oa1jg126qh028"},{"post_id":"cjc88rlh4000ra1jgp64134zi","tag_id":"cjc88rlha0013a1jgx4xa6hs7","_id":"cjc88rlhf001ra1jgp0rum803"},{"post_id":"cjc88rlh4000ra1jgp64134zi","tag_id":"cjc88rlhe001pa1jggz4t78wd","_id":"cjc88rlhf001sa1jgcesy0x03"},{"post_id":"cjc88rlh5000ta1jgtxpssupd","tag_id":"cjc88rlha0013a1jgx4xa6hs7","_id":"cjc88rlhg001va1jg7xvjqfbk"},{"post_id":"cjc88rlh5000ta1jgtxpssupd","tag_id":"cjc88rlhf001ta1jgywx3196c","_id":"cjc88rlhg001wa1jgaz1i7nnp"},{"post_id":"cjc88rlh6000va1jglj59luas","tag_id":"cjc88rlha0013a1jgx4xa6hs7","_id":"cjc88rlhh001za1jgcxgxb0o9"},{"post_id":"cjc88rlh6000va1jglj59luas","tag_id":"cjc88rlhf001ta1jgywx3196c","_id":"cjc88rlhh0020a1jgpacvsvmq"},{"post_id":"cjc88rlh7000xa1jgvus39udy","tag_id":"cjc88rlhh001ya1jgrr2g168d","_id":"cjc88rlhj0024a1jgnv1cun2y"},{"post_id":"cjc88rlh7000xa1jgvus39udy","tag_id":"cjc88rlhh0021a1jgzwxe8k46","_id":"cjc88rlhj0025a1jgxmaui2mj"},{"post_id":"cjc88rlh7000xa1jgvus39udy","tag_id":"cjc88rlhd001ha1jgw5zdd0vv","_id":"cjc88rlhj0027a1jgxz5rn8pq"},{"post_id":"cjc88rlh80010a1jgonkzob0p","tag_id":"cjc88rlhi0023a1jgioeslo68","_id":"cjc88rlhk0029a1jgyxspi932"},{"post_id":"cjc88rlh80010a1jgonkzob0p","tag_id":"cjc88rlhj0026a1jgnxtn9i5f","_id":"cjc88rlhk002aa1jg71fsbaf5"},{"post_id":"cjc88rlh80010a1jgonkzob0p","tag_id":"cjc88rlhj0028a1jg3qx9jwm9","_id":"cjc88rlhk002ba1jgbqshrumt"}],"Tag":[{"name":"ES6","_id":"cjc88rlgi0005a1jgjn491svn"},{"name":"Angular","_id":"cjc88rlgq0009a1jgn4kt0wfy"},{"name":"HTML布局","_id":"cjc88rlgu000da1jgjhbggq1o"},{"name":"前端","_id":"cjc88rlgw000ha1jgfczedwi8"},{"name":"Analysis","_id":"cjc88rlh5000sa1jgxi0y1mf3"},{"name":"工具使用","_id":"cjc88rlh90011a1jgdkqefg8f"},{"name":"前端开发","_id":"cjc88rlha0013a1jgx4xa6hs7"},{"name":"CSS","_id":"cjc88rlha0015a1jg4h41r963"},{"name":"Java","_id":"cjc88rlha0016a1jggpqj44pr"},{"name":"推送","_id":"cjc88rlhb0019a1jg53i3cj1p"},{"name":"数据","_id":"cjc88rlhc001ea1jgb7lbdcgi"},{"name":"Python","_id":"cjc88rlhd001ha1jgw5zdd0vv"},{"name":"Spider","_id":"cjc88rlhe001la1jg39q5tqc4"},{"name":"Angular2","_id":"cjc88rlhe001pa1jggz4t78wd"},{"name":"JavaScript","_id":"cjc88rlhf001ta1jgywx3196c"},{"name":"爬虫","_id":"cjc88rlhh001ya1jgrr2g168d"},{"name":"Redis","_id":"cjc88rlhh0021a1jgzwxe8k46"},{"name":"Nginx","_id":"cjc88rlhi0023a1jgioeslo68"},{"name":"Memcached","_id":"cjc88rlhj0026a1jgnxtn9i5f"},{"name":"集群","_id":"cjc88rlhj0028a1jg3qx9jwm9"}]}}