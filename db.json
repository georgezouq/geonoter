{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/img/avatar.jpg","path":"img/avatar.jpg","modified":0,"renderable":0},{"_id":"source/img/favicon.ico","path":"img/favicon.ico","modified":0,"renderable":0},{"_id":"source/img/icon_wechat.png","path":"img/icon_wechat.png","modified":0,"renderable":0},{"_id":"source/img/tag-bg.jpg","path":"img/tag-bg.jpg","modified":0,"renderable":0},{"_id":"source/img/404-bg.jpg","path":"img/404-bg.jpg","modified":0,"renderable":0},{"_id":"source/img/home-bg-o.jpg","path":"img/home-bg-o.jpg","modified":0,"renderable":0},{"_id":"themes/huxblog/source/css/hux-blog.min.css","path":"css/hux-blog.min.css","modified":0,"renderable":1},{"_id":"themes/huxblog/source/css/hux-blog.css","path":"css/hux-blog.css","modified":0,"renderable":1},{"_id":"themes/huxblog/source/css/syntax.styl","path":"css/syntax.styl","modified":0,"renderable":1},{"_id":"themes/huxblog/source/fonts/glyphicons-halflings-regular.eot","path":"fonts/glyphicons-halflings-regular.eot","modified":0,"renderable":1},{"_id":"themes/huxblog/source/fonts/glyphicons-halflings-regular.ttf","path":"fonts/glyphicons-halflings-regular.ttf","modified":0,"renderable":1},{"_id":"themes/huxblog/source/fonts/glyphicons-halflings-regular.woff","path":"fonts/glyphicons-halflings-regular.woff","modified":0,"renderable":1},{"_id":"themes/huxblog/source/fonts/glyphicons-halflings-regular.woff2","path":"fonts/glyphicons-halflings-regular.woff2","modified":0,"renderable":1},{"_id":"themes/huxblog/source/js/hux-blog.js","path":"js/hux-blog.js","modified":0,"renderable":1},{"_id":"themes/huxblog/source/js/bootstrap.min.js","path":"js/bootstrap.min.js","modified":0,"renderable":1},{"_id":"themes/huxblog/source/js/hux-blog.min.js","path":"js/hux-blog.min.js","modified":0,"renderable":1},{"_id":"themes/huxblog/source/js/jquery.tagcloud.js","path":"js/jquery.tagcloud.js","modified":0,"renderable":1},{"_id":"themes/huxblog/source/js/jquery.nav.js","path":"js/jquery.nav.js","modified":0,"renderable":1},{"_id":"source/img/home-bg.jpg","path":"img/home-bg.jpg","modified":0,"renderable":0},{"_id":"themes/huxblog/source/css/bootstrap.min.css","path":"css/bootstrap.min.css","modified":0,"renderable":1},{"_id":"themes/huxblog/source/fonts/glyphicons-halflings-regular.svg","path":"fonts/glyphicons-halflings-regular.svg","modified":0,"renderable":1},{"_id":"themes/huxblog/source/js/bootstrap.js","path":"js/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/huxblog/source/js/jquery.min.js","path":"js/jquery.min.js","modified":0,"renderable":1},{"_id":"source/img/contact-bg.jpg","path":"img/contact-bg.jpg","modified":0,"renderable":0},{"_id":"themes/huxblog/source/css/bootstrap.css","path":"css/bootstrap.css","modified":0,"renderable":1},{"_id":"themes/huxblog/source/js/jquery.js","path":"js/jquery.js","modified":0,"renderable":1},{"_id":"source/img/about-bg.jpg","path":"img/about-bg.jpg","modified":0,"renderable":0}],"Cache":[{"_id":"themes/huxblog/README.md","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1466143270574},{"_id":"source/404.md","hash":"8d0d831a77fe92a9e1530366ed90dec6d73d3aef","modified":1466143270458},{"_id":"themes/huxblog/LICENSE","hash":"c48eaae47a703282e0ffe7b91d69366452046214","modified":1466143270573},{"_id":"themes/huxblog/layout/archive.ejs","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1466143270582},{"_id":"source/_posts/About ES6.markdown","hash":"4428c5ce938dabdd1f85429ecb9ef651d86bc2f9","modified":1466387158113},{"_id":"source/_posts/First Line for TypeScript.markdown","hash":"ed5fb0948115f5797f4ab7bb06e0a82d1ab0f9d2","modified":1466387326021},{"_id":"source/_posts/AngularJS 1x Style Guide.markdown","hash":"5018f89d43914436579173b53c5c5c20ed5b2aeb","modified":1466387580604},{"_id":"source/_posts/Hello World with Spark.markdown","hash":"18cc1b427cd99755c8a517eb36bf8cae1053e244","modified":1466387353067},{"_id":"source/_posts/Gulp Getting Started.markdown","hash":"2a280a799c49ab64d8826096f03212ddc8fc50cd","modified":1466387338475},{"_id":"source/_posts/How use Markdown to write GitHub README.markdown","hash":"6a72c9be919a32bca0689823b00bd5bd4dbf02fe","modified":1466387376348},{"_id":"source/_posts/JqueryUI-Draggable.markdown","hash":"1d852970da06e69530ca8546480312bcb0602063","modified":1466387408905},{"_id":"source/_posts/JQuery-Sortable.markdown","hash":"eaacf9326e73c7a9881d5451a571598970fbccdc","modified":1466387396852},{"_id":"source/_posts/Less And Sass.markdown","hash":"75a9c5af484fc69f48812c8fa81daeaeea647759","modified":1466387440933},{"_id":"source/_posts/MQTT Agreement Basics.markdown","hash":"0fc7cf80886a5b13294c7ecca5c9af2dea15bea4","modified":1466387453197},{"_id":"source/_posts/Python Crawler.markdown","hash":"5ef471061ee4b07cb0800ba6e4baf7d802ec5254","modified":1466387478559},{"_id":"source/_posts/MQTT Agreement Pushlet.markdown","hash":"d1986727d7a973ad9b5e3f5623eafdd85209641e","modified":1466387465018},{"_id":"source/_posts/Transitioning from server to client side web development with angular2.markdown","hash":"741fb1bcc6e3b929b0a1b82c9e26e3dc343dcf12","modified":1466149546737},{"_id":"source/_posts/js-module-7day.markdown","hash":"eccc63437f86d692f8d41c973230f0a19a8ac9b3","modified":1466143270462},{"_id":"source/_posts/js-module-loader.markdown","hash":"b4f1194f1adadda2066b8c72d79b1c7e427169e4","modified":1466143270477},{"_id":"source/about/index.md","hash":"54db573b59b49d5490e8635ec3228046c797235f","modified":1466143270531},{"_id":"source/img/avatar.jpg","hash":"49cfa597392c4a116584c07690efbbc06354acc7","modified":1466143270546},{"_id":"source/img/favicon.ico","hash":"a8ee7712f6560180efccb68546de6ea0d937fff3","modified":1466143270551},{"_id":"source/img/icon_wechat.png","hash":"7fdb00c9017236e05c1b3e6da38a2cc382fd69fa","modified":1466143270570},{"_id":"source/tags/index.md","hash":"bc710b5b8db6f01940957ce744a37fd564752c3b","modified":1466143270572},{"_id":"themes/huxblog/layout/404.ejs","hash":"c9b488d74c21fe9f35f642a5d19a138099ddf8a8","modified":1466143270579},{"_id":"themes/huxblog/layout/about.ejs","hash":"0671d30031c2c64dc4d8ef8a3b7632ddce38c6d1","modified":1466143270582},{"_id":"themes/huxblog/layout/index.ejs","hash":"fdef208207993793639485ec8dc6b2cbea1de8f6","modified":1466143270582},{"_id":"themes/huxblog/layout/keynote.ejs","hash":"6d635f246951a65347bd9803a96d12523f21144f","modified":1466143270583},{"_id":"themes/huxblog/layout/layout.ejs","hash":"a98fcc3a80f9e9cdedf3a613ff402806f8de7218","modified":1466143270585},{"_id":"themes/huxblog/layout/page.ejs","hash":"e7c0a92e3de32a8e51ec24c314855487b3e07c55","modified":1466143270585},{"_id":"themes/huxblog/layout/post.ejs","hash":"a408ad6f18cf4dff94ee8f7690cd5ee77bf1b0bf","modified":1466143270586},{"_id":"themes/huxblog/layout/tags.ejs","hash":"3b5cb37b097895e6045b4dca91b8d4e39535f806","modified":1466143270586},{"_id":"themes/huxblog/languages_to_be_added/default.yml","hash":"3cd0873b310cbf2fe022ee18d55a6113b347ea09","modified":1466143270575},{"_id":"themes/huxblog/languages_to_be_added/de.yml","hash":"02a98ba2b93e30a00ae7979fbe90b767a27290f0","modified":1466143270574},{"_id":"themes/huxblog/languages_to_be_added/en.yml","hash":"3cd0873b310cbf2fe022ee18d55a6113b347ea09","modified":1466143270575},{"_id":"themes/huxblog/languages_to_be_added/es.yml","hash":"fb089145368422ac47da9eb00fed05b15c904aa2","modified":1466143270575},{"_id":"themes/huxblog/languages_to_be_added/pl.yml","hash":"6dc5d1b2aa75ae4c527089a770f43bafb91d80f4","modified":1466143270577},{"_id":"themes/huxblog/languages_to_be_added/no.yml","hash":"5ce3a1043ff85cecf83f3b5b0cdad2df44fa0192","modified":1466143270576},{"_id":"themes/huxblog/languages_to_be_added/zh-CN.yml","hash":"6d712d9eb6ba12213dcd76b532cd86e9da83cfa3","modified":1466143270578},{"_id":"themes/huxblog/languages_to_be_added/ru.yml","hash":"2cfaf93704ea4ac3f374c69bab89ca31916faa33","modified":1466143270577},{"_id":"themes/huxblog/languages_to_be_added/zh-TW.yml","hash":"45c84384a05fdb7e32a3e2d498ea180be7dccfa9","modified":1466143270578},{"_id":"source/img/tag-bg.jpg","hash":"8844274a812ae19e8f2a3b7e4e465342e63eb852","modified":1466143270571},{"_id":"source/_posts/js-version/keep-calm-and-learn-javascript.png","hash":"49ea101b92ce5e136a19e6b11162f8f4126fe01f","modified":1466143270481},{"_id":"source/_posts/js-version/post-bg-js-version.jpg","hash":"1598a1180c491f36b9036415b622bd9e5ad5d3bc","modified":1466143270524},{"_id":"source/img/404-bg.jpg","hash":"68f7d525269a94287e0ad18713ae232fb59dcf71","modified":1466143270536},{"_id":"source/img/home-bg-o.jpg","hash":"990f6f9dd0ecb5348bfcc47305553d58c0d8f326","modified":1466143270568},{"_id":"themes/huxblog/layout/_partial/footer.ejs","hash":"efab00c18108f9c6d69ac92b6f8272cbcef7f1a3","modified":1466143270580},{"_id":"themes/huxblog/layout/_partial/head.ejs","hash":"df354460eb61f922baa05844222792ff3cde434d","modified":1466143270580},{"_id":"themes/huxblog/layout/_partial/nav.ejs","hash":"e65bfec3d14a9eb9f1e09b592bb34023e6bf6e83","modified":1466143270581},{"_id":"themes/huxblog/layout/_partial/pagination.ejs","hash":"cd61e4dbbf6020ad094c8e66ec06e8c38ebcd122","modified":1466143270581},{"_id":"themes/huxblog/source/css/hux-blog.min.css","hash":"1baef04de262aeb7023d835429b49a805ac4ab40","modified":1466143270591},{"_id":"themes/huxblog/source/css/hux-blog.css","hash":"50e36726c65ec8c6428ccbc375bcab79f76f2bc8","modified":1466143270590},{"_id":"themes/huxblog/source/css/syntax.styl","hash":"a8dd3d14c7a48f408d2b20f86c47a19e394c66d6","modified":1466143270591},{"_id":"themes/huxblog/source/fonts/glyphicons-halflings-regular.eot","hash":"86b6f62b7853e67d3e635f6512a5a5efc58ea3c3","modified":1466143270592},{"_id":"themes/huxblog/source/fonts/glyphicons-halflings-regular.ttf","hash":"44bc1850f570972267b169ae18f1cb06b611ffa2","modified":1466143270596},{"_id":"themes/huxblog/source/fonts/glyphicons-halflings-regular.woff","hash":"278e49a86e634da6f2a02f3b47dd9d2a8f26210f","modified":1466143270596},{"_id":"themes/huxblog/source/fonts/glyphicons-halflings-regular.woff2","hash":"ca35b697d99cae4d1b60f2d60fcd37771987eb07","modified":1466143270597},{"_id":"themes/huxblog/source/js/hux-blog.js","hash":"3d3c93e42a9990b2a2e6df5a08e9816f9a221e0f","modified":1466143270599},{"_id":"themes/huxblog/source/js/bootstrap.min.js","hash":"313da686ebbe387064f2d1899c64ea562b81eb40","modified":1466143270599},{"_id":"themes/huxblog/source/js/hux-blog.min.js","hash":"ee99af17a1a69ac8d85a695fed0349ba202789ae","modified":1466143270600},{"_id":"themes/huxblog/source/js/jquery.tagcloud.js","hash":"448017ff32f75f444ed7985d10a21b3ad92ab100","modified":1466143270605},{"_id":"themes/huxblog/source/js/jquery.nav.js","hash":"bc6383fa2aa8f437978cf044a3b6f10a65114398","modified":1466143270605},{"_id":"source/_posts/js-module-loader/post-bg-js-module.jpg","hash":"4a43bfa6b69c79a6ef90bd852fe5756d241733cd","modified":1466143270479},{"_id":"source/_posts/js-version/javascript-java.jpg","hash":"881e35e241a8be40f3c4e3a6f57d5402247c1eb3","modified":1466143270481},{"_id":"source/_posts/unix-linux-note/post-bg-unix-linux.jpg","hash":"e8f3739cb78ea6d1645665d07ebdb79881774fb6","modified":1466143270529},{"_id":"source/img/home-bg.jpg","hash":"a191201c3a98728e6ea66d6827df827ecfcc9d33","modified":1466143270569},{"_id":"themes/huxblog/source/css/bootstrap.min.css","hash":"d2333a926ae25bbd3056814f13fec0843468e49e","modified":1466143270590},{"_id":"themes/huxblog/source/fonts/glyphicons-halflings-regular.svg","hash":"4dcf0ab896f5417047f881de91bad10dcbda48c6","modified":1466143270593},{"_id":"themes/huxblog/source/js/bootstrap.js","hash":"5d69034fb6eded2e5961ea54dd47129a88cd5182","modified":1466143270598},{"_id":"themes/huxblog/source/js/jquery.min.js","hash":"17a740d68a1c330876c198b6a4d9319f379f3af2","modified":1466143270604},{"_id":"source/img/contact-bg.jpg","hash":"6af63305c923899017e727b5ca968a2703bc08cf","modified":1466143270550},{"_id":"themes/huxblog/source/css/bootstrap.css","hash":"d1a24afac31222d70b4e001e0361ef045aa42043","modified":1466143270588},{"_id":"source/_posts/hello-2015/post-bg-2015.jpg","hash":"7118d1af8ac638dc55ee63d0b17e704811c6a37a","modified":1466143270461},{"_id":"themes/huxblog/source/js/jquery.js","hash":"4bb763dc96da604aed08ac024a1a3f5de73eea39","modified":1466143270603},{"_id":"source/img/about-bg.jpg","hash":"b5814b2d10eb38dfda0072365567f3823bc34aba","modified":1466143270543}],"Category":[],"Data":[],"Page":[{"layout":"404","description":"你来到了没有知识的荒原 :(","header-img":"img/404-bg.jpg","_content":"","source":"404.md","raw":"---\nlayout: 404\ndescription: \"你来到了没有知识的荒原 :(\"\nheader-img: \"img/404-bg.jpg\"\n---\n","date":"2016-06-20T01:39:37.517Z","updated":"2016-06-17T06:01:10.458Z","path":"404.html","title":"","comments":1,"_id":"cipnd96zh0000yww71duaj68o","content":"","excerpt":"","more":""},{"layout":"tags","title":"Tags","description":"Hey, this is Tags.","header-img":"img/tag-bg.jpg","_content":"","source":"tags/index.md","raw":"---\nlayout: \"tags\"\ntitle: \"Tags\"\ndescription: \"Hey, this is Tags.\"\nheader-img: \"img/tag-bg.jpg\"\n---\n","date":"2016-06-20T01:39:37.549Z","updated":"2016-06-17T06:01:10.572Z","path":"tags/index.html","comments":1,"_id":"cipnd9727001gyww73huvwtig","content":"","excerpt":"","more":""},{"layout":"about","title":"About","date":"2016-04-20T20:48:33.000Z","description":"Hey, this is Kaijun.","header-img":"img/about-bg.jpg","_content":"\n\n>写写代码，做做设计，看看产品。\n>世界那么大，多玩玩看看。\n\n9月21日上午，阳光明媚，鲜花斗艳。帕洛阿尔托苹果店里欢声笑语，人头攒动。苹果公司首席执行官蒂姆·库克先生在店长欧阳猛南陪同下，不远千米，深入到一线店面，为那里的员工带去节曰的问候和良好的祝愿。<br><br>“果粉们，你们辛苦了，我代表某果公司，祝你们身体健康，生活幸福，工作成功！”库克亲切慰问广大员工和顾客，并就iOS7、iPhone 5S和iPhone 5C的销售状况进行调研。 <br><br>“您现在每月工资有多少？肾5S拿到了吗？”在店里，库克关切地向果粉们问起这一问题。当听说果粉们排到了5S，库克满意地连连点头。接着他指出，近年来苹果事业发展取得巨大成就，特别是iPhone影响剧增，老百姓对iOS满意度逐步提高，在这个转变过程中，果粉的辛勤工作功不可没。<br><br>库克看到一个中国小朋友在排队买iPhone 5S，亲切的问：“5288元一台能承受不？”小朋友回答到：“能！”当得知这位小朋友卖了一个肾来买iPhone 5S时，库克叮嘱道：“在支持苹果的同时，也要爱护身体。”<br><br>库克与购买苹果手机的果粉们兴致勃勃地参观了苹果专卖店，和员工们拉了拉家常，并饶有兴趣地玩了四盘切西瓜游戏，与普通员工同乐。<br><br>在交谈中，库克多次关心地强调：“有了iPhone 5C，就不卖iPhone 5了。”并对顾客说：“好好休息，身体是革命的本钱嘛！”会谈始终在亲切友好的气氛中进行。<br><br>顾客们就库克的讲话达成了广泛的共识，并承认世界上只有iOS最流畅，要紧紧的团结在以库克先生为首席执行官的苹果公司集体周围，一心一意抓学习，聚精会神谋发展。<br>\n<br>帕洛阿尔托苹果专卖店当日原则通过《蒂姆·库克首席执行官在加州新苹果店的讲话纪要》，并下发各分店认真学习、研讨。\n\n<p style=\"text-align:right;\">\n    —— <a href=\"http://www.zhihu.com/question/19687065\">李书航 － 什么是「共产中文腔调」？ </a>\n</p>","source":"about/index.md","raw":"---\nlayout: \"about\"\ntitle: \"About\"\ndate: 2016-04-21 04:48:33\ndescription: \"Hey, this is Kaijun.\"\nheader-img: \"img/about-bg.jpg\"\n---\n\n\n>写写代码，做做设计，看看产品。\n>世界那么大，多玩玩看看。\n\n9月21日上午，阳光明媚，鲜花斗艳。帕洛阿尔托苹果店里欢声笑语，人头攒动。苹果公司首席执行官蒂姆·库克先生在店长欧阳猛南陪同下，不远千米，深入到一线店面，为那里的员工带去节曰的问候和良好的祝愿。<br><br>“果粉们，你们辛苦了，我代表某果公司，祝你们身体健康，生活幸福，工作成功！”库克亲切慰问广大员工和顾客，并就iOS7、iPhone 5S和iPhone 5C的销售状况进行调研。 <br><br>“您现在每月工资有多少？肾5S拿到了吗？”在店里，库克关切地向果粉们问起这一问题。当听说果粉们排到了5S，库克满意地连连点头。接着他指出，近年来苹果事业发展取得巨大成就，特别是iPhone影响剧增，老百姓对iOS满意度逐步提高，在这个转变过程中，果粉的辛勤工作功不可没。<br><br>库克看到一个中国小朋友在排队买iPhone 5S，亲切的问：“5288元一台能承受不？”小朋友回答到：“能！”当得知这位小朋友卖了一个肾来买iPhone 5S时，库克叮嘱道：“在支持苹果的同时，也要爱护身体。”<br><br>库克与购买苹果手机的果粉们兴致勃勃地参观了苹果专卖店，和员工们拉了拉家常，并饶有兴趣地玩了四盘切西瓜游戏，与普通员工同乐。<br><br>在交谈中，库克多次关心地强调：“有了iPhone 5C，就不卖iPhone 5了。”并对顾客说：“好好休息，身体是革命的本钱嘛！”会谈始终在亲切友好的气氛中进行。<br><br>顾客们就库克的讲话达成了广泛的共识，并承认世界上只有iOS最流畅，要紧紧的团结在以库克先生为首席执行官的苹果公司集体周围，一心一意抓学习，聚精会神谋发展。<br>\n<br>帕洛阿尔托苹果专卖店当日原则通过《蒂姆·库克首席执行官在加州新苹果店的讲话纪要》，并下发各分店认真学习、研讨。\n\n<p style=\"text-align:right;\">\n    —— <a href=\"http://www.zhihu.com/question/19687065\">李书航 － 什么是「共产中文腔调」？ </a>\n</p>","updated":"2016-06-17T06:01:10.531Z","path":"about/index.html","comments":1,"_id":"cipnd972a001iyww7ici8vg21","content":"<blockquote>\n<p>写写代码，做做设计，看看产品。<br>世界那么大，多玩玩看看。</p>\n</blockquote>\n<p>9月21日上午，阳光明媚，鲜花斗艳。帕洛阿尔托苹果店里欢声笑语，人头攒动。苹果公司首席执行官蒂姆·库克先生在店长欧阳猛南陪同下，不远千米，深入到一线店面，为那里的员工带去节曰的问候和良好的祝愿。<br><br>“果粉们，你们辛苦了，我代表某果公司，祝你们身体健康，生活幸福，工作成功！”库克亲切慰问广大员工和顾客，并就iOS7、iPhone 5S和iPhone 5C的销售状况进行调研。 <br><br>“您现在每月工资有多少？肾5S拿到了吗？”在店里，库克关切地向果粉们问起这一问题。当听说果粉们排到了5S，库克满意地连连点头。接着他指出，近年来苹果事业发展取得巨大成就，特别是iPhone影响剧增，老百姓对iOS满意度逐步提高，在这个转变过程中，果粉的辛勤工作功不可没。<br><br>库克看到一个中国小朋友在排队买iPhone 5S，亲切的问：“5288元一台能承受不？”小朋友回答到：“能！”当得知这位小朋友卖了一个肾来买iPhone 5S时，库克叮嘱道：“在支持苹果的同时，也要爱护身体。”<br><br>库克与购买苹果手机的果粉们兴致勃勃地参观了苹果专卖店，和员工们拉了拉家常，并饶有兴趣地玩了四盘切西瓜游戏，与普通员工同乐。<br><br>在交谈中，库克多次关心地强调：“有了iPhone 5C，就不卖iPhone 5了。”并对顾客说：“好好休息，身体是革命的本钱嘛！”会谈始终在亲切友好的气氛中进行。<br><br>顾客们就库克的讲话达成了广泛的共识，并承认世界上只有iOS最流畅，要紧紧的团结在以库克先生为首席执行官的苹果公司集体周围，一心一意抓学习，聚精会神谋发展。<br><br><br>帕洛阿尔托苹果专卖店当日原则通过《蒂姆·库克首席执行官在加州新苹果店的讲话纪要》，并下发各分店认真学习、研讨。</p>\n<p style=\"text-align:right;\"><br>    —— <a href=\"http://www.zhihu.com/question/19687065\" target=\"_blank\" rel=\"external\">李书航 － 什么是「共产中文腔调」？ </a><br></p>","excerpt":"","more":"<blockquote>\n<p>写写代码，做做设计，看看产品。<br>世界那么大，多玩玩看看。</p>\n</blockquote>\n<p>9月21日上午，阳光明媚，鲜花斗艳。帕洛阿尔托苹果店里欢声笑语，人头攒动。苹果公司首席执行官蒂姆·库克先生在店长欧阳猛南陪同下，不远千米，深入到一线店面，为那里的员工带去节曰的问候和良好的祝愿。<br><br>“果粉们，你们辛苦了，我代表某果公司，祝你们身体健康，生活幸福，工作成功！”库克亲切慰问广大员工和顾客，并就iOS7、iPhone 5S和iPhone 5C的销售状况进行调研。 <br><br>“您现在每月工资有多少？肾5S拿到了吗？”在店里，库克关切地向果粉们问起这一问题。当听说果粉们排到了5S，库克满意地连连点头。接着他指出，近年来苹果事业发展取得巨大成就，特别是iPhone影响剧增，老百姓对iOS满意度逐步提高，在这个转变过程中，果粉的辛勤工作功不可没。<br><br>库克看到一个中国小朋友在排队买iPhone 5S，亲切的问：“5288元一台能承受不？”小朋友回答到：“能！”当得知这位小朋友卖了一个肾来买iPhone 5S时，库克叮嘱道：“在支持苹果的同时，也要爱护身体。”<br><br>库克与购买苹果手机的果粉们兴致勃勃地参观了苹果专卖店，和员工们拉了拉家常，并饶有兴趣地玩了四盘切西瓜游戏，与普通员工同乐。<br><br>在交谈中，库克多次关心地强调：“有了iPhone 5C，就不卖iPhone 5了。”并对顾客说：“好好休息，身体是革命的本钱嘛！”会谈始终在亲切友好的气氛中进行。<br><br>顾客们就库克的讲话达成了广泛的共识，并承认世界上只有iOS最流畅，要紧紧的团结在以库克先生为首席执行官的苹果公司集体周围，一心一意抓学习，聚精会神谋发展。<br><br><br>帕洛阿尔托苹果专卖店当日原则通过《蒂姆·库克首席执行官在加州新苹果店的讲话纪要》，并下发各分店认真学习、研讨。</p>\n<p style=\"text-align:right;\"><br>    —— <a href=\"http://www.zhihu.com/question/19687065\">李书航 － 什么是「共产中文腔调」？ </a><br></p>"}],"Post":[{"layout":"keynote","title":"ES6 Getting Start - Commend","subtitle":"Keynote: Commend with ES6","iframe":null,"date":"2016-06-16T16:00:00.000Z","author":"","header-img":"post-bg-js-version.jpg","_content":"# ES6 部分方法点评\n\n## 箭头函数(Arrow Functions)\n\n  箭头函数时ES6的语法糖之一:\n\n```javascript\n//ES5\nvar selected = allJobs.filter(function(job){\n  return job.isSelected();\n});\n\n//ES6\nvar selected = allJobs.filter(job => job.isSelected());\n\n```\n\n  多行方法体的方式:\n\n```javascript\n//ES5\n$('#confetti-btn').click(function(event){\n  playTrumpet();\n  fireConfettiCannon();\n});\n\n//ES6\n$(\"#confetti-btn\").click(event => {\n  playTrumpet();\n  fireConfettiCannon();\n})\n```\n\n语法大体是这样的:\n\n    ([函数的形参,多个参数则以逗号分隔]) => [函数返回的值/表达式]\n\n此外，还有最重要的一点，箭头函数并没有自己的`this`值，箭头函数内的`this`值继承自外围作用域。\n\n```javascript\n  {\n    add: function(piece){},\n    ...\n    addAll:function addAll(prieces){\n      var self = this;\n      _.each(pieces,function(price){\n        self.add(piece);\n      });\n    }\n\n  }\n\n  //ES6\n  {\n    add:function(piece){},\n    ...\n    addAll:function addAll(pieces){\n      _.each(pieces,piece => this.add(price));\n    },\n    ...\n  }\n\n```\n\n## LET\n\nES6 `let`关键字的出现意味着JavaScript迎来了块级作用域({},for,if),可以有效的防止临时变量污染到外层变量:\n\n```javascript\n  function f1(){\n    let n = 5;\n    if(true){\n      let n = 10;\n    }\n    console.log(n); //5\n  }\n\n```\n\n## CONST\n\n  `const`用来定义常量，一旦定义了常量就不可修改。\n\n## DESTRUCTURING\n\n  destructuring 解构，ES6允许按照一定的模式，从数组和对象中提取值。对变量进行赋值，这成为解构(Destructuring):\n\n```javascript\n'use strict';\n\n//对数组的解构赋值\nlet [foo,[[bar],baz]] = [1,[[2],3]];\nconsole.log(foo); //1\nconsole.log(bar); //2\nconsole.log(baz); //3\n\n//对象的解构赋值\nvar {foo,bar} = {foo:\"aaa\",bar:\"bbb\"};\nconsole.log(foo); //\"aaa\"\nconsole.log(bar); //\"bbb\"\n\n//字符串的解构赋值\nconst [a,b,v,d,e] = \"hello\";\nconsole.log(a+b+c+d+e); //'hello'\n\n\n```\n\n跟箭头函数一样，这也是一个全新的语法糖，它的用处有很对，例如在我们封装参数的时候：\n\n```javascript\n// ES5 二逼青年写法\nfunction study(id, name, sex, grade, nickname, age, address) {\n    console.log(id);\n    console.log(name);\n    console.log(sex);\n    console.log(grade);\n    console.log(nickname);\n    console.log(age);\n    console.log(address);\n}\n// ES5 正常青年写法\nfunction study(params) {\n    console.log(params.id);\n    console.log(params.name);\n    console.log(params.sex);\n    console.log(params.grade);\n    console.log(params.nickname);\n    console.log(params.age);\n    console.log(params.address);\n}\n```\n\n```javascript\n//ES6\nfunction study({id, name, sex, grade, nickname, age, address}) {\n    console.log(id);\n    console.log(name);\n    console.log(sex);\n    console.log(grade);\n    console.log(nickname);\n    console.log(age);\n    console.log(address);    \n}\nstudy({\n    id: 1,\n    name: '林有德',\n    sex: '男',\n    grade: '一年级',\n    nickname: '布莱德',\n    age: 12,\n    address: '木马号'\n});\n```\n","source":"_posts/About ES6.markdown","raw":"---\nlayout:     keynote\ntitle:      \"ES6 Getting Start - Commend\"\nsubtitle:   \"Keynote: Commend with ES6\"\niframe:     \ndate:       2016-06-17\nauthor:     \"\"\nheader-img: \"post-bg-js-version.jpg\"\ntags:\n    - ES6\n---\n# ES6 部分方法点评\n\n## 箭头函数(Arrow Functions)\n\n  箭头函数时ES6的语法糖之一:\n\n```javascript\n//ES5\nvar selected = allJobs.filter(function(job){\n  return job.isSelected();\n});\n\n//ES6\nvar selected = allJobs.filter(job => job.isSelected());\n\n```\n\n  多行方法体的方式:\n\n```javascript\n//ES5\n$('#confetti-btn').click(function(event){\n  playTrumpet();\n  fireConfettiCannon();\n});\n\n//ES6\n$(\"#confetti-btn\").click(event => {\n  playTrumpet();\n  fireConfettiCannon();\n})\n```\n\n语法大体是这样的:\n\n    ([函数的形参,多个参数则以逗号分隔]) => [函数返回的值/表达式]\n\n此外，还有最重要的一点，箭头函数并没有自己的`this`值，箭头函数内的`this`值继承自外围作用域。\n\n```javascript\n  {\n    add: function(piece){},\n    ...\n    addAll:function addAll(prieces){\n      var self = this;\n      _.each(pieces,function(price){\n        self.add(piece);\n      });\n    }\n\n  }\n\n  //ES6\n  {\n    add:function(piece){},\n    ...\n    addAll:function addAll(pieces){\n      _.each(pieces,piece => this.add(price));\n    },\n    ...\n  }\n\n```\n\n## LET\n\nES6 `let`关键字的出现意味着JavaScript迎来了块级作用域({},for,if),可以有效的防止临时变量污染到外层变量:\n\n```javascript\n  function f1(){\n    let n = 5;\n    if(true){\n      let n = 10;\n    }\n    console.log(n); //5\n  }\n\n```\n\n## CONST\n\n  `const`用来定义常量，一旦定义了常量就不可修改。\n\n## DESTRUCTURING\n\n  destructuring 解构，ES6允许按照一定的模式，从数组和对象中提取值。对变量进行赋值，这成为解构(Destructuring):\n\n```javascript\n'use strict';\n\n//对数组的解构赋值\nlet [foo,[[bar],baz]] = [1,[[2],3]];\nconsole.log(foo); //1\nconsole.log(bar); //2\nconsole.log(baz); //3\n\n//对象的解构赋值\nvar {foo,bar} = {foo:\"aaa\",bar:\"bbb\"};\nconsole.log(foo); //\"aaa\"\nconsole.log(bar); //\"bbb\"\n\n//字符串的解构赋值\nconst [a,b,v,d,e] = \"hello\";\nconsole.log(a+b+c+d+e); //'hello'\n\n\n```\n\n跟箭头函数一样，这也是一个全新的语法糖，它的用处有很对，例如在我们封装参数的时候：\n\n```javascript\n// ES5 二逼青年写法\nfunction study(id, name, sex, grade, nickname, age, address) {\n    console.log(id);\n    console.log(name);\n    console.log(sex);\n    console.log(grade);\n    console.log(nickname);\n    console.log(age);\n    console.log(address);\n}\n// ES5 正常青年写法\nfunction study(params) {\n    console.log(params.id);\n    console.log(params.name);\n    console.log(params.sex);\n    console.log(params.grade);\n    console.log(params.nickname);\n    console.log(params.age);\n    console.log(params.address);\n}\n```\n\n```javascript\n//ES6\nfunction study({id, name, sex, grade, nickname, age, address}) {\n    console.log(id);\n    console.log(name);\n    console.log(sex);\n    console.log(grade);\n    console.log(nickname);\n    console.log(age);\n    console.log(address);    \n}\nstudy({\n    id: 1,\n    name: '林有德',\n    sex: '男',\n    grade: '一年级',\n    nickname: '布莱德',\n    age: 12,\n    address: '木马号'\n});\n```\n","slug":"About ES6","published":1,"updated":"2016-06-20T01:45:58.113Z","comments":1,"photos":[],"link":"","_id":"cipnd97030001yww7np4wxa36","content":"<h1 id=\"ES6-部分方法点评\"><a href=\"#ES6-部分方法点评\" class=\"headerlink\" title=\"ES6 部分方法点评\"></a>ES6 部分方法点评</h1><h2 id=\"箭头函数-Arrow-Functions\"><a href=\"#箭头函数-Arrow-Functions\" class=\"headerlink\" title=\"箭头函数(Arrow Functions)\"></a>箭头函数(Arrow Functions)</h2><p>  箭头函数时ES6的语法糖之一:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//ES5</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> selected = allJobs.filter(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">job</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> job.isSelected();</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//ES6</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> selected = allJobs.filter(job =&gt; job.isSelected());</span><br></pre></td></tr></table></figure>\n<p>  多行方法体的方式:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//ES5</span></span><br><span class=\"line\">$(<span class=\"string\">'#confetti-btn'</span>).click(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event</span>)</span>&#123;</span><br><span class=\"line\">  playTrumpet();</span><br><span class=\"line\">  fireConfettiCannon();</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//ES6</span></span><br><span class=\"line\">$(<span class=\"string\">\"#confetti-btn\"</span>).click(event =&gt; &#123;</span><br><span class=\"line\">  playTrumpet();</span><br><span class=\"line\">  fireConfettiCannon();</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>语法大体是这样的:</p>\n<pre><code>([函数的形参,多个参数则以逗号分隔]) =&gt; [函数返回的值/表达式]\n</code></pre><p>此外，还有最重要的一点，箭头函数并没有自己的<code>this</code>值，箭头函数内的<code>this</code>值继承自外围作用域。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  add: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">piece</span>)</span>&#123;&#125;,</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  addAll:<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">addAll</span>(<span class=\"params\">prieces</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> self = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    _.each(pieces,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">price</span>)</span>&#123;</span><br><span class=\"line\">      self.add(piece);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//ES6</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  add:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">piece</span>)</span>&#123;&#125;,</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  addAll:<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">addAll</span>(<span class=\"params\">pieces</span>)</span>&#123;</span><br><span class=\"line\">    _.each(pieces,piece =&gt; <span class=\"keyword\">this</span>.add(price));</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"LET\"><a href=\"#LET\" class=\"headerlink\" title=\"LET\"></a>LET</h2><p>ES6 <code>let</code>关键字的出现意味着JavaScript迎来了块级作用域({},for,if),可以有效的防止临时变量污染到外层变量:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f1</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> n = <span class=\"number\">5</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(<span class=\"literal\">true</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> n = <span class=\"number\">10</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(n); <span class=\"comment\">//5</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"CONST\"><a href=\"#CONST\" class=\"headerlink\" title=\"CONST\"></a>CONST</h2><p>  <code>const</code>用来定义常量，一旦定义了常量就不可修改。</p>\n<h2 id=\"DESTRUCTURING\"><a href=\"#DESTRUCTURING\" class=\"headerlink\" title=\"DESTRUCTURING\"></a>DESTRUCTURING</h2><p>  destructuring 解构，ES6允许按照一定的模式，从数组和对象中提取值。对变量进行赋值，这成为解构(Destructuring):</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">'use strict'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//对数组的解构赋值</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> [foo,[[bar],baz]] = [<span class=\"number\">1</span>,[[<span class=\"number\">2</span>],<span class=\"number\">3</span>]];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(foo); <span class=\"comment\">//1</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(bar); <span class=\"comment\">//2</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(baz); <span class=\"comment\">//3</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//对象的解构赋值</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> &#123;foo,bar&#125; = &#123;foo:<span class=\"string\">\"aaa\"</span>,bar:<span class=\"string\">\"bbb\"</span>&#125;;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(foo); <span class=\"comment\">//\"aaa\"</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(bar); <span class=\"comment\">//\"bbb\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//字符串的解构赋值</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> [a,b,v,d,e] = <span class=\"string\">\"hello\"</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a+b+c+d+e); <span class=\"comment\">//'hello'</span></span><br></pre></td></tr></table></figure>\n<p>跟箭头函数一样，这也是一个全新的语法糖，它的用处有很对，例如在我们封装参数的时候：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ES5 二逼青年写法</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">study</span>(<span class=\"params\">id, name, sex, grade, nickname, age, address</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(id);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(name);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(sex);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(grade);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(nickname);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(age);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(address);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// ES5 正常青年写法</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">study</span>(<span class=\"params\">params</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(params.id);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(params.name);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(params.sex);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(params.grade);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(params.nickname);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(params.age);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(params.address);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//ES6</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">study</span>(<span class=\"params\">&#123;id, name, sex, grade, nickname, age, address&#125;</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(id);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(name);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(sex);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(grade);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(nickname);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(age);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(address);    </span><br><span class=\"line\">&#125;</span><br><span class=\"line\">study(&#123;</span><br><span class=\"line\">    id: <span class=\"number\">1</span>,</span><br><span class=\"line\">    name: <span class=\"string\">'林有德'</span>,</span><br><span class=\"line\">    sex: <span class=\"string\">'男'</span>,</span><br><span class=\"line\">    grade: <span class=\"string\">'一年级'</span>,</span><br><span class=\"line\">    nickname: <span class=\"string\">'布莱德'</span>,</span><br><span class=\"line\">    age: <span class=\"number\">12</span>,</span><br><span class=\"line\">    address: <span class=\"string\">'木马号'</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<h1 id=\"ES6-部分方法点评\"><a href=\"#ES6-部分方法点评\" class=\"headerlink\" title=\"ES6 部分方法点评\"></a>ES6 部分方法点评</h1><h2 id=\"箭头函数-Arrow-Functions\"><a href=\"#箭头函数-Arrow-Functions\" class=\"headerlink\" title=\"箭头函数(Arrow Functions)\"></a>箭头函数(Arrow Functions)</h2><p>  箭头函数时ES6的语法糖之一:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//ES5</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> selected = allJobs.filter(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">job</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> job.isSelected();</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//ES6</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> selected = allJobs.filter(job =&gt; job.isSelected());</span><br></pre></td></tr></table></figure>\n<p>  多行方法体的方式:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//ES5</span></span><br><span class=\"line\">$(<span class=\"string\">'#confetti-btn'</span>).click(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event</span>)</span>&#123;</span><br><span class=\"line\">  playTrumpet();</span><br><span class=\"line\">  fireConfettiCannon();</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//ES6</span></span><br><span class=\"line\">$(<span class=\"string\">\"#confetti-btn\"</span>).click(event =&gt; &#123;</span><br><span class=\"line\">  playTrumpet();</span><br><span class=\"line\">  fireConfettiCannon();</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>语法大体是这样的:</p>\n<pre><code>([函数的形参,多个参数则以逗号分隔]) =&gt; [函数返回的值/表达式]\n</code></pre><p>此外，还有最重要的一点，箭头函数并没有自己的<code>this</code>值，箭头函数内的<code>this</code>值继承自外围作用域。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  add: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">piece</span>)</span>&#123;&#125;,</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  addAll:<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">addAll</span>(<span class=\"params\">prieces</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> self = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    _.each(pieces,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">price</span>)</span>&#123;</span><br><span class=\"line\">      self.add(piece);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//ES6</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  add:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">piece</span>)</span>&#123;&#125;,</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  addAll:<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">addAll</span>(<span class=\"params\">pieces</span>)</span>&#123;</span><br><span class=\"line\">    _.each(pieces,piece =&gt; <span class=\"keyword\">this</span>.add(price));</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"LET\"><a href=\"#LET\" class=\"headerlink\" title=\"LET\"></a>LET</h2><p>ES6 <code>let</code>关键字的出现意味着JavaScript迎来了块级作用域({},for,if),可以有效的防止临时变量污染到外层变量:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f1</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> n = <span class=\"number\">5</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(<span class=\"literal\">true</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> n = <span class=\"number\">10</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(n); <span class=\"comment\">//5</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"CONST\"><a href=\"#CONST\" class=\"headerlink\" title=\"CONST\"></a>CONST</h2><p>  <code>const</code>用来定义常量，一旦定义了常量就不可修改。</p>\n<h2 id=\"DESTRUCTURING\"><a href=\"#DESTRUCTURING\" class=\"headerlink\" title=\"DESTRUCTURING\"></a>DESTRUCTURING</h2><p>  destructuring 解构，ES6允许按照一定的模式，从数组和对象中提取值。对变量进行赋值，这成为解构(Destructuring):</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">'use strict'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//对数组的解构赋值</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> [foo,[[bar],baz]] = [<span class=\"number\">1</span>,[[<span class=\"number\">2</span>],<span class=\"number\">3</span>]];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(foo); <span class=\"comment\">//1</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(bar); <span class=\"comment\">//2</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(baz); <span class=\"comment\">//3</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//对象的解构赋值</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> &#123;foo,bar&#125; = &#123;foo:<span class=\"string\">\"aaa\"</span>,bar:<span class=\"string\">\"bbb\"</span>&#125;;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(foo); <span class=\"comment\">//\"aaa\"</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(bar); <span class=\"comment\">//\"bbb\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//字符串的解构赋值</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> [a,b,v,d,e] = <span class=\"string\">\"hello\"</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a+b+c+d+e); <span class=\"comment\">//'hello'</span></span><br></pre></td></tr></table></figure>\n<p>跟箭头函数一样，这也是一个全新的语法糖，它的用处有很对，例如在我们封装参数的时候：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ES5 二逼青年写法</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">study</span>(<span class=\"params\">id, name, sex, grade, nickname, age, address</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(id);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(name);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(sex);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(grade);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(nickname);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(age);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(address);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// ES5 正常青年写法</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">study</span>(<span class=\"params\">params</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(params.id);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(params.name);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(params.sex);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(params.grade);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(params.nickname);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(params.age);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(params.address);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//ES6</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">study</span>(<span class=\"params\">&#123;id, name, sex, grade, nickname, age, address&#125;</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(id);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(name);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(sex);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(grade);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(nickname);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(age);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(address);    </span><br><span class=\"line\">&#125;</span><br><span class=\"line\">study(&#123;</span><br><span class=\"line\">    id: <span class=\"number\">1</span>,</span><br><span class=\"line\">    name: <span class=\"string\">'林有德'</span>,</span><br><span class=\"line\">    sex: <span class=\"string\">'男'</span>,</span><br><span class=\"line\">    grade: <span class=\"string\">'一年级'</span>,</span><br><span class=\"line\">    nickname: <span class=\"string\">'布莱德'</span>,</span><br><span class=\"line\">    age: <span class=\"number\">12</span>,</span><br><span class=\"line\">    address: <span class=\"string\">'木马号'</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n"},{"layout":"keynote","title":"First Line for TypeScript","subtitle":"Keynote: First Line for TypeScript","iframe":null,"date":"2016-06-16T16:00:00.000Z","author":"","header-img":"post-bg-js-version.jpg","_content":"# 什么是TypeScript?\n\nJavascript 是一种弱类型语言，在开发一些小项目，UI交互的时候很灵活方便。但是当项目变得庞大之后，就显露出很明显的弊端.\n\nTypeScript把类型带入Javascript的世界，他是Javascript的超集，即所有合法的JS都是Typescript。但是他可以有类型，运行的时候Typescript被tsc编译器翻译成可读性很高的Javascript在浏览器中执行。\n\n### typescript并没有太多对于类型的限制：\n\n  1.它支持类型自动推断，一些很明显的类型，编译器能够智能推断出来 `var x = 1`;\n  2.好在它的类型是可选的，你可以全携程any类型，编译器会对该变量放弃类型检查，及时类型比配失败，依然会生成Javascript，你可以逐渐把JS代码迁移到Typescript上。\n\n## 基本类型\n\nTypeScript 提供了`boolean`,`number`,`string`,`array`,`enum`,`any`,`void`几种基本类型\n\n```javascript\nvar flag:boolean = true;\nvar s:string = 'hello';\nvar n:number = 123;\n\nenum Color {Red = 1,Green,Blue};\nvar color:Color = Color.Green;\n\nfunction log(msg:string):void{\n  console.log(`${new Date().toUTCString()} ${msg}`);\n}\n```\n\n## 类\n\n类的语法和ES6的Class类似，有constructor，可以继承，这里说几点不同:\n\n### 属性声明\n\nES6的class属性是直接赋值给`this.varName`声明的，tyoescript里面需要显示声明。\n\n```javascript\nclass Point{\n  x:number;\n  y:number;\n}\n```\n\n### 构造函数属性声明\n\n属性也可以在构造函数中添加`public`,`private`描述声明\n\n```javascript\nclass Point{\n  constructor(public x:number,public y:number){}\n}\n```\n\n### 支持public ,private ,static 描述\n\nES6的static只支持在函数上声明，而typescript支持方法和属性。\n\n```typescript\n  class Popup{\n    static inst:Popup;\n\n    constructor(){\n      if(!Popup.inst){\n        Popup.inst = this;\n      }\n    }\n  }\n\n  Popup.getInstance();\n\n```\n\n### 函数\n\n#### - 可选/默参数\n\n``` typescript\n\n  function reset(hard?:boolean){\n    if(hard){\n      resetDB();\n    }\n    resetUI();\n  }\n  reset();\n  reset(true);\n```\n\n#### - 剩余参数\n\n  可变数目的参数需要使用剩余参数的写法。获得的参数是一个数组。\n\n```typescript\n  function max(...nums:number[]){\n    ...\n  }\n```\n\n#### - 箭头函数\n\n  这一点与ES6一致，箭头函数内部保持和外部一样的this上下文\n\n```typescript\n\nvar Scheduler = {\n  queue:[],\n  schedule(t:Task){\n    setTimeout(() => {\n      this.queue.push(t);\n    },0);\n  }\n};\n\nScheduler.schedule(new Task());\n\n```\n\n#### - 重载\n\nJS函数支持不同的参数进行重载，例如jquery的css函数\n\n```typescript\ncss({\n  width:'100px'\n  })\n  css('width','100px')\n```\n可以这样调用，我们可以为该函数声明重载:\n\n```typescript\nfunction css(config:object);\n\nfunction css(config:string,value:string);\n\nfunction css(config:any,value?:any){\n  if(typeof config == 'string'){\n    ...\n  }else if(typeof config == 'object'){\n    ...\n  }\n}\n\n```\n\n这个函数有两个重载，编译器会判断参数类型是否符合其中一个。\n\n#### - 装饰器(decorator)\n\nTypescript的装饰器和ES6里面一致，可以修改已有的类或类的方法，也可以在他们的基础上提供一层封装。Angular2里面大量使用装饰器，为组件注册元数据\n\n1.类的装饰器\n\n```typescript\n@decorator\nclass A{}\n\n```\n\n这段代码等同于：\n\n```typescript\nclass A {}\nA = decorator(A) || A;\n\nfunction decorator(klass){\n\n  klass.meta = 'my awesome class';\n}\n\n```\n\nAngular 里面的装饰器可以传入meta信息，如下：\n\n```typescript\n@Component({\n  selector:'my-app'\n  })\n  class MyApp{\n\n  }\n\n```\n\nComponent 其实是angular库中实现的一个装饰器工厂，接受一个meta信息，返回一个装饰器,类似如下实现:\n\n```typescript\nfunction Component(meta){\n  return function(klass){\n    ...\n  }\n}\n```\n\n2.类的方法的装饰器\n\n  还有一种装饰器是类的方法的装饰器\n\n  ```typescript\n\n    class Persion{\n      @readonly\n      name(){\n        return `${this.first} ${this.last}`\n      }\n    }\n  ```\n  以上readonly方法被如下方式调用\n  ```typescript\n    function readonly(target,name,descriptor){\n      descriptor.writable = false;\n      return descriptor;\n    }\n\n    readonly(Person.prototype,'name',descriptor);\n\n    // descriptor对象的初始值如下\n    // {\n    //   value: oneFunction,\n    //   enumerable: false,\n    //   configurable: true,\n    //   writable: true\n    // };\n  ```\n\n3.函数的装饰器呢？可惜的是由于函数存在提升，没有函数的装饰器、\n\n## 模块\n\nTypescript 模块包括内部模块和外部模块两种\n\n### 内部模块\n\n内部模块创建一个封闭的作用域，共一个js文件内 代码使用(也可以使用///引入其他文件的内部模块)\n\n```typescript\n  module com.gf.Utils{\n    export function foo(msg:string){\n      alert(msg);\n    }\n    export var name = 'some random tools';\n\n  }\n\n  import Utils = com.osamu.Utils; //alias\n\n  Utils.foo('hi')\n  Utils.name = 'Jack';\n\n```\n","source":"_posts/First Line for TypeScript.markdown","raw":"---\nlayout:     keynote\ntitle:      \"First Line for TypeScript\"\nsubtitle:   \"Keynote: First Line for TypeScript\"\niframe:     \ndate:       2016-06-17\nauthor:     \"\"\nheader-img: \"post-bg-js-version.jpg\"\ntags:\n    - 前端开发\n    - TypeScript\n---\n# 什么是TypeScript?\n\nJavascript 是一种弱类型语言，在开发一些小项目，UI交互的时候很灵活方便。但是当项目变得庞大之后，就显露出很明显的弊端.\n\nTypeScript把类型带入Javascript的世界，他是Javascript的超集，即所有合法的JS都是Typescript。但是他可以有类型，运行的时候Typescript被tsc编译器翻译成可读性很高的Javascript在浏览器中执行。\n\n### typescript并没有太多对于类型的限制：\n\n  1.它支持类型自动推断，一些很明显的类型，编译器能够智能推断出来 `var x = 1`;\n  2.好在它的类型是可选的，你可以全携程any类型，编译器会对该变量放弃类型检查，及时类型比配失败，依然会生成Javascript，你可以逐渐把JS代码迁移到Typescript上。\n\n## 基本类型\n\nTypeScript 提供了`boolean`,`number`,`string`,`array`,`enum`,`any`,`void`几种基本类型\n\n```javascript\nvar flag:boolean = true;\nvar s:string = 'hello';\nvar n:number = 123;\n\nenum Color {Red = 1,Green,Blue};\nvar color:Color = Color.Green;\n\nfunction log(msg:string):void{\n  console.log(`${new Date().toUTCString()} ${msg}`);\n}\n```\n\n## 类\n\n类的语法和ES6的Class类似，有constructor，可以继承，这里说几点不同:\n\n### 属性声明\n\nES6的class属性是直接赋值给`this.varName`声明的，tyoescript里面需要显示声明。\n\n```javascript\nclass Point{\n  x:number;\n  y:number;\n}\n```\n\n### 构造函数属性声明\n\n属性也可以在构造函数中添加`public`,`private`描述声明\n\n```javascript\nclass Point{\n  constructor(public x:number,public y:number){}\n}\n```\n\n### 支持public ,private ,static 描述\n\nES6的static只支持在函数上声明，而typescript支持方法和属性。\n\n```typescript\n  class Popup{\n    static inst:Popup;\n\n    constructor(){\n      if(!Popup.inst){\n        Popup.inst = this;\n      }\n    }\n  }\n\n  Popup.getInstance();\n\n```\n\n### 函数\n\n#### - 可选/默参数\n\n``` typescript\n\n  function reset(hard?:boolean){\n    if(hard){\n      resetDB();\n    }\n    resetUI();\n  }\n  reset();\n  reset(true);\n```\n\n#### - 剩余参数\n\n  可变数目的参数需要使用剩余参数的写法。获得的参数是一个数组。\n\n```typescript\n  function max(...nums:number[]){\n    ...\n  }\n```\n\n#### - 箭头函数\n\n  这一点与ES6一致，箭头函数内部保持和外部一样的this上下文\n\n```typescript\n\nvar Scheduler = {\n  queue:[],\n  schedule(t:Task){\n    setTimeout(() => {\n      this.queue.push(t);\n    },0);\n  }\n};\n\nScheduler.schedule(new Task());\n\n```\n\n#### - 重载\n\nJS函数支持不同的参数进行重载，例如jquery的css函数\n\n```typescript\ncss({\n  width:'100px'\n  })\n  css('width','100px')\n```\n可以这样调用，我们可以为该函数声明重载:\n\n```typescript\nfunction css(config:object);\n\nfunction css(config:string,value:string);\n\nfunction css(config:any,value?:any){\n  if(typeof config == 'string'){\n    ...\n  }else if(typeof config == 'object'){\n    ...\n  }\n}\n\n```\n\n这个函数有两个重载，编译器会判断参数类型是否符合其中一个。\n\n#### - 装饰器(decorator)\n\nTypescript的装饰器和ES6里面一致，可以修改已有的类或类的方法，也可以在他们的基础上提供一层封装。Angular2里面大量使用装饰器，为组件注册元数据\n\n1.类的装饰器\n\n```typescript\n@decorator\nclass A{}\n\n```\n\n这段代码等同于：\n\n```typescript\nclass A {}\nA = decorator(A) || A;\n\nfunction decorator(klass){\n\n  klass.meta = 'my awesome class';\n}\n\n```\n\nAngular 里面的装饰器可以传入meta信息，如下：\n\n```typescript\n@Component({\n  selector:'my-app'\n  })\n  class MyApp{\n\n  }\n\n```\n\nComponent 其实是angular库中实现的一个装饰器工厂，接受一个meta信息，返回一个装饰器,类似如下实现:\n\n```typescript\nfunction Component(meta){\n  return function(klass){\n    ...\n  }\n}\n```\n\n2.类的方法的装饰器\n\n  还有一种装饰器是类的方法的装饰器\n\n  ```typescript\n\n    class Persion{\n      @readonly\n      name(){\n        return `${this.first} ${this.last}`\n      }\n    }\n  ```\n  以上readonly方法被如下方式调用\n  ```typescript\n    function readonly(target,name,descriptor){\n      descriptor.writable = false;\n      return descriptor;\n    }\n\n    readonly(Person.prototype,'name',descriptor);\n\n    // descriptor对象的初始值如下\n    // {\n    //   value: oneFunction,\n    //   enumerable: false,\n    //   configurable: true,\n    //   writable: true\n    // };\n  ```\n\n3.函数的装饰器呢？可惜的是由于函数存在提升，没有函数的装饰器、\n\n## 模块\n\nTypescript 模块包括内部模块和外部模块两种\n\n### 内部模块\n\n内部模块创建一个封闭的作用域，共一个js文件内 代码使用(也可以使用///引入其他文件的内部模块)\n\n```typescript\n  module com.gf.Utils{\n    export function foo(msg:string){\n      alert(msg);\n    }\n    export var name = 'some random tools';\n\n  }\n\n  import Utils = com.osamu.Utils; //alias\n\n  Utils.foo('hi')\n  Utils.name = 'Jack';\n\n```\n","slug":"First Line for TypeScript","published":1,"updated":"2016-06-20T01:48:46.021Z","comments":1,"photos":[],"link":"","_id":"cipnd970n0002yww7t1nmaawf","content":"<h1 id=\"什么是TypeScript\"><a href=\"#什么是TypeScript\" class=\"headerlink\" title=\"什么是TypeScript?\"></a>什么是TypeScript?</h1><p>Javascript 是一种弱类型语言，在开发一些小项目，UI交互的时候很灵活方便。但是当项目变得庞大之后，就显露出很明显的弊端.</p>\n<p>TypeScript把类型带入Javascript的世界，他是Javascript的超集，即所有合法的JS都是Typescript。但是他可以有类型，运行的时候Typescript被tsc编译器翻译成可读性很高的Javascript在浏览器中执行。</p>\n<h3 id=\"typescript并没有太多对于类型的限制：\"><a href=\"#typescript并没有太多对于类型的限制：\" class=\"headerlink\" title=\"typescript并没有太多对于类型的限制：\"></a>typescript并没有太多对于类型的限制：</h3><p>  1.它支持类型自动推断，一些很明显的类型，编译器能够智能推断出来 <code>var x = 1</code>;<br>  2.好在它的类型是可选的，你可以全携程any类型，编译器会对该变量放弃类型检查，及时类型比配失败，依然会生成Javascript，你可以逐渐把JS代码迁移到Typescript上。</p>\n<h2 id=\"基本类型\"><a href=\"#基本类型\" class=\"headerlink\" title=\"基本类型\"></a>基本类型</h2><p>TypeScript 提供了<code>boolean</code>,<code>number</code>,<code>string</code>,<code>array</code>,<code>enum</code>,<code>any</code>,<code>void</code>几种基本类型</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> flag:boolean = <span class=\"literal\">true</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> s:string = <span class=\"string\">'hello'</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> n:number = <span class=\"number\">123</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">enum Color &#123;Red = <span class=\"number\">1</span>,Green,Blue&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> color:Color = Color.Green;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">log</span>(<span class=\"params\">msg:string</span>):<span class=\"title\">void</span></span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">`<span class=\"subst\">$&#123;new Date().toUTCString()&#125;</span> <span class=\"subst\">$&#123;msg&#125;</span>`</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"类\"><a href=\"#类\" class=\"headerlink\" title=\"类\"></a>类</h2><p>类的语法和ES6的Class类似，有constructor，可以继承，这里说几点不同:</p>\n<h3 id=\"属性声明\"><a href=\"#属性声明\" class=\"headerlink\" title=\"属性声明\"></a>属性声明</h3><p>ES6的class属性是直接赋值给<code>this.varName</code>声明的，tyoescript里面需要显示声明。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Point</span></span>&#123;</span><br><span class=\"line\">  x:number;</span><br><span class=\"line\">  y:number;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"构造函数属性声明\"><a href=\"#构造函数属性声明\" class=\"headerlink\" title=\"构造函数属性声明\"></a>构造函数属性声明</h3><p>属性也可以在构造函数中添加<code>public</code>,<code>private</code>描述声明</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Point</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(public x:number,public y:number)&#123;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"支持public-private-static-描述\"><a href=\"#支持public-private-static-描述\" class=\"headerlink\" title=\"支持public ,private ,static 描述\"></a>支持public ,private ,static 描述</h3><p>ES6的static只支持在函数上声明，而typescript支持方法和属性。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> Popup&#123;</span><br><span class=\"line\">  <span class=\"keyword\">static</span> inst:Popup;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>()&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!Popup.inst)&#123;</span><br><span class=\"line\">      Popup.inst = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Popup.getInstance();</span><br></pre></td></tr></table></figure>\n<h3 id=\"函数\"><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a>函数</h3><h4 id=\"可选-默参数\"><a href=\"#可选-默参数\" class=\"headerlink\" title=\"- 可选/默参数\"></a>- 可选/默参数</h4><figure class=\"highlight typescript\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">reset</span>(<span class=\"params\">hard?:<span class=\"built_in\">boolean</span></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(hard)&#123;</span><br><span class=\"line\">    resetDB();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  resetUI();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">reset();</span><br><span class=\"line\">reset(<span class=\"literal\">true</span>);</span><br></pre></td></tr></table></figure>\n<h4 id=\"剩余参数\"><a href=\"#剩余参数\" class=\"headerlink\" title=\"- 剩余参数\"></a>- 剩余参数</h4><p>  可变数目的参数需要使用剩余参数的写法。获得的参数是一个数组。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">max</span>(<span class=\"params\">...nums:<span class=\"built_in\">number</span>[]</span>)</span>&#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"箭头函数\"><a href=\"#箭头函数\" class=\"headerlink\" title=\"- 箭头函数\"></a>- 箭头函数</h4><p>  这一点与ES6一致，箭头函数内部保持和外部一样的this上下文</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> Scheduler = &#123;</span><br><span class=\"line\">  queue:[],</span><br><span class=\"line\">  schedule(t:Task)&#123;</span><br><span class=\"line\">    setTimeout(() =&gt; &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.queue.push(t);</span><br><span class=\"line\">    &#125;,<span class=\"number\">0</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">Scheduler.schedule(<span class=\"keyword\">new</span> Task());</span><br></pre></td></tr></table></figure>\n<h4 id=\"重载\"><a href=\"#重载\" class=\"headerlink\" title=\"- 重载\"></a>- 重载</h4><p>JS函数支持不同的参数进行重载，例如jquery的css函数</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"code\"><pre><span class=\"line\">css(&#123;</span><br><span class=\"line\">  width:<span class=\"string\">'100px'</span></span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  css(<span class=\"string\">'width'</span>,<span class=\"string\">'100px'</span>)</span><br></pre></td></tr></table></figure>\n<p>可以这样调用，我们可以为该函数声明重载:</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">css</span>(<span class=\"params\">config:object</span>)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">css</span>(<span class=\"params\">config:<span class=\"built_in\">string</span>,value:<span class=\"built_in\">string</span></span>)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">css</span>(<span class=\"params\">config:<span class=\"built_in\">any</span>,value?:<span class=\"built_in\">any</span></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> config == <span class=\"string\">'string'</span>)&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">  &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> config == <span class=\"string\">'object'</span>)&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这个函数有两个重载，编译器会判断参数类型是否符合其中一个。</p>\n<h4 id=\"装饰器-decorator\"><a href=\"#装饰器-decorator\" class=\"headerlink\" title=\"- 装饰器(decorator)\"></a>- 装饰器(decorator)</h4><p>Typescript的装饰器和ES6里面一致，可以修改已有的类或类的方法，也可以在他们的基础上提供一层封装。Angular2里面大量使用装饰器，为组件注册元数据</p>\n<p>1.类的装饰器</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"code\"><pre><span class=\"line\">@decorator</span><br><span class=\"line\"><span class=\"keyword\">class</span> A&#123;&#125;</span><br></pre></td></tr></table></figure>\n<p>这段代码等同于：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> A &#123;&#125;</span><br><span class=\"line\">A = decorator(A) || A;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">decorator</span>(<span class=\"params\">klass</span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  klass.meta = <span class=\"string\">'my awesome class'</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Angular 里面的装饰器可以传入meta信息，如下：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"code\"><pre><span class=\"line\">@Component(&#123;</span><br><span class=\"line\">  selector:<span class=\"string\">'my-app'</span></span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  <span class=\"keyword\">class</span> MyApp&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<p>Component 其实是angular库中实现的一个装饰器工厂，接受一个meta信息，返回一个装饰器,类似如下实现:</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Component</span>(<span class=\"params\">meta</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">klass</span>)</span>&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>2.类的方法的装饰器</p>\n<p>  还有一种装饰器是类的方法的装饰器</p>\n  <figure class=\"highlight typescript\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> Persion&#123;</span><br><span class=\"line\">  @readonly</span><br><span class=\"line\">  name()&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">`<span class=\"subst\">$&#123;this.first&#125;</span> <span class=\"subst\">$&#123;this.last&#125;</span>`</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>  以上readonly方法被如下方式调用<br>  <figure class=\"highlight typescript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">readonly</span>(<span class=\"params\">target,name,descriptor</span>)</span>&#123;</span><br><span class=\"line\">  descriptor.writable = <span class=\"literal\">false</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> descriptor;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">readonly(Person.prototype,<span class=\"string\">'name'</span>,descriptor);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// descriptor对象的初始值如下</span></span><br><span class=\"line\"><span class=\"comment\">// &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//   value: oneFunction,</span></span><br><span class=\"line\"><span class=\"comment\">//   enumerable: false,</span></span><br><span class=\"line\"><span class=\"comment\">//   configurable: true,</span></span><br><span class=\"line\"><span class=\"comment\">//   writable: true</span></span><br><span class=\"line\"><span class=\"comment\">// &#125;;</span></span><br></pre></td></tr></table></figure></p>\n<p>3.函数的装饰器呢？可惜的是由于函数存在提升，没有函数的装饰器、</p>\n<h2 id=\"模块\"><a href=\"#模块\" class=\"headerlink\" title=\"模块\"></a>模块</h2><p>Typescript 模块包括内部模块和外部模块两种</p>\n<h3 id=\"内部模块\"><a href=\"#内部模块\" class=\"headerlink\" title=\"内部模块\"></a>内部模块</h3><p>内部模块创建一个封闭的作用域，共一个js文件内 代码使用(也可以使用///引入其他文件的内部模块)</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">module</span> com.gf.Utils&#123;</span><br><span class=\"line\">  <span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\">msg:<span class=\"built_in\">string</span></span>)</span>&#123;</span><br><span class=\"line\">    alert(msg);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">export</span> <span class=\"keyword\">var</span> name = <span class=\"string\">'some random tools'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> Utils = com.osamu.Utils; <span class=\"comment\">//alias</span></span><br><span class=\"line\"></span><br><span class=\"line\">Utils.foo(<span class=\"string\">'hi'</span>)</span><br><span class=\"line\">Utils.name = <span class=\"string\">'Jack'</span>;</span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<h1 id=\"什么是TypeScript\"><a href=\"#什么是TypeScript\" class=\"headerlink\" title=\"什么是TypeScript?\"></a>什么是TypeScript?</h1><p>Javascript 是一种弱类型语言，在开发一些小项目，UI交互的时候很灵活方便。但是当项目变得庞大之后，就显露出很明显的弊端.</p>\n<p>TypeScript把类型带入Javascript的世界，他是Javascript的超集，即所有合法的JS都是Typescript。但是他可以有类型，运行的时候Typescript被tsc编译器翻译成可读性很高的Javascript在浏览器中执行。</p>\n<h3 id=\"typescript并没有太多对于类型的限制：\"><a href=\"#typescript并没有太多对于类型的限制：\" class=\"headerlink\" title=\"typescript并没有太多对于类型的限制：\"></a>typescript并没有太多对于类型的限制：</h3><p>  1.它支持类型自动推断，一些很明显的类型，编译器能够智能推断出来 <code>var x = 1</code>;<br>  2.好在它的类型是可选的，你可以全携程any类型，编译器会对该变量放弃类型检查，及时类型比配失败，依然会生成Javascript，你可以逐渐把JS代码迁移到Typescript上。</p>\n<h2 id=\"基本类型\"><a href=\"#基本类型\" class=\"headerlink\" title=\"基本类型\"></a>基本类型</h2><p>TypeScript 提供了<code>boolean</code>,<code>number</code>,<code>string</code>,<code>array</code>,<code>enum</code>,<code>any</code>,<code>void</code>几种基本类型</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> flag:boolean = <span class=\"literal\">true</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> s:string = <span class=\"string\">'hello'</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> n:number = <span class=\"number\">123</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">enum Color &#123;Red = <span class=\"number\">1</span>,Green,Blue&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> color:Color = Color.Green;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">log</span>(<span class=\"params\">msg:string</span>):<span class=\"title\">void</span></span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">`<span class=\"subst\">$&#123;new Date().toUTCString()&#125;</span> <span class=\"subst\">$&#123;msg&#125;</span>`</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"类\"><a href=\"#类\" class=\"headerlink\" title=\"类\"></a>类</h2><p>类的语法和ES6的Class类似，有constructor，可以继承，这里说几点不同:</p>\n<h3 id=\"属性声明\"><a href=\"#属性声明\" class=\"headerlink\" title=\"属性声明\"></a>属性声明</h3><p>ES6的class属性是直接赋值给<code>this.varName</code>声明的，tyoescript里面需要显示声明。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Point</span></span>&#123;</span><br><span class=\"line\">  x:number;</span><br><span class=\"line\">  y:number;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"构造函数属性声明\"><a href=\"#构造函数属性声明\" class=\"headerlink\" title=\"构造函数属性声明\"></a>构造函数属性声明</h3><p>属性也可以在构造函数中添加<code>public</code>,<code>private</code>描述声明</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Point</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(public x:number,public y:number)&#123;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"支持public-private-static-描述\"><a href=\"#支持public-private-static-描述\" class=\"headerlink\" title=\"支持public ,private ,static 描述\"></a>支持public ,private ,static 描述</h3><p>ES6的static只支持在函数上声明，而typescript支持方法和属性。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> Popup&#123;</span><br><span class=\"line\">  <span class=\"keyword\">static</span> inst:Popup;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>()&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!Popup.inst)&#123;</span><br><span class=\"line\">      Popup.inst = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Popup.getInstance();</span><br></pre></td></tr></table></figure>\n<h3 id=\"函数\"><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a>函数</h3><h4 id=\"可选-默参数\"><a href=\"#可选-默参数\" class=\"headerlink\" title=\"- 可选/默参数\"></a>- 可选/默参数</h4><figure class=\"highlight typescript\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">reset</span>(<span class=\"params\">hard?:<span class=\"built_in\">boolean</span></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(hard)&#123;</span><br><span class=\"line\">    resetDB();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  resetUI();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">reset();</span><br><span class=\"line\">reset(<span class=\"literal\">true</span>);</span><br></pre></td></tr></table></figure>\n<h4 id=\"剩余参数\"><a href=\"#剩余参数\" class=\"headerlink\" title=\"- 剩余参数\"></a>- 剩余参数</h4><p>  可变数目的参数需要使用剩余参数的写法。获得的参数是一个数组。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">max</span>(<span class=\"params\">...nums:<span class=\"built_in\">number</span>[]</span>)</span>&#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"箭头函数\"><a href=\"#箭头函数\" class=\"headerlink\" title=\"- 箭头函数\"></a>- 箭头函数</h4><p>  这一点与ES6一致，箭头函数内部保持和外部一样的this上下文</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> Scheduler = &#123;</span><br><span class=\"line\">  queue:[],</span><br><span class=\"line\">  schedule(t:Task)&#123;</span><br><span class=\"line\">    setTimeout(() =&gt; &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.queue.push(t);</span><br><span class=\"line\">    &#125;,<span class=\"number\">0</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">Scheduler.schedule(<span class=\"keyword\">new</span> Task());</span><br></pre></td></tr></table></figure>\n<h4 id=\"重载\"><a href=\"#重载\" class=\"headerlink\" title=\"- 重载\"></a>- 重载</h4><p>JS函数支持不同的参数进行重载，例如jquery的css函数</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"code\"><pre><span class=\"line\">css(&#123;</span><br><span class=\"line\">  width:<span class=\"string\">'100px'</span></span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  css(<span class=\"string\">'width'</span>,<span class=\"string\">'100px'</span>)</span><br></pre></td></tr></table></figure>\n<p>可以这样调用，我们可以为该函数声明重载:</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">css</span>(<span class=\"params\">config:object</span>)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">css</span>(<span class=\"params\">config:<span class=\"built_in\">string</span>,value:<span class=\"built_in\">string</span></span>)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">css</span>(<span class=\"params\">config:<span class=\"built_in\">any</span>,value?:<span class=\"built_in\">any</span></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> config == <span class=\"string\">'string'</span>)&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">  &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> config == <span class=\"string\">'object'</span>)&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这个函数有两个重载，编译器会判断参数类型是否符合其中一个。</p>\n<h4 id=\"装饰器-decorator\"><a href=\"#装饰器-decorator\" class=\"headerlink\" title=\"- 装饰器(decorator)\"></a>- 装饰器(decorator)</h4><p>Typescript的装饰器和ES6里面一致，可以修改已有的类或类的方法，也可以在他们的基础上提供一层封装。Angular2里面大量使用装饰器，为组件注册元数据</p>\n<p>1.类的装饰器</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"code\"><pre><span class=\"line\">@decorator</span><br><span class=\"line\"><span class=\"keyword\">class</span> A&#123;&#125;</span><br></pre></td></tr></table></figure>\n<p>这段代码等同于：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> A &#123;&#125;</span><br><span class=\"line\">A = decorator(A) || A;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">decorator</span>(<span class=\"params\">klass</span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  klass.meta = <span class=\"string\">'my awesome class'</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Angular 里面的装饰器可以传入meta信息，如下：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"code\"><pre><span class=\"line\">@Component(&#123;</span><br><span class=\"line\">  selector:<span class=\"string\">'my-app'</span></span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  <span class=\"keyword\">class</span> MyApp&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<p>Component 其实是angular库中实现的一个装饰器工厂，接受一个meta信息，返回一个装饰器,类似如下实现:</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Component</span>(<span class=\"params\">meta</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">klass</span>)</span>&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>2.类的方法的装饰器</p>\n<p>  还有一种装饰器是类的方法的装饰器</p>\n  <figure class=\"highlight typescript\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> Persion&#123;</span><br><span class=\"line\">  @readonly</span><br><span class=\"line\">  name()&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">`<span class=\"subst\">$&#123;this.first&#125;</span> <span class=\"subst\">$&#123;this.last&#125;</span>`</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>  以上readonly方法被如下方式调用<br>  <figure class=\"highlight typescript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">readonly</span>(<span class=\"params\">target,name,descriptor</span>)</span>&#123;</span><br><span class=\"line\">  descriptor.writable = <span class=\"literal\">false</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> descriptor;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">readonly(Person.prototype,<span class=\"string\">'name'</span>,descriptor);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// descriptor对象的初始值如下</span></span><br><span class=\"line\"><span class=\"comment\">// &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//   value: oneFunction,</span></span><br><span class=\"line\"><span class=\"comment\">//   enumerable: false,</span></span><br><span class=\"line\"><span class=\"comment\">//   configurable: true,</span></span><br><span class=\"line\"><span class=\"comment\">//   writable: true</span></span><br><span class=\"line\"><span class=\"comment\">// &#125;;</span></span><br></pre></td></tr></table></figure></p>\n<p>3.函数的装饰器呢？可惜的是由于函数存在提升，没有函数的装饰器、</p>\n<h2 id=\"模块\"><a href=\"#模块\" class=\"headerlink\" title=\"模块\"></a>模块</h2><p>Typescript 模块包括内部模块和外部模块两种</p>\n<h3 id=\"内部模块\"><a href=\"#内部模块\" class=\"headerlink\" title=\"内部模块\"></a>内部模块</h3><p>内部模块创建一个封闭的作用域，共一个js文件内 代码使用(也可以使用///引入其他文件的内部模块)</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">module</span> com.gf.Utils&#123;</span><br><span class=\"line\">  <span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\">msg:<span class=\"built_in\">string</span></span>)</span>&#123;</span><br><span class=\"line\">    alert(msg);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">export</span> <span class=\"keyword\">var</span> name = <span class=\"string\">'some random tools'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> Utils = com.osamu.Utils; <span class=\"comment\">//alias</span></span><br><span class=\"line\"></span><br><span class=\"line\">Utils.foo(<span class=\"string\">'hi'</span>)</span><br><span class=\"line\">Utils.name = <span class=\"string\">'Jack'</span>;</span><br></pre></td></tr></table></figure>\n"},{"layout":"keynote","title":"Hello World with Spark","subtitle":"Keynote: Hello World with Spark","iframe":null,"date":"2016-06-16T16:00:00.000Z","author":"","header-img":"post-bg-js-version.jpg","_content":"# Spark\n\n## 简介\n\n## Scala 语言\n\nSpark 是用Scala（发音为 /ˈskɑːlə, ˈskeɪlə/）语言开发的.Scala是一种多范式的编程语言，设计意图是要继承面向对象变成和函数式编程的各种特性。由于不满Java语言复杂的语法，瑞士洛桑联邦理工学院奥德斯基教授带领小组在2001年创建 了Scala语言（任性~）。\n\nScala 运行在Java虚拟机上，也就是说Scala会被便以为和Java编译后的 class 一样的字节码。也改变着 Scala 和 Java 之间可以相互调用变并且他们可以联合编译，不过实际上 Scala 调用 Java 容易一些，而java调用 scala有时会遇到一些问题。\n\n至少在Spark应用中，Scala比Java的开发效率更高。\n\n启动 Scala 环境\n\n```shell\n$ cd ~/spark\n$ ./bin/spark-shell\n```\n\n### 常量与变量\n\n在 Scala 中定义一个变量使用 `var` 关键字:\n\n```scala\nscala> var name = \"steve\"\nname:java.lang.String = steve\n\nscala> name = \"marius\"\nname: java.lang.String = marius\n\n```\n\n如果需要定义一个常量，使用 `val` 关键字，常量在首次赋值之后不可以更改:\n\n```scala\nscala> val two = 1 + 1\ntwo: Int = 2\n```\n\n### 函数定义与调用\n\n在 Scala 中，使用`def`关键字定义一个函数，等号左侧是函数名、参数列表和返回值，右侧是函数体实现和表达式\n\n定义函数对传入整型参数加1并返回:\n\n```scala\nscala> def addOne(m:Int): Int = m + 1\naddOne: (m:Int)Int\n```\n\n使用函数名，传入参数并进行函数调用\n\n```scala\nscala > var x = addOne(123)\nx : 124\n```\n\n如果函数体需要多个表达式才能实现，可以使用`代码块`将多个表达式抱起来:\n\n```scala\nscala> def sum(n:Int):Int = {\n  for(i <- 1 to 10)\n    r=r*1\n\n  r //or return r\n}\n```\n\n如果在函数体中不使用`return`返回函数值，那么`最后一个表达式`的值就是函数返回值\n\n### 超级重要的匿名函数\n\nScala支持匿名函数，创建匿名函数不需要使用 `def` 关键字，符号 `=>` 的左侧定义参数列表，右侧定义函数体实现。\n\n下面的匿名函数为x的变量加1并返回结果：\n\n```scala\nscala>(x:Int) => x+1\nres2:(Int) => Int = ...\n\n```\n\n函数可以赋值给变量或常量，这就是`函数式变成`的一个特点，下面将匿名函数赋值给 `addOne` 常量，后续代码中就可以使用 `addOne` 进行调用了:\n\n```scala\nscala:val addOne = (x:Int) => x+1\naddOne:(Int) => Int = ...\n\nscala:addOne(1)\nres4:Int=2\n```\n\n如果匿名函数体实现包含多行表达式，就可以使用 `{}` 来包围代码:\n\n```scala\nscala> {\n  i : Int =>\n  println(\"hello world\");\n  i * 2\n\n}\nres0:(Int) => Int =...\n```\n\n### 对象定义\n\nScala 支持面向对象变成，使用 `class` 定义一个类，在类定义中使用 `val` 定义成员变量，用 'def' 定义成员方法:\n\n```scala\nclass Calculator {\n  var brand: String = \"HP\"\n  def add(m:Int,n:Int):Int = m + n\n}\ndefined class Calculator\n```\n\n使用 `new` 关键字创建一个对象:\n\n```scala\n\nscala> val calc = new Calculator\ncalc: Calculator = Calculator@e75a11\n\nscala> calc.add(1,2)\nres1:Int = 3\n\nscala> calc.brand\nres2:String = \"HP\"\n\n```\n\n## 交互分析\n\n### Spark Shell\n\nSpark Shell 提供一个简单订单方式来学习 Spark 框架的API，同时也是一个可以用于交互数据分析的强大工具。\n\n#### 启动 Spark Shell\n\n```shell\n$ cd ~/spark\n$ ./bin/spark-shell\n\n```\n\nSpark - Shell 是一个 `REPL` 解释器，我们输入 Scala 表达式后，按 `回车` 就可以看到效果。\n\n比如我们要看 Spark 的版本，提示符输入:\n\n```shell\nscala> sc.version\nres2:String = 1.1.0\n```\n\n执行结果反馈总是以 `变量名:类型 = 值` 的形式来显示。在上面的结果中可以看到，执行结果被放入一个临时变量 `res2` 中，类型是 String 值为1.1.0  \n\n    Spark Shell 有 Scala 和 Python 两个版本\n\n### 集群对象:SparkContext\n\n当我们启动 Spark-Shell ，就会自动获得一个 SparkContext 对象的实例，这个对象呗存入变量 `sc` 中。\n\n在提示符下输入：sc ，就可以看到 sc 的类型：`org.apache.spark.SparkContext`:\n\n```scala\nscala> sc\nres1: org.apache.spark.SparkContext = org.apache.spark.SparkContext@3c5a3436\n```\nSparkContext 对象代表整个 Spark 集群，是 Spark 框架的功能入口，可以用来在集群中创建 RDD、累加器变量和广播变量。SparkContext 对象创建时可以指明链接到哪个集群管理器上，在 Spark-Shell 启动时，默认连接到本地的集群管理器。\n\n使用 SparkContext 对象 （在Shell里就是 `sc` 变量）的 master 方法，可以查看当前连接的集群管理器:\n\n```shell\nscala> sc.master\nres10: String = local[*]\n\n```\n\n显示结果表明，我们的确连接到了本地的集群管理器上，`*` 代表不明确指定在每个计算节点上使用的 CPU 核心数(`资源限额`)\n\n### 分布数据集：RDD\n\nSpark 的核心抽象是一个分布式数据集，被称为 `弹性分布数据集(RDD)`，代表一个`不可变`的、`可分区`、可被`并行处理`的成员集合。\n\nRDD对象需要利用 SparkContext 对象的方法创建，Spark 支持从多种来源创建 RDD 对象，比如：从本地文本文件创建，从Hadoop的HDFS文件创建，或者通过其他 RDD 进行变换获得新的 RDD。\n\n下面的示例使用本地 Spark 目录下的 `README.md` 文件创建一个新的 RDD:\n\n```scala\nscala> val textFile = sc.textFile(\"README.md\")\ntextFile: spark.RDD[String] = spark.MappedRDD@2ee9b6e3\n\n```\n\n我们看到执行结果是返回了一个 `Spark.RDD` 类型的变量 textFile，RDD是一个 `模板类`，方括号里的 String 代表这个RDD对象 `成员的类型`。由于是一个对象，因此值用地址表示:spark.MappedRDD@2ee9b7e3 。\n\nSparkContext 对象的 textFile 方法创建的 RDD 中，一个成员对应原始文件的一行。我们看到在执行结果中返回一个 RDD，成员类型为 String，我们将这个对象保存在变量 textFile 中。\n\n使用 SparkContext 对象创建 RDD 数据集，然后才能干点有意义的事。\n\n### RDD：变换与动作\n\nRDD的内部实现了分布式计算的功能，我们在 RDD 上执行的操作是透明的在整个集群上执行的。也就是说，当 RDD 建立后，这个 RDD 就不属于本地了，它在整个集群中有效。当在 RDD 上执行一个操作， RDD内部需要和 `集群管理器` 进行沟通协商。\n\n对一个　RDD 可以进行两种操作：动作（`action`）和变换（`transformation`）。动作总是从集群中 `取回数据` ，变换总是获得一个新的RDD，这时两种操作的字面上的差异\n\n事实上，当在RDD上执行一个 `变换` 时，RDD仅仅记录要做的变换，只有当RDD上需要执行一个 `动作` 时，RDD 才通过集群管理器 启动实质的分布计算。\n\n这有点像拍电影，`变换` 操作只是剧本，只有导演喊 Action 的时候，真正的电影才开始制作。\n\n### 不一样的动作和变换\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n#\n","source":"_posts/Hello World with Spark.markdown","raw":"---\nlayout:     keynote\ntitle:      \"Hello World with Spark\"\nsubtitle:   \"Keynote: Hello World with Spark\"\niframe:     \ndate:       2016-06-17\nauthor:     \"\"\nheader-img: \"post-bg-js-version.jpg\"\ntags:\n    - 数据相关\n    - Spark\n---\n# Spark\n\n## 简介\n\n## Scala 语言\n\nSpark 是用Scala（发音为 /ˈskɑːlə, ˈskeɪlə/）语言开发的.Scala是一种多范式的编程语言，设计意图是要继承面向对象变成和函数式编程的各种特性。由于不满Java语言复杂的语法，瑞士洛桑联邦理工学院奥德斯基教授带领小组在2001年创建 了Scala语言（任性~）。\n\nScala 运行在Java虚拟机上，也就是说Scala会被便以为和Java编译后的 class 一样的字节码。也改变着 Scala 和 Java 之间可以相互调用变并且他们可以联合编译，不过实际上 Scala 调用 Java 容易一些，而java调用 scala有时会遇到一些问题。\n\n至少在Spark应用中，Scala比Java的开发效率更高。\n\n启动 Scala 环境\n\n```shell\n$ cd ~/spark\n$ ./bin/spark-shell\n```\n\n### 常量与变量\n\n在 Scala 中定义一个变量使用 `var` 关键字:\n\n```scala\nscala> var name = \"steve\"\nname:java.lang.String = steve\n\nscala> name = \"marius\"\nname: java.lang.String = marius\n\n```\n\n如果需要定义一个常量，使用 `val` 关键字，常量在首次赋值之后不可以更改:\n\n```scala\nscala> val two = 1 + 1\ntwo: Int = 2\n```\n\n### 函数定义与调用\n\n在 Scala 中，使用`def`关键字定义一个函数，等号左侧是函数名、参数列表和返回值，右侧是函数体实现和表达式\n\n定义函数对传入整型参数加1并返回:\n\n```scala\nscala> def addOne(m:Int): Int = m + 1\naddOne: (m:Int)Int\n```\n\n使用函数名，传入参数并进行函数调用\n\n```scala\nscala > var x = addOne(123)\nx : 124\n```\n\n如果函数体需要多个表达式才能实现，可以使用`代码块`将多个表达式抱起来:\n\n```scala\nscala> def sum(n:Int):Int = {\n  for(i <- 1 to 10)\n    r=r*1\n\n  r //or return r\n}\n```\n\n如果在函数体中不使用`return`返回函数值，那么`最后一个表达式`的值就是函数返回值\n\n### 超级重要的匿名函数\n\nScala支持匿名函数，创建匿名函数不需要使用 `def` 关键字，符号 `=>` 的左侧定义参数列表，右侧定义函数体实现。\n\n下面的匿名函数为x的变量加1并返回结果：\n\n```scala\nscala>(x:Int) => x+1\nres2:(Int) => Int = ...\n\n```\n\n函数可以赋值给变量或常量，这就是`函数式变成`的一个特点，下面将匿名函数赋值给 `addOne` 常量，后续代码中就可以使用 `addOne` 进行调用了:\n\n```scala\nscala:val addOne = (x:Int) => x+1\naddOne:(Int) => Int = ...\n\nscala:addOne(1)\nres4:Int=2\n```\n\n如果匿名函数体实现包含多行表达式，就可以使用 `{}` 来包围代码:\n\n```scala\nscala> {\n  i : Int =>\n  println(\"hello world\");\n  i * 2\n\n}\nres0:(Int) => Int =...\n```\n\n### 对象定义\n\nScala 支持面向对象变成，使用 `class` 定义一个类，在类定义中使用 `val` 定义成员变量，用 'def' 定义成员方法:\n\n```scala\nclass Calculator {\n  var brand: String = \"HP\"\n  def add(m:Int,n:Int):Int = m + n\n}\ndefined class Calculator\n```\n\n使用 `new` 关键字创建一个对象:\n\n```scala\n\nscala> val calc = new Calculator\ncalc: Calculator = Calculator@e75a11\n\nscala> calc.add(1,2)\nres1:Int = 3\n\nscala> calc.brand\nres2:String = \"HP\"\n\n```\n\n## 交互分析\n\n### Spark Shell\n\nSpark Shell 提供一个简单订单方式来学习 Spark 框架的API，同时也是一个可以用于交互数据分析的强大工具。\n\n#### 启动 Spark Shell\n\n```shell\n$ cd ~/spark\n$ ./bin/spark-shell\n\n```\n\nSpark - Shell 是一个 `REPL` 解释器，我们输入 Scala 表达式后，按 `回车` 就可以看到效果。\n\n比如我们要看 Spark 的版本，提示符输入:\n\n```shell\nscala> sc.version\nres2:String = 1.1.0\n```\n\n执行结果反馈总是以 `变量名:类型 = 值` 的形式来显示。在上面的结果中可以看到，执行结果被放入一个临时变量 `res2` 中，类型是 String 值为1.1.0  \n\n    Spark Shell 有 Scala 和 Python 两个版本\n\n### 集群对象:SparkContext\n\n当我们启动 Spark-Shell ，就会自动获得一个 SparkContext 对象的实例，这个对象呗存入变量 `sc` 中。\n\n在提示符下输入：sc ，就可以看到 sc 的类型：`org.apache.spark.SparkContext`:\n\n```scala\nscala> sc\nres1: org.apache.spark.SparkContext = org.apache.spark.SparkContext@3c5a3436\n```\nSparkContext 对象代表整个 Spark 集群，是 Spark 框架的功能入口，可以用来在集群中创建 RDD、累加器变量和广播变量。SparkContext 对象创建时可以指明链接到哪个集群管理器上，在 Spark-Shell 启动时，默认连接到本地的集群管理器。\n\n使用 SparkContext 对象 （在Shell里就是 `sc` 变量）的 master 方法，可以查看当前连接的集群管理器:\n\n```shell\nscala> sc.master\nres10: String = local[*]\n\n```\n\n显示结果表明，我们的确连接到了本地的集群管理器上，`*` 代表不明确指定在每个计算节点上使用的 CPU 核心数(`资源限额`)\n\n### 分布数据集：RDD\n\nSpark 的核心抽象是一个分布式数据集，被称为 `弹性分布数据集(RDD)`，代表一个`不可变`的、`可分区`、可被`并行处理`的成员集合。\n\nRDD对象需要利用 SparkContext 对象的方法创建，Spark 支持从多种来源创建 RDD 对象，比如：从本地文本文件创建，从Hadoop的HDFS文件创建，或者通过其他 RDD 进行变换获得新的 RDD。\n\n下面的示例使用本地 Spark 目录下的 `README.md` 文件创建一个新的 RDD:\n\n```scala\nscala> val textFile = sc.textFile(\"README.md\")\ntextFile: spark.RDD[String] = spark.MappedRDD@2ee9b6e3\n\n```\n\n我们看到执行结果是返回了一个 `Spark.RDD` 类型的变量 textFile，RDD是一个 `模板类`，方括号里的 String 代表这个RDD对象 `成员的类型`。由于是一个对象，因此值用地址表示:spark.MappedRDD@2ee9b7e3 。\n\nSparkContext 对象的 textFile 方法创建的 RDD 中，一个成员对应原始文件的一行。我们看到在执行结果中返回一个 RDD，成员类型为 String，我们将这个对象保存在变量 textFile 中。\n\n使用 SparkContext 对象创建 RDD 数据集，然后才能干点有意义的事。\n\n### RDD：变换与动作\n\nRDD的内部实现了分布式计算的功能，我们在 RDD 上执行的操作是透明的在整个集群上执行的。也就是说，当 RDD 建立后，这个 RDD 就不属于本地了，它在整个集群中有效。当在 RDD 上执行一个操作， RDD内部需要和 `集群管理器` 进行沟通协商。\n\n对一个　RDD 可以进行两种操作：动作（`action`）和变换（`transformation`）。动作总是从集群中 `取回数据` ，变换总是获得一个新的RDD，这时两种操作的字面上的差异\n\n事实上，当在RDD上执行一个 `变换` 时，RDD仅仅记录要做的变换，只有当RDD上需要执行一个 `动作` 时，RDD 才通过集群管理器 启动实质的分布计算。\n\n这有点像拍电影，`变换` 操作只是剧本，只有导演喊 Action 的时候，真正的电影才开始制作。\n\n### 不一样的动作和变换\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n#\n","slug":"Hello World with Spark","published":1,"updated":"2016-06-20T01:49:13.067Z","comments":1,"photos":[],"link":"","_id":"cipnd970t0004yww7g8ee2fle","content":"<h1 id=\"Spark\"><a href=\"#Spark\" class=\"headerlink\" title=\"Spark\"></a>Spark</h1><h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><h2 id=\"Scala-语言\"><a href=\"#Scala-语言\" class=\"headerlink\" title=\"Scala 语言\"></a>Scala 语言</h2><p>Spark 是用Scala（发音为 /ˈskɑːlə, ˈskeɪlə/）语言开发的.Scala是一种多范式的编程语言，设计意图是要继承面向对象变成和函数式编程的各种特性。由于不满Java语言复杂的语法，瑞士洛桑联邦理工学院奥德斯基教授带领小组在2001年创建 了Scala语言（任性~）。</p>\n<p>Scala 运行在Java虚拟机上，也就是说Scala会被便以为和Java编译后的 class 一样的字节码。也改变着 Scala 和 Java 之间可以相互调用变并且他们可以联合编译，不过实际上 Scala 调用 Java 容易一些，而java调用 scala有时会遇到一些问题。</p>\n<p>至少在Spark应用中，Scala比Java的开发效率更高。</p>\n<p>启动 Scala 环境</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ cd ~/spark</span><br><span class=\"line\">$ ./bin/spark-shell</span><br></pre></td></tr></table></figure>\n<h3 id=\"常量与变量\"><a href=\"#常量与变量\" class=\"headerlink\" title=\"常量与变量\"></a>常量与变量</h3><p>在 Scala 中定义一个变量使用 <code>var</code> 关键字:</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"code\"><pre><span class=\"line\">scala&gt; <span class=\"keyword\">var</span> name = <span class=\"string\">\"steve\"</span></span><br><span class=\"line\">name:java.lang.<span class=\"type\">String</span> = steve</span><br><span class=\"line\"></span><br><span class=\"line\">scala&gt; name = <span class=\"string\">\"marius\"</span></span><br><span class=\"line\">name: java.lang.<span class=\"type\">String</span> = marius</span><br></pre></td></tr></table></figure>\n<p>如果需要定义一个常量，使用 <code>val</code> 关键字，常量在首次赋值之后不可以更改:</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"code\"><pre><span class=\"line\">scala&gt; <span class=\"keyword\">val</span> two = <span class=\"number\">1</span> + <span class=\"number\">1</span></span><br><span class=\"line\">two: <span class=\"type\">Int</span> = <span class=\"number\">2</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"函数定义与调用\"><a href=\"#函数定义与调用\" class=\"headerlink\" title=\"函数定义与调用\"></a>函数定义与调用</h3><p>在 Scala 中，使用<code>def</code>关键字定义一个函数，等号左侧是函数名、参数列表和返回值，右侧是函数体实现和表达式</p>\n<p>定义函数对传入整型参数加1并返回:</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"code\"><pre><span class=\"line\">scala&gt; <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">addOne</span></span>(m:<span class=\"type\">Int</span>): <span class=\"type\">Int</span> = m + <span class=\"number\">1</span></span><br><span class=\"line\">addOne: (m:<span class=\"type\">Int</span>)<span class=\"type\">Int</span></span><br></pre></td></tr></table></figure>\n<p>使用函数名，传入参数并进行函数调用</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"code\"><pre><span class=\"line\">scala &gt; <span class=\"keyword\">var</span> x = addOne(<span class=\"number\">123</span>)</span><br><span class=\"line\">x : <span class=\"number\">124</span></span><br></pre></td></tr></table></figure>\n<p>如果函数体需要多个表达式才能实现，可以使用<code>代码块</code>将多个表达式抱起来:</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"code\"><pre><span class=\"line\">scala&gt; <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">sum</span></span>(n:<span class=\"type\">Int</span>):<span class=\"type\">Int</span> = &#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(i &lt;- <span class=\"number\">1</span> to <span class=\"number\">10</span>)</span><br><span class=\"line\">    r=r*<span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">  r <span class=\"comment\">//or return r</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如果在函数体中不使用<code>return</code>返回函数值，那么<code>最后一个表达式</code>的值就是函数返回值</p>\n<h3 id=\"超级重要的匿名函数\"><a href=\"#超级重要的匿名函数\" class=\"headerlink\" title=\"超级重要的匿名函数\"></a>超级重要的匿名函数</h3><p>Scala支持匿名函数，创建匿名函数不需要使用 <code>def</code> 关键字，符号 <code>=&gt;</code> 的左侧定义参数列表，右侧定义函数体实现。</p>\n<p>下面的匿名函数为x的变量加1并返回结果：</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"code\"><pre><span class=\"line\">scala&gt;(x:<span class=\"type\">Int</span>) =&gt; x+<span class=\"number\">1</span></span><br><span class=\"line\">res2:(<span class=\"type\">Int</span>) =&gt; <span class=\"type\">Int</span> = ...</span><br></pre></td></tr></table></figure>\n<p>函数可以赋值给变量或常量，这就是<code>函数式变成</code>的一个特点，下面将匿名函数赋值给 <code>addOne</code> 常量，后续代码中就可以使用 <code>addOne</code> 进行调用了:</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"code\"><pre><span class=\"line\">scala:<span class=\"keyword\">val</span> addOne = (x:<span class=\"type\">Int</span>) =&gt; x+<span class=\"number\">1</span></span><br><span class=\"line\">addOne:(<span class=\"type\">Int</span>) =&gt; <span class=\"type\">Int</span> = ...</span><br><span class=\"line\"></span><br><span class=\"line\">scala:addOne(<span class=\"number\">1</span>)</span><br><span class=\"line\">res4:<span class=\"type\">Int</span>=<span class=\"number\">2</span></span><br></pre></td></tr></table></figure>\n<p>如果匿名函数体实现包含多行表达式，就可以使用 <code>{}</code> 来包围代码:</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"code\"><pre><span class=\"line\">scala&gt; &#123;</span><br><span class=\"line\">  i : <span class=\"type\">Int</span> =&gt;</span><br><span class=\"line\">  println(<span class=\"string\">\"hello world\"</span>);</span><br><span class=\"line\">  i * <span class=\"number\">2</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">res0:(<span class=\"type\">Int</span>) =&gt; <span class=\"type\">Int</span> =...</span><br></pre></td></tr></table></figure>\n<h3 id=\"对象定义\"><a href=\"#对象定义\" class=\"headerlink\" title=\"对象定义\"></a>对象定义</h3><p>Scala 支持面向对象变成，使用 <code>class</code> 定义一个类，在类定义中使用 <code>val</code> 定义成员变量，用 ‘def’ 定义成员方法:</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Calculator</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> brand: <span class=\"type\">String</span> = <span class=\"string\">\"HP\"</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">add</span></span>(m:<span class=\"type\">Int</span>,n:<span class=\"type\">Int</span>):<span class=\"type\">Int</span> = m + n</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">defined <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Calculator</span></span></span><br></pre></td></tr></table></figure>\n<p>使用 <code>new</code> 关键字创建一个对象:</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">scala&gt; <span class=\"keyword\">val</span> calc = <span class=\"keyword\">new</span> <span class=\"type\">Calculator</span></span><br><span class=\"line\">calc: <span class=\"type\">Calculator</span> = <span class=\"type\">Calculator</span><span class=\"meta\">@e</span>75a11</span><br><span class=\"line\"></span><br><span class=\"line\">scala&gt; calc.add(<span class=\"number\">1</span>,<span class=\"number\">2</span>)</span><br><span class=\"line\">res1:<span class=\"type\">Int</span> = <span class=\"number\">3</span></span><br><span class=\"line\"></span><br><span class=\"line\">scala&gt; calc.brand</span><br><span class=\"line\">res2:<span class=\"type\">String</span> = <span class=\"string\">\"HP\"</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"交互分析\"><a href=\"#交互分析\" class=\"headerlink\" title=\"交互分析\"></a>交互分析</h2><h3 id=\"Spark-Shell\"><a href=\"#Spark-Shell\" class=\"headerlink\" title=\"Spark Shell\"></a>Spark Shell</h3><p>Spark Shell 提供一个简单订单方式来学习 Spark 框架的API，同时也是一个可以用于交互数据分析的强大工具。</p>\n<h4 id=\"启动-Spark-Shell\"><a href=\"#启动-Spark-Shell\" class=\"headerlink\" title=\"启动 Spark Shell\"></a>启动 Spark Shell</h4><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ cd ~/spark</span><br><span class=\"line\">$ ./bin/spark-shell</span><br></pre></td></tr></table></figure>\n<p>Spark - Shell 是一个 <code>REPL</code> 解释器，我们输入 Scala 表达式后，按 <code>回车</code> 就可以看到效果。</p>\n<p>比如我们要看 Spark 的版本，提示符输入:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">scala&gt; sc.version</span><br><span class=\"line\">res2:String = 1.1.0</span><br></pre></td></tr></table></figure>\n<p>执行结果反馈总是以 <code>变量名:类型 = 值</code> 的形式来显示。在上面的结果中可以看到，执行结果被放入一个临时变量 <code>res2</code> 中，类型是 String 值为1.1.0  </p>\n<pre><code>Spark Shell 有 Scala 和 Python 两个版本\n</code></pre><h3 id=\"集群对象-SparkContext\"><a href=\"#集群对象-SparkContext\" class=\"headerlink\" title=\"集群对象:SparkContext\"></a>集群对象:SparkContext</h3><p>当我们启动 Spark-Shell ，就会自动获得一个 SparkContext 对象的实例，这个对象呗存入变量 <code>sc</code> 中。</p>\n<p>在提示符下输入：sc ，就可以看到 sc 的类型：<code>org.apache.spark.SparkContext</code>:</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"code\"><pre><span class=\"line\">scala&gt; sc</span><br><span class=\"line\">res1: org.apache.spark.<span class=\"type\">SparkContext</span> = org.apache.spark.<span class=\"type\">SparkContext</span>@<span class=\"number\">3</span>c5a3436</span><br></pre></td></tr></table></figure>\n<p>SparkContext 对象代表整个 Spark 集群，是 Spark 框架的功能入口，可以用来在集群中创建 RDD、累加器变量和广播变量。SparkContext 对象创建时可以指明链接到哪个集群管理器上，在 Spark-Shell 启动时，默认连接到本地的集群管理器。</p>\n<p>使用 SparkContext 对象 （在Shell里就是 <code>sc</code> 变量）的 master 方法，可以查看当前连接的集群管理器:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">scala&gt; sc.master</span><br><span class=\"line\">res10: String = local[*]</span><br></pre></td></tr></table></figure>\n<p>显示结果表明，我们的确连接到了本地的集群管理器上，<code>*</code> 代表不明确指定在每个计算节点上使用的 CPU 核心数(<code>资源限额</code>)</p>\n<h3 id=\"分布数据集：RDD\"><a href=\"#分布数据集：RDD\" class=\"headerlink\" title=\"分布数据集：RDD\"></a>分布数据集：RDD</h3><p>Spark 的核心抽象是一个分布式数据集，被称为 <code>弹性分布数据集(RDD)</code>，代表一个<code>不可变</code>的、<code>可分区</code>、可被<code>并行处理</code>的成员集合。</p>\n<p>RDD对象需要利用 SparkContext 对象的方法创建，Spark 支持从多种来源创建 RDD 对象，比如：从本地文本文件创建，从Hadoop的HDFS文件创建，或者通过其他 RDD 进行变换获得新的 RDD。</p>\n<p>下面的示例使用本地 Spark 目录下的 <code>README.md</code> 文件创建一个新的 RDD:</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"code\"><pre><span class=\"line\">scala&gt; <span class=\"keyword\">val</span> textFile = sc.textFile(<span class=\"string\">\"README.md\"</span>)</span><br><span class=\"line\">textFile: spark.<span class=\"type\">RDD</span>[<span class=\"type\">String</span>] = spark.<span class=\"type\">MappedRDD</span>@<span class=\"number\">2</span>ee9b6e3</span><br></pre></td></tr></table></figure>\n<p>我们看到执行结果是返回了一个 <code>Spark.RDD</code> 类型的变量 textFile，RDD是一个 <code>模板类</code>，方括号里的 String 代表这个RDD对象 <code>成员的类型</code>。由于是一个对象，因此值用地址表示:spark.MappedRDD@2ee9b7e3 。</p>\n<p>SparkContext 对象的 textFile 方法创建的 RDD 中，一个成员对应原始文件的一行。我们看到在执行结果中返回一个 RDD，成员类型为 String，我们将这个对象保存在变量 textFile 中。</p>\n<p>使用 SparkContext 对象创建 RDD 数据集，然后才能干点有意义的事。</p>\n<h3 id=\"RDD：变换与动作\"><a href=\"#RDD：变换与动作\" class=\"headerlink\" title=\"RDD：变换与动作\"></a>RDD：变换与动作</h3><p>RDD的内部实现了分布式计算的功能，我们在 RDD 上执行的操作是透明的在整个集群上执行的。也就是说，当 RDD 建立后，这个 RDD 就不属于本地了，它在整个集群中有效。当在 RDD 上执行一个操作， RDD内部需要和 <code>集群管理器</code> 进行沟通协商。</p>\n<p>对一个　RDD 可以进行两种操作：动作（<code>action</code>）和变换（<code>transformation</code>）。动作总是从集群中 <code>取回数据</code> ，变换总是获得一个新的RDD，这时两种操作的字面上的差异</p>\n<p>事实上，当在RDD上执行一个 <code>变换</code> 时，RDD仅仅记录要做的变换，只有当RDD上需要执行一个 <code>动作</code> 时，RDD 才通过集群管理器 启动实质的分布计算。</p>\n<p>这有点像拍电影，<code>变换</code> 操作只是剧本，只有导演喊 Action 的时候，真正的电影才开始制作。</p>\n<h3 id=\"不一样的动作和变换\"><a href=\"#不一样的动作和变换\" class=\"headerlink\" title=\"不一样的动作和变换\"></a>不一样的动作和变换</h3><p>#</p>\n","excerpt":"","more":"<h1 id=\"Spark\"><a href=\"#Spark\" class=\"headerlink\" title=\"Spark\"></a>Spark</h1><h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><h2 id=\"Scala-语言\"><a href=\"#Scala-语言\" class=\"headerlink\" title=\"Scala 语言\"></a>Scala 语言</h2><p>Spark 是用Scala（发音为 /ˈskɑːlə, ˈskeɪlə/）语言开发的.Scala是一种多范式的编程语言，设计意图是要继承面向对象变成和函数式编程的各种特性。由于不满Java语言复杂的语法，瑞士洛桑联邦理工学院奥德斯基教授带领小组在2001年创建 了Scala语言（任性~）。</p>\n<p>Scala 运行在Java虚拟机上，也就是说Scala会被便以为和Java编译后的 class 一样的字节码。也改变着 Scala 和 Java 之间可以相互调用变并且他们可以联合编译，不过实际上 Scala 调用 Java 容易一些，而java调用 scala有时会遇到一些问题。</p>\n<p>至少在Spark应用中，Scala比Java的开发效率更高。</p>\n<p>启动 Scala 环境</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ cd ~/spark</span><br><span class=\"line\">$ ./bin/spark-shell</span><br></pre></td></tr></table></figure>\n<h3 id=\"常量与变量\"><a href=\"#常量与变量\" class=\"headerlink\" title=\"常量与变量\"></a>常量与变量</h3><p>在 Scala 中定义一个变量使用 <code>var</code> 关键字:</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"code\"><pre><span class=\"line\">scala&gt; <span class=\"keyword\">var</span> name = <span class=\"string\">\"steve\"</span></span><br><span class=\"line\">name:java.lang.<span class=\"type\">String</span> = steve</span><br><span class=\"line\"></span><br><span class=\"line\">scala&gt; name = <span class=\"string\">\"marius\"</span></span><br><span class=\"line\">name: java.lang.<span class=\"type\">String</span> = marius</span><br></pre></td></tr></table></figure>\n<p>如果需要定义一个常量，使用 <code>val</code> 关键字，常量在首次赋值之后不可以更改:</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"code\"><pre><span class=\"line\">scala&gt; <span class=\"keyword\">val</span> two = <span class=\"number\">1</span> + <span class=\"number\">1</span></span><br><span class=\"line\">two: <span class=\"type\">Int</span> = <span class=\"number\">2</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"函数定义与调用\"><a href=\"#函数定义与调用\" class=\"headerlink\" title=\"函数定义与调用\"></a>函数定义与调用</h3><p>在 Scala 中，使用<code>def</code>关键字定义一个函数，等号左侧是函数名、参数列表和返回值，右侧是函数体实现和表达式</p>\n<p>定义函数对传入整型参数加1并返回:</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"code\"><pre><span class=\"line\">scala&gt; <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">addOne</span></span>(m:<span class=\"type\">Int</span>): <span class=\"type\">Int</span> = m + <span class=\"number\">1</span></span><br><span class=\"line\">addOne: (m:<span class=\"type\">Int</span>)<span class=\"type\">Int</span></span><br></pre></td></tr></table></figure>\n<p>使用函数名，传入参数并进行函数调用</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"code\"><pre><span class=\"line\">scala &gt; <span class=\"keyword\">var</span> x = addOne(<span class=\"number\">123</span>)</span><br><span class=\"line\">x : <span class=\"number\">124</span></span><br></pre></td></tr></table></figure>\n<p>如果函数体需要多个表达式才能实现，可以使用<code>代码块</code>将多个表达式抱起来:</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"code\"><pre><span class=\"line\">scala&gt; <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">sum</span></span>(n:<span class=\"type\">Int</span>):<span class=\"type\">Int</span> = &#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(i &lt;- <span class=\"number\">1</span> to <span class=\"number\">10</span>)</span><br><span class=\"line\">    r=r*<span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">  r <span class=\"comment\">//or return r</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如果在函数体中不使用<code>return</code>返回函数值，那么<code>最后一个表达式</code>的值就是函数返回值</p>\n<h3 id=\"超级重要的匿名函数\"><a href=\"#超级重要的匿名函数\" class=\"headerlink\" title=\"超级重要的匿名函数\"></a>超级重要的匿名函数</h3><p>Scala支持匿名函数，创建匿名函数不需要使用 <code>def</code> 关键字，符号 <code>=&gt;</code> 的左侧定义参数列表，右侧定义函数体实现。</p>\n<p>下面的匿名函数为x的变量加1并返回结果：</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"code\"><pre><span class=\"line\">scala&gt;(x:<span class=\"type\">Int</span>) =&gt; x+<span class=\"number\">1</span></span><br><span class=\"line\">res2:(<span class=\"type\">Int</span>) =&gt; <span class=\"type\">Int</span> = ...</span><br></pre></td></tr></table></figure>\n<p>函数可以赋值给变量或常量，这就是<code>函数式变成</code>的一个特点，下面将匿名函数赋值给 <code>addOne</code> 常量，后续代码中就可以使用 <code>addOne</code> 进行调用了:</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"code\"><pre><span class=\"line\">scala:<span class=\"keyword\">val</span> addOne = (x:<span class=\"type\">Int</span>) =&gt; x+<span class=\"number\">1</span></span><br><span class=\"line\">addOne:(<span class=\"type\">Int</span>) =&gt; <span class=\"type\">Int</span> = ...</span><br><span class=\"line\"></span><br><span class=\"line\">scala:addOne(<span class=\"number\">1</span>)</span><br><span class=\"line\">res4:<span class=\"type\">Int</span>=<span class=\"number\">2</span></span><br></pre></td></tr></table></figure>\n<p>如果匿名函数体实现包含多行表达式，就可以使用 <code>{}</code> 来包围代码:</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"code\"><pre><span class=\"line\">scala&gt; &#123;</span><br><span class=\"line\">  i : <span class=\"type\">Int</span> =&gt;</span><br><span class=\"line\">  println(<span class=\"string\">\"hello world\"</span>);</span><br><span class=\"line\">  i * <span class=\"number\">2</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">res0:(<span class=\"type\">Int</span>) =&gt; <span class=\"type\">Int</span> =...</span><br></pre></td></tr></table></figure>\n<h3 id=\"对象定义\"><a href=\"#对象定义\" class=\"headerlink\" title=\"对象定义\"></a>对象定义</h3><p>Scala 支持面向对象变成，使用 <code>class</code> 定义一个类，在类定义中使用 <code>val</code> 定义成员变量，用 ‘def’ 定义成员方法:</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Calculator</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> brand: <span class=\"type\">String</span> = <span class=\"string\">\"HP\"</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">add</span></span>(m:<span class=\"type\">Int</span>,n:<span class=\"type\">Int</span>):<span class=\"type\">Int</span> = m + n</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">defined <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Calculator</span></span></span><br></pre></td></tr></table></figure>\n<p>使用 <code>new</code> 关键字创建一个对象:</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">scala&gt; <span class=\"keyword\">val</span> calc = <span class=\"keyword\">new</span> <span class=\"type\">Calculator</span></span><br><span class=\"line\">calc: <span class=\"type\">Calculator</span> = <span class=\"type\">Calculator</span><span class=\"meta\">@e</span>75a11</span><br><span class=\"line\"></span><br><span class=\"line\">scala&gt; calc.add(<span class=\"number\">1</span>,<span class=\"number\">2</span>)</span><br><span class=\"line\">res1:<span class=\"type\">Int</span> = <span class=\"number\">3</span></span><br><span class=\"line\"></span><br><span class=\"line\">scala&gt; calc.brand</span><br><span class=\"line\">res2:<span class=\"type\">String</span> = <span class=\"string\">\"HP\"</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"交互分析\"><a href=\"#交互分析\" class=\"headerlink\" title=\"交互分析\"></a>交互分析</h2><h3 id=\"Spark-Shell\"><a href=\"#Spark-Shell\" class=\"headerlink\" title=\"Spark Shell\"></a>Spark Shell</h3><p>Spark Shell 提供一个简单订单方式来学习 Spark 框架的API，同时也是一个可以用于交互数据分析的强大工具。</p>\n<h4 id=\"启动-Spark-Shell\"><a href=\"#启动-Spark-Shell\" class=\"headerlink\" title=\"启动 Spark Shell\"></a>启动 Spark Shell</h4><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ cd ~/spark</span><br><span class=\"line\">$ ./bin/spark-shell</span><br></pre></td></tr></table></figure>\n<p>Spark - Shell 是一个 <code>REPL</code> 解释器，我们输入 Scala 表达式后，按 <code>回车</code> 就可以看到效果。</p>\n<p>比如我们要看 Spark 的版本，提示符输入:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">scala&gt; sc.version</span><br><span class=\"line\">res2:String = 1.1.0</span><br></pre></td></tr></table></figure>\n<p>执行结果反馈总是以 <code>变量名:类型 = 值</code> 的形式来显示。在上面的结果中可以看到，执行结果被放入一个临时变量 <code>res2</code> 中，类型是 String 值为1.1.0  </p>\n<pre><code>Spark Shell 有 Scala 和 Python 两个版本\n</code></pre><h3 id=\"集群对象-SparkContext\"><a href=\"#集群对象-SparkContext\" class=\"headerlink\" title=\"集群对象:SparkContext\"></a>集群对象:SparkContext</h3><p>当我们启动 Spark-Shell ，就会自动获得一个 SparkContext 对象的实例，这个对象呗存入变量 <code>sc</code> 中。</p>\n<p>在提示符下输入：sc ，就可以看到 sc 的类型：<code>org.apache.spark.SparkContext</code>:</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"code\"><pre><span class=\"line\">scala&gt; sc</span><br><span class=\"line\">res1: org.apache.spark.<span class=\"type\">SparkContext</span> = org.apache.spark.<span class=\"type\">SparkContext</span>@<span class=\"number\">3</span>c5a3436</span><br></pre></td></tr></table></figure>\n<p>SparkContext 对象代表整个 Spark 集群，是 Spark 框架的功能入口，可以用来在集群中创建 RDD、累加器变量和广播变量。SparkContext 对象创建时可以指明链接到哪个集群管理器上，在 Spark-Shell 启动时，默认连接到本地的集群管理器。</p>\n<p>使用 SparkContext 对象 （在Shell里就是 <code>sc</code> 变量）的 master 方法，可以查看当前连接的集群管理器:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">scala&gt; sc.master</span><br><span class=\"line\">res10: String = local[*]</span><br></pre></td></tr></table></figure>\n<p>显示结果表明，我们的确连接到了本地的集群管理器上，<code>*</code> 代表不明确指定在每个计算节点上使用的 CPU 核心数(<code>资源限额</code>)</p>\n<h3 id=\"分布数据集：RDD\"><a href=\"#分布数据集：RDD\" class=\"headerlink\" title=\"分布数据集：RDD\"></a>分布数据集：RDD</h3><p>Spark 的核心抽象是一个分布式数据集，被称为 <code>弹性分布数据集(RDD)</code>，代表一个<code>不可变</code>的、<code>可分区</code>、可被<code>并行处理</code>的成员集合。</p>\n<p>RDD对象需要利用 SparkContext 对象的方法创建，Spark 支持从多种来源创建 RDD 对象，比如：从本地文本文件创建，从Hadoop的HDFS文件创建，或者通过其他 RDD 进行变换获得新的 RDD。</p>\n<p>下面的示例使用本地 Spark 目录下的 <code>README.md</code> 文件创建一个新的 RDD:</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"code\"><pre><span class=\"line\">scala&gt; <span class=\"keyword\">val</span> textFile = sc.textFile(<span class=\"string\">\"README.md\"</span>)</span><br><span class=\"line\">textFile: spark.<span class=\"type\">RDD</span>[<span class=\"type\">String</span>] = spark.<span class=\"type\">MappedRDD</span>@<span class=\"number\">2</span>ee9b6e3</span><br></pre></td></tr></table></figure>\n<p>我们看到执行结果是返回了一个 <code>Spark.RDD</code> 类型的变量 textFile，RDD是一个 <code>模板类</code>，方括号里的 String 代表这个RDD对象 <code>成员的类型</code>。由于是一个对象，因此值用地址表示:spark.MappedRDD@2ee9b7e3 。</p>\n<p>SparkContext 对象的 textFile 方法创建的 RDD 中，一个成员对应原始文件的一行。我们看到在执行结果中返回一个 RDD，成员类型为 String，我们将这个对象保存在变量 textFile 中。</p>\n<p>使用 SparkContext 对象创建 RDD 数据集，然后才能干点有意义的事。</p>\n<h3 id=\"RDD：变换与动作\"><a href=\"#RDD：变换与动作\" class=\"headerlink\" title=\"RDD：变换与动作\"></a>RDD：变换与动作</h3><p>RDD的内部实现了分布式计算的功能，我们在 RDD 上执行的操作是透明的在整个集群上执行的。也就是说，当 RDD 建立后，这个 RDD 就不属于本地了，它在整个集群中有效。当在 RDD 上执行一个操作， RDD内部需要和 <code>集群管理器</code> 进行沟通协商。</p>\n<p>对一个　RDD 可以进行两种操作：动作（<code>action</code>）和变换（<code>transformation</code>）。动作总是从集群中 <code>取回数据</code> ，变换总是获得一个新的RDD，这时两种操作的字面上的差异</p>\n<p>事实上，当在RDD上执行一个 <code>变换</code> 时，RDD仅仅记录要做的变换，只有当RDD上需要执行一个 <code>动作</code> 时，RDD 才通过集群管理器 启动实质的分布计算。</p>\n<p>这有点像拍电影，<code>变换</code> 操作只是剧本，只有导演喊 Action 的时候，真正的电影才开始制作。</p>\n<h3 id=\"不一样的动作和变换\"><a href=\"#不一样的动作和变换\" class=\"headerlink\" title=\"不一样的动作和变换\"></a>不一样的动作和变换</h3><p>#</p>\n"},{"layout":"keynote","title":"Gulp Getting Started","subtitle":"Keynote: Gulp Getting Started","iframe":null,"date":"2016-06-16T16:00:00.000Z","author":"","header-img":"post-bg-js-version.jpg","_content":"# Getting Start\n\n## 简介\n\n  Gulp是基于Node.js的前端构建工具，通过Gulp的插件可以实现前端代码的编译(sass/less)、压缩、测试；图片的压缩；浏览器自动刷新，还有很多强大的功能可以在[这里](http://gulpjs.com/plugins/)查找，Gulp比起Grunt不仅简单，而且更容易阅读,我们可以做一个对比:\n\n  Grunt:\n```javascript\n  sass: {\n    dist: {\n      style: 'expanded'\n    },\n    files: {\n      'dist/assets/css/main.css':'src/styles/main.scss'\n    }\n  },\n  autoprefixer: {\n    dist: {\n      options: {\n        browsers: [\n          'last 2 version','safari 5','ie8','ie9'\n        ]\n      }\n    }\n  },\n  grunt.registerTask('styles',['sass','autoprefixer']);\n\n```\n\n  在Grunt里面，每个插件使用的方式相对独立，正如上面的代码通过sass插件将`main.sass`文件编译成了`main.css`文件，接着autoprefixer插件再对编译好的`main.css`文件进行修改，最后覆盖`main.css`。那么覆盖文件就是多余的了，有没有办法走到sass和autoprefixer一并处理完在生成`main.css`？看看Gulp是如何做到的:\n\n```javascript\ngulp.task('sass',function(){\n  return gulp.src('src/style/main.sass')\n    .pipe(sass({style:'compressed'}))\n    .pipe(autoprefixer('last 2 version','safari 5' ...))\n    .pipe(gulp.dest('dist/assets/css'))\n});\n```\n使用Gulp我们只需要放一个路径，通过管道方式使用插件，最后生成文件，是不是有种JQuery的感觉。这种方式不仅提高效率而且一眼就认清输入和输出文件\n\n## Getting Started\n\n#### Install gulp to your project devDependencies:\n\n```shell\n$npm install gulp --save-dev\n```\n\n#### Create `gulpfile.js` at the root of your project:\n\n```javascript\nvar gulp = require('gulp');\n\ngulp.task('default',function(){\n  //place code for your default task here\n});\n```\n\n#### Run gulp\n\n```shell\n$gulp\n```\n\n## 安装Gulp插件\n\n  - sass的编译([gulp-ruby-sass](https://github.com/sindresorhus/gulp-ruby-sass))\n  - 自动添加css前缀([gulp-autoprefixer](https://github.com/Metrime/gulp-autoprefixer))\n  - 压缩css([gulp-minify-css](https://github.com/jonathanepollack/gulp-minify-css))\n  - JS代码校验([gulp-jshint](https://github.com/spalger/gulp-jshint))\n  - 合并JS代码([gulp-gulp-concat](https://github.com/contra/gulp-concat))\n  - 压缩JS代码([gulp-uglify](https://github.com/terinjokes/gulp-uglify))\n  - 压缩图片([gulp-imagemin](https://github.com/sindresorhus/gulp-imagemin))\n  - 自动刷新页面([gulp-livereload](https://github.com/vohof/gulp-livereload))\n  - 图片缓存,只有图片替换了才压缩([gulp-cache](https://github.com/jgable/gulp-cache))\n  - 更新提醒([gulp-notify](https://github.com/mikaelbr/gulp-notify))\n\n安装这些插件需要运行:\n\n```shell\n$ npm install  gulp-ruby-sass gulp-autoprefixer gulp-minify-css gulp-jshint gulp-concat gulp-uglify gulp-imagemin gulp-notify gulp-rename gulp-livereload gulp-cache del --save-dev\n\n```\n\n## 加载插件\n\n在`gulpfile.js` 中加载插件:\n\n```javascript\nvar gulp = require('gulp'),\n    sass = require('gulp-ruby-sass'),\n    autoprefixer = require('gulp-autoprefixer'),\n    minifycss = require('gulp-minify-css'),\n    jshint = require('gulp-jshint'),\n    uglify = require('gulp-uglify'),\n    imagemin = require('gulp-imagemin'),\n    rename = require('gulp-rename'),\n    concat = require('gulp-concat'),\n    notify = require('gulp-notify'),\n    cache = require('gulp-cache'),\n    livereload = require('gulp-livereload'),\n    del = require('del');\n```\n\n## 建立任务\n\n### 编译Sass、自动化添加CSS前缀和压缩\n\n首先我们编译Sass，添加前缀，保存到我们制定的目录下面，还没结束，我们还要压缩，给文件添加`.min`后缀后再输出压缩文件到制定目录，最后提醒任务完成:\n\n```javascript\ngulp.task('style',function(){\n  return gulp.src('src/styles/main.scss')\n    .pipe(sass({ style:'expanded' }))\n    .pipe(autoprefixer('last 2 version', 'safari 5', 'ie 8', 'ie 9', 'opera 12.1', 'ios 6', 'android 4'))\n    .pipe(gulp.dest('dist/assets/css'))\n    .pipe(rename({suffix:'.min'}))\n    .pipe(minifycss())\n    .pipe(gulp.dest('dist/assets/css'))\n    .pipe(notify({message:'Style task completed'}));\n\n})\n```\n\n  `gulp.task`这个API主要用来创建任务，在命令行下可以输入 `$gulp styles` 来执行上面的任务\n\n  `gulp.src`这个API设置需要处理的文件的路径，可以多个文件以数组方式`[main.scss,vender.scss]`传入，也可以使用正则`/**/*.scss`.\n\n  `.pipe`这个API将根据需要处理的文件导向Sass插件，哪些插件的用法可以在Github上找到\n\n  `gulp.dest()`API设置生成文件的路径，一个任务可以有多个生成路径，一个可以输出未压缩的版本，一个可以输出压缩后的版本。\n\n### JS 代码校验、合并和压缩\n\n```javascript\ngulp.task('scripts',function(){\n  return gulp.src('src/scripts/**/*.js')\n    .pipe(jshint('.jshintrc'))\n    .pipe(jshint.reporter('default'))\n    .pipe(concat('main.js'))\n    .pipe(gulp.dest('dist/assets/js'))\n    .pipe(rename({sufffix:'.min'}))\n    .pipe(uglify())\n    .pipe(gulp.dest('dist/assets/js'))\n    .pipe(notify({ message:'Scripts task complete' }));\n});\n```\n\n需要提醒的是，我们要设置JSHint 的reporter方式，上面使用`default`默认方式，了解更多请点击[这里](http://jshint.com/docs/reporters/)\n\n### 压缩图片\n\n```javascript\ngulp.task('image',function(){\n  return gulp.src('src/images/**/*')\n    .pipe(imagemin({optimizationLevel:3,progressive:true,interlaced:true}))\n    .pipe(gulp.dest('dist/assets/img'))\n    .pipe(notify({ message:'Images task complete'}));\n})\n```\n\n这个任务使用`imagemin`插件把所有在`src/images/`目录以及其子目录下的所有图片(文件)进行压缩,我们可以进一步优化，利用缓存保存已压缩过的图片，使用之前装过的`gulp-cache`插件，不过要修改一下上面的代码\n\n```javascript\n.pipe(imagemin({ optimizationLevel: 3, progressive: true, interlaced: true }))\n```\n改为\n```javascript\n.pipe(cache(imagemin({ optimizationLevel: 5, progressive: true, interlaced: true })))\n```\n\n这样，只有新建或者被修改过的图片才会被压缩\n\n### 清除文件\n\n  在任务执行之前，最好先清除之前生成的文件：\n\n  ```javascript\n  gulp.task('clean',function(cb){\n    del(['dist/assets/css','dist/assets/js','dist/assets/img'],cb);\n  })\n  ```\n\n  这里没必要使用Gulp插件，可以使用NPM提供的插件，我们用一个回调函数(`cb`)确保在退出前完成任务\n\n### 设置默认任务(default)\n\n我们在命令行下输入`gulp`执行的就是默认任务,现在我们为默认任务指定执行上面写好的三个任务:\n\n```javascript\ngulp.task('default',['clean'],function(){\n  gulp.start('styles','scripts','images');\n})\n```\n\n在这个例子里，clean任务执行完成了才会去运行其他的任务，在`gulp.start()`里的任务执行的顺序是不确定的，所以将要在他们之前执行的任务写在数组里面。\n","source":"_posts/Gulp Getting Started.markdown","raw":"---\nlayout:     keynote\ntitle:      \"Gulp Getting Started\"\nsubtitle:   \"Keynote: Gulp Getting Started\"\niframe:     \ndate:       2016-06-17\nauthor:     \"\"\nheader-img: \"post-bg-js-version.jpg\"\ntags:\n    - 前端相关\n    - 前端工具\n---\n# Getting Start\n\n## 简介\n\n  Gulp是基于Node.js的前端构建工具，通过Gulp的插件可以实现前端代码的编译(sass/less)、压缩、测试；图片的压缩；浏览器自动刷新，还有很多强大的功能可以在[这里](http://gulpjs.com/plugins/)查找，Gulp比起Grunt不仅简单，而且更容易阅读,我们可以做一个对比:\n\n  Grunt:\n```javascript\n  sass: {\n    dist: {\n      style: 'expanded'\n    },\n    files: {\n      'dist/assets/css/main.css':'src/styles/main.scss'\n    }\n  },\n  autoprefixer: {\n    dist: {\n      options: {\n        browsers: [\n          'last 2 version','safari 5','ie8','ie9'\n        ]\n      }\n    }\n  },\n  grunt.registerTask('styles',['sass','autoprefixer']);\n\n```\n\n  在Grunt里面，每个插件使用的方式相对独立，正如上面的代码通过sass插件将`main.sass`文件编译成了`main.css`文件，接着autoprefixer插件再对编译好的`main.css`文件进行修改，最后覆盖`main.css`。那么覆盖文件就是多余的了，有没有办法走到sass和autoprefixer一并处理完在生成`main.css`？看看Gulp是如何做到的:\n\n```javascript\ngulp.task('sass',function(){\n  return gulp.src('src/style/main.sass')\n    .pipe(sass({style:'compressed'}))\n    .pipe(autoprefixer('last 2 version','safari 5' ...))\n    .pipe(gulp.dest('dist/assets/css'))\n});\n```\n使用Gulp我们只需要放一个路径，通过管道方式使用插件，最后生成文件，是不是有种JQuery的感觉。这种方式不仅提高效率而且一眼就认清输入和输出文件\n\n## Getting Started\n\n#### Install gulp to your project devDependencies:\n\n```shell\n$npm install gulp --save-dev\n```\n\n#### Create `gulpfile.js` at the root of your project:\n\n```javascript\nvar gulp = require('gulp');\n\ngulp.task('default',function(){\n  //place code for your default task here\n});\n```\n\n#### Run gulp\n\n```shell\n$gulp\n```\n\n## 安装Gulp插件\n\n  - sass的编译([gulp-ruby-sass](https://github.com/sindresorhus/gulp-ruby-sass))\n  - 自动添加css前缀([gulp-autoprefixer](https://github.com/Metrime/gulp-autoprefixer))\n  - 压缩css([gulp-minify-css](https://github.com/jonathanepollack/gulp-minify-css))\n  - JS代码校验([gulp-jshint](https://github.com/spalger/gulp-jshint))\n  - 合并JS代码([gulp-gulp-concat](https://github.com/contra/gulp-concat))\n  - 压缩JS代码([gulp-uglify](https://github.com/terinjokes/gulp-uglify))\n  - 压缩图片([gulp-imagemin](https://github.com/sindresorhus/gulp-imagemin))\n  - 自动刷新页面([gulp-livereload](https://github.com/vohof/gulp-livereload))\n  - 图片缓存,只有图片替换了才压缩([gulp-cache](https://github.com/jgable/gulp-cache))\n  - 更新提醒([gulp-notify](https://github.com/mikaelbr/gulp-notify))\n\n安装这些插件需要运行:\n\n```shell\n$ npm install  gulp-ruby-sass gulp-autoprefixer gulp-minify-css gulp-jshint gulp-concat gulp-uglify gulp-imagemin gulp-notify gulp-rename gulp-livereload gulp-cache del --save-dev\n\n```\n\n## 加载插件\n\n在`gulpfile.js` 中加载插件:\n\n```javascript\nvar gulp = require('gulp'),\n    sass = require('gulp-ruby-sass'),\n    autoprefixer = require('gulp-autoprefixer'),\n    minifycss = require('gulp-minify-css'),\n    jshint = require('gulp-jshint'),\n    uglify = require('gulp-uglify'),\n    imagemin = require('gulp-imagemin'),\n    rename = require('gulp-rename'),\n    concat = require('gulp-concat'),\n    notify = require('gulp-notify'),\n    cache = require('gulp-cache'),\n    livereload = require('gulp-livereload'),\n    del = require('del');\n```\n\n## 建立任务\n\n### 编译Sass、自动化添加CSS前缀和压缩\n\n首先我们编译Sass，添加前缀，保存到我们制定的目录下面，还没结束，我们还要压缩，给文件添加`.min`后缀后再输出压缩文件到制定目录，最后提醒任务完成:\n\n```javascript\ngulp.task('style',function(){\n  return gulp.src('src/styles/main.scss')\n    .pipe(sass({ style:'expanded' }))\n    .pipe(autoprefixer('last 2 version', 'safari 5', 'ie 8', 'ie 9', 'opera 12.1', 'ios 6', 'android 4'))\n    .pipe(gulp.dest('dist/assets/css'))\n    .pipe(rename({suffix:'.min'}))\n    .pipe(minifycss())\n    .pipe(gulp.dest('dist/assets/css'))\n    .pipe(notify({message:'Style task completed'}));\n\n})\n```\n\n  `gulp.task`这个API主要用来创建任务，在命令行下可以输入 `$gulp styles` 来执行上面的任务\n\n  `gulp.src`这个API设置需要处理的文件的路径，可以多个文件以数组方式`[main.scss,vender.scss]`传入，也可以使用正则`/**/*.scss`.\n\n  `.pipe`这个API将根据需要处理的文件导向Sass插件，哪些插件的用法可以在Github上找到\n\n  `gulp.dest()`API设置生成文件的路径，一个任务可以有多个生成路径，一个可以输出未压缩的版本，一个可以输出压缩后的版本。\n\n### JS 代码校验、合并和压缩\n\n```javascript\ngulp.task('scripts',function(){\n  return gulp.src('src/scripts/**/*.js')\n    .pipe(jshint('.jshintrc'))\n    .pipe(jshint.reporter('default'))\n    .pipe(concat('main.js'))\n    .pipe(gulp.dest('dist/assets/js'))\n    .pipe(rename({sufffix:'.min'}))\n    .pipe(uglify())\n    .pipe(gulp.dest('dist/assets/js'))\n    .pipe(notify({ message:'Scripts task complete' }));\n});\n```\n\n需要提醒的是，我们要设置JSHint 的reporter方式，上面使用`default`默认方式，了解更多请点击[这里](http://jshint.com/docs/reporters/)\n\n### 压缩图片\n\n```javascript\ngulp.task('image',function(){\n  return gulp.src('src/images/**/*')\n    .pipe(imagemin({optimizationLevel:3,progressive:true,interlaced:true}))\n    .pipe(gulp.dest('dist/assets/img'))\n    .pipe(notify({ message:'Images task complete'}));\n})\n```\n\n这个任务使用`imagemin`插件把所有在`src/images/`目录以及其子目录下的所有图片(文件)进行压缩,我们可以进一步优化，利用缓存保存已压缩过的图片，使用之前装过的`gulp-cache`插件，不过要修改一下上面的代码\n\n```javascript\n.pipe(imagemin({ optimizationLevel: 3, progressive: true, interlaced: true }))\n```\n改为\n```javascript\n.pipe(cache(imagemin({ optimizationLevel: 5, progressive: true, interlaced: true })))\n```\n\n这样，只有新建或者被修改过的图片才会被压缩\n\n### 清除文件\n\n  在任务执行之前，最好先清除之前生成的文件：\n\n  ```javascript\n  gulp.task('clean',function(cb){\n    del(['dist/assets/css','dist/assets/js','dist/assets/img'],cb);\n  })\n  ```\n\n  这里没必要使用Gulp插件，可以使用NPM提供的插件，我们用一个回调函数(`cb`)确保在退出前完成任务\n\n### 设置默认任务(default)\n\n我们在命令行下输入`gulp`执行的就是默认任务,现在我们为默认任务指定执行上面写好的三个任务:\n\n```javascript\ngulp.task('default',['clean'],function(){\n  gulp.start('styles','scripts','images');\n})\n```\n\n在这个例子里，clean任务执行完成了才会去运行其他的任务，在`gulp.start()`里的任务执行的顺序是不确定的，所以将要在他们之前执行的任务写在数组里面。\n","slug":"Gulp Getting Started","published":1,"updated":"2016-06-20T01:48:58.475Z","comments":1,"photos":[],"link":"","_id":"cipnd970x0005yww7m210h3gp","content":"<h1 id=\"Getting-Start\"><a href=\"#Getting-Start\" class=\"headerlink\" title=\"Getting Start\"></a>Getting Start</h1><h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>  Gulp是基于Node.js的前端构建工具，通过Gulp的插件可以实现前端代码的编译(sass/less)、压缩、测试；图片的压缩；浏览器自动刷新，还有很多强大的功能可以在<a href=\"http://gulpjs.com/plugins/\" target=\"_blank\" rel=\"external\">这里</a>查找，Gulp比起Grunt不仅简单，而且更容易阅读,我们可以做一个对比:</p>\n<p>  Grunt:<br><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">sass: &#123;</span><br><span class=\"line\">  dist: &#123;</span><br><span class=\"line\">    style: <span class=\"string\">'expanded'</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  files: &#123;</span><br><span class=\"line\">    <span class=\"string\">'dist/assets/css/main.css'</span>:<span class=\"string\">'src/styles/main.scss'</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">autoprefixer: &#123;</span><br><span class=\"line\">  dist: &#123;</span><br><span class=\"line\">    options: &#123;</span><br><span class=\"line\">      browsers: [</span><br><span class=\"line\">        <span class=\"string\">'last 2 version'</span>,<span class=\"string\">'safari 5'</span>,<span class=\"string\">'ie8'</span>,<span class=\"string\">'ie9'</span></span><br><span class=\"line\">      ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">grunt.registerTask(<span class=\"string\">'styles'</span>,[<span class=\"string\">'sass'</span>,<span class=\"string\">'autoprefixer'</span>]);</span><br></pre></td></tr></table></figure></p>\n<p>  在Grunt里面，每个插件使用的方式相对独立，正如上面的代码通过sass插件将<code>main.sass</code>文件编译成了<code>main.css</code>文件，接着autoprefixer插件再对编译好的<code>main.css</code>文件进行修改，最后覆盖<code>main.css</code>。那么覆盖文件就是多余的了，有没有办法走到sass和autoprefixer一并处理完在生成<code>main.css</code>？看看Gulp是如何做到的:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">gulp.task(<span class=\"string\">'sass'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> gulp.src(<span class=\"string\">'src/style/main.sass'</span>)</span><br><span class=\"line\">    .pipe(sass(&#123;style:<span class=\"string\">'compressed'</span>&#125;))</span><br><span class=\"line\">    .pipe(autoprefixer(<span class=\"string\">'last 2 version'</span>,<span class=\"string\">'safari 5'</span> ...))</span><br><span class=\"line\">    .pipe(gulp.dest(<span class=\"string\">'dist/assets/css'</span>))</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>使用Gulp我们只需要放一个路径，通过管道方式使用插件，最后生成文件，是不是有种JQuery的感觉。这种方式不仅提高效率而且一眼就认清输入和输出文件</p>\n<h2 id=\"Getting-Started\"><a href=\"#Getting-Started\" class=\"headerlink\" title=\"Getting Started\"></a>Getting Started</h2><h4 id=\"Install-gulp-to-your-project-devDependencies\"><a href=\"#Install-gulp-to-your-project-devDependencies\" class=\"headerlink\" title=\"Install gulp to your project devDependencies:\"></a>Install gulp to your project devDependencies:</h4><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$npm install gulp --save-dev</span><br></pre></td></tr></table></figure>\n<h4 id=\"Create-gulpfile-js-at-the-root-of-your-project\"><a href=\"#Create-gulpfile-js-at-the-root-of-your-project\" class=\"headerlink\" title=\"Create gulpfile.js at the root of your project:\"></a>Create <code>gulpfile.js</code> at the root of your project:</h4><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> gulp = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">gulp.task(<span class=\"string\">'default'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//place code for your default task here</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h4 id=\"Run-gulp\"><a href=\"#Run-gulp\" class=\"headerlink\" title=\"Run gulp\"></a>Run gulp</h4><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$gulp</span><br></pre></td></tr></table></figure>\n<h2 id=\"安装Gulp插件\"><a href=\"#安装Gulp插件\" class=\"headerlink\" title=\"安装Gulp插件\"></a>安装Gulp插件</h2><ul>\n<li>sass的编译(<a href=\"https://github.com/sindresorhus/gulp-ruby-sass\" target=\"_blank\" rel=\"external\">gulp-ruby-sass</a>)</li>\n<li>自动添加css前缀(<a href=\"https://github.com/Metrime/gulp-autoprefixer\" target=\"_blank\" rel=\"external\">gulp-autoprefixer</a>)</li>\n<li>压缩css(<a href=\"https://github.com/jonathanepollack/gulp-minify-css\" target=\"_blank\" rel=\"external\">gulp-minify-css</a>)</li>\n<li>JS代码校验(<a href=\"https://github.com/spalger/gulp-jshint\" target=\"_blank\" rel=\"external\">gulp-jshint</a>)</li>\n<li>合并JS代码(<a href=\"https://github.com/contra/gulp-concat\" target=\"_blank\" rel=\"external\">gulp-gulp-concat</a>)</li>\n<li>压缩JS代码(<a href=\"https://github.com/terinjokes/gulp-uglify\" target=\"_blank\" rel=\"external\">gulp-uglify</a>)</li>\n<li>压缩图片(<a href=\"https://github.com/sindresorhus/gulp-imagemin\" target=\"_blank\" rel=\"external\">gulp-imagemin</a>)</li>\n<li>自动刷新页面(<a href=\"https://github.com/vohof/gulp-livereload\" target=\"_blank\" rel=\"external\">gulp-livereload</a>)</li>\n<li>图片缓存,只有图片替换了才压缩(<a href=\"https://github.com/jgable/gulp-cache\" target=\"_blank\" rel=\"external\">gulp-cache</a>)</li>\n<li>更新提醒(<a href=\"https://github.com/mikaelbr/gulp-notify\" target=\"_blank\" rel=\"external\">gulp-notify</a>)</li>\n</ul>\n<p>安装这些插件需要运行:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ npm install  gulp-ruby-sass gulp-autoprefixer gulp-minify-css gulp-jshint gulp-concat gulp-uglify gulp-imagemin gulp-notify gulp-rename gulp-livereload gulp-cache del --save-dev</span><br></pre></td></tr></table></figure>\n<h2 id=\"加载插件\"><a href=\"#加载插件\" class=\"headerlink\" title=\"加载插件\"></a>加载插件</h2><p>在<code>gulpfile.js</code> 中加载插件:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> gulp = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp'</span>),</span><br><span class=\"line\">    sass = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-ruby-sass'</span>),</span><br><span class=\"line\">    autoprefixer = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-autoprefixer'</span>),</span><br><span class=\"line\">    minifycss = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-minify-css'</span>),</span><br><span class=\"line\">    jshint = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-jshint'</span>),</span><br><span class=\"line\">    uglify = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-uglify'</span>),</span><br><span class=\"line\">    imagemin = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-imagemin'</span>),</span><br><span class=\"line\">    rename = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-rename'</span>),</span><br><span class=\"line\">    concat = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-concat'</span>),</span><br><span class=\"line\">    notify = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-notify'</span>),</span><br><span class=\"line\">    cache = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-cache'</span>),</span><br><span class=\"line\">    livereload = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-livereload'</span>),</span><br><span class=\"line\">    del = <span class=\"built_in\">require</span>(<span class=\"string\">'del'</span>);</span><br></pre></td></tr></table></figure>\n<h2 id=\"建立任务\"><a href=\"#建立任务\" class=\"headerlink\" title=\"建立任务\"></a>建立任务</h2><h3 id=\"编译Sass、自动化添加CSS前缀和压缩\"><a href=\"#编译Sass、自动化添加CSS前缀和压缩\" class=\"headerlink\" title=\"编译Sass、自动化添加CSS前缀和压缩\"></a>编译Sass、自动化添加CSS前缀和压缩</h3><p>首先我们编译Sass，添加前缀，保存到我们制定的目录下面，还没结束，我们还要压缩，给文件添加<code>.min</code>后缀后再输出压缩文件到制定目录，最后提醒任务完成:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">gulp.task(<span class=\"string\">'style'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> gulp.src(<span class=\"string\">'src/styles/main.scss'</span>)</span><br><span class=\"line\">    .pipe(sass(&#123; style:<span class=\"string\">'expanded'</span> &#125;))</span><br><span class=\"line\">    .pipe(autoprefixer(<span class=\"string\">'last 2 version'</span>, <span class=\"string\">'safari 5'</span>, <span class=\"string\">'ie 8'</span>, <span class=\"string\">'ie 9'</span>, <span class=\"string\">'opera 12.1'</span>, <span class=\"string\">'ios 6'</span>, <span class=\"string\">'android 4'</span>))</span><br><span class=\"line\">    .pipe(gulp.dest(<span class=\"string\">'dist/assets/css'</span>))</span><br><span class=\"line\">    .pipe(rename(&#123;suffix:<span class=\"string\">'.min'</span>&#125;))</span><br><span class=\"line\">    .pipe(minifycss())</span><br><span class=\"line\">    .pipe(gulp.dest(<span class=\"string\">'dist/assets/css'</span>))</span><br><span class=\"line\">    .pipe(notify(&#123;message:<span class=\"string\">'Style task completed'</span>&#125;));</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>  <code>gulp.task</code>这个API主要用来创建任务，在命令行下可以输入 <code>$gulp styles</code> 来执行上面的任务</p>\n<p>  <code>gulp.src</code>这个API设置需要处理的文件的路径，可以多个文件以数组方式<code>[main.scss,vender.scss]</code>传入，也可以使用正则<code>/**/*.scss</code>.</p>\n<p>  <code>.pipe</code>这个API将根据需要处理的文件导向Sass插件，哪些插件的用法可以在Github上找到</p>\n<p>  <code>gulp.dest()</code>API设置生成文件的路径，一个任务可以有多个生成路径，一个可以输出未压缩的版本，一个可以输出压缩后的版本。</p>\n<h3 id=\"JS-代码校验、合并和压缩\"><a href=\"#JS-代码校验、合并和压缩\" class=\"headerlink\" title=\"JS 代码校验、合并和压缩\"></a>JS 代码校验、合并和压缩</h3><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">gulp.task(<span class=\"string\">'scripts'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> gulp.src(<span class=\"string\">'src/scripts/**/*.js'</span>)</span><br><span class=\"line\">    .pipe(jshint(<span class=\"string\">'.jshintrc'</span>))</span><br><span class=\"line\">    .pipe(jshint.reporter(<span class=\"string\">'default'</span>))</span><br><span class=\"line\">    .pipe(concat(<span class=\"string\">'main.js'</span>))</span><br><span class=\"line\">    .pipe(gulp.dest(<span class=\"string\">'dist/assets/js'</span>))</span><br><span class=\"line\">    .pipe(rename(&#123;sufffix:<span class=\"string\">'.min'</span>&#125;))</span><br><span class=\"line\">    .pipe(uglify())</span><br><span class=\"line\">    .pipe(gulp.dest(<span class=\"string\">'dist/assets/js'</span>))</span><br><span class=\"line\">    .pipe(notify(&#123; message:<span class=\"string\">'Scripts task complete'</span> &#125;));</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>需要提醒的是，我们要设置JSHint 的reporter方式，上面使用<code>default</code>默认方式，了解更多请点击<a href=\"http://jshint.com/docs/reporters/\" target=\"_blank\" rel=\"external\">这里</a></p>\n<h3 id=\"压缩图片\"><a href=\"#压缩图片\" class=\"headerlink\" title=\"压缩图片\"></a>压缩图片</h3><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">gulp.task(<span class=\"string\">'image'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> gulp.src(<span class=\"string\">'src/images/**/*'</span>)</span><br><span class=\"line\">    .pipe(imagemin(&#123;optimizationLevel:<span class=\"number\">3</span>,progressive:<span class=\"literal\">true</span>,interlaced:<span class=\"literal\">true</span>&#125;))</span><br><span class=\"line\">    .pipe(gulp.dest(<span class=\"string\">'dist/assets/img'</span>))</span><br><span class=\"line\">    .pipe(notify(&#123; message:<span class=\"string\">'Images task complete'</span>&#125;));</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>这个任务使用<code>imagemin</code>插件把所有在<code>src/images/</code>目录以及其子目录下的所有图片(文件)进行压缩,我们可以进一步优化，利用缓存保存已压缩过的图片，使用之前装过的<code>gulp-cache</code>插件，不过要修改一下上面的代码</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">.pipe(imagemin(&#123; optimizationLevel: <span class=\"number\">3</span>, progressive: <span class=\"literal\">true</span>, interlaced: <span class=\"literal\">true</span> &#125;))</span><br></pre></td></tr></table></figure>\n<p>改为<br><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">.pipe(cache(imagemin(&#123; optimizationLevel: <span class=\"number\">5</span>, progressive: <span class=\"literal\">true</span>, interlaced: <span class=\"literal\">true</span> &#125;)))</span><br></pre></td></tr></table></figure></p>\n<p>这样，只有新建或者被修改过的图片才会被压缩</p>\n<h3 id=\"清除文件\"><a href=\"#清除文件\" class=\"headerlink\" title=\"清除文件\"></a>清除文件</h3><p>  在任务执行之前，最好先清除之前生成的文件：</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">gulp.task(<span class=\"string\">'clean'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">cb</span>)</span>&#123;</span><br><span class=\"line\">  del([<span class=\"string\">'dist/assets/css'</span>,<span class=\"string\">'dist/assets/js'</span>,<span class=\"string\">'dist/assets/img'</span>],cb);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>  这里没必要使用Gulp插件，可以使用NPM提供的插件，我们用一个回调函数(<code>cb</code>)确保在退出前完成任务</p>\n<h3 id=\"设置默认任务-default\"><a href=\"#设置默认任务-default\" class=\"headerlink\" title=\"设置默认任务(default)\"></a>设置默认任务(default)</h3><p>我们在命令行下输入<code>gulp</code>执行的就是默认任务,现在我们为默认任务指定执行上面写好的三个任务:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">gulp.task(<span class=\"string\">'default'</span>,[<span class=\"string\">'clean'</span>],<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  gulp.start(<span class=\"string\">'styles'</span>,<span class=\"string\">'scripts'</span>,<span class=\"string\">'images'</span>);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>在这个例子里，clean任务执行完成了才会去运行其他的任务，在<code>gulp.start()</code>里的任务执行的顺序是不确定的，所以将要在他们之前执行的任务写在数组里面。</p>\n","excerpt":"","more":"<h1 id=\"Getting-Start\"><a href=\"#Getting-Start\" class=\"headerlink\" title=\"Getting Start\"></a>Getting Start</h1><h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>  Gulp是基于Node.js的前端构建工具，通过Gulp的插件可以实现前端代码的编译(sass/less)、压缩、测试；图片的压缩；浏览器自动刷新，还有很多强大的功能可以在<a href=\"http://gulpjs.com/plugins/\">这里</a>查找，Gulp比起Grunt不仅简单，而且更容易阅读,我们可以做一个对比:</p>\n<p>  Grunt:<br><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">sass: &#123;</span><br><span class=\"line\">  dist: &#123;</span><br><span class=\"line\">    style: <span class=\"string\">'expanded'</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  files: &#123;</span><br><span class=\"line\">    <span class=\"string\">'dist/assets/css/main.css'</span>:<span class=\"string\">'src/styles/main.scss'</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">autoprefixer: &#123;</span><br><span class=\"line\">  dist: &#123;</span><br><span class=\"line\">    options: &#123;</span><br><span class=\"line\">      browsers: [</span><br><span class=\"line\">        <span class=\"string\">'last 2 version'</span>,<span class=\"string\">'safari 5'</span>,<span class=\"string\">'ie8'</span>,<span class=\"string\">'ie9'</span></span><br><span class=\"line\">      ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">grunt.registerTask(<span class=\"string\">'styles'</span>,[<span class=\"string\">'sass'</span>,<span class=\"string\">'autoprefixer'</span>]);</span><br></pre></td></tr></table></figure></p>\n<p>  在Grunt里面，每个插件使用的方式相对独立，正如上面的代码通过sass插件将<code>main.sass</code>文件编译成了<code>main.css</code>文件，接着autoprefixer插件再对编译好的<code>main.css</code>文件进行修改，最后覆盖<code>main.css</code>。那么覆盖文件就是多余的了，有没有办法走到sass和autoprefixer一并处理完在生成<code>main.css</code>？看看Gulp是如何做到的:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">gulp.task(<span class=\"string\">'sass'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> gulp.src(<span class=\"string\">'src/style/main.sass'</span>)</span><br><span class=\"line\">    .pipe(sass(&#123;style:<span class=\"string\">'compressed'</span>&#125;))</span><br><span class=\"line\">    .pipe(autoprefixer(<span class=\"string\">'last 2 version'</span>,<span class=\"string\">'safari 5'</span> ...))</span><br><span class=\"line\">    .pipe(gulp.dest(<span class=\"string\">'dist/assets/css'</span>))</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>使用Gulp我们只需要放一个路径，通过管道方式使用插件，最后生成文件，是不是有种JQuery的感觉。这种方式不仅提高效率而且一眼就认清输入和输出文件</p>\n<h2 id=\"Getting-Started\"><a href=\"#Getting-Started\" class=\"headerlink\" title=\"Getting Started\"></a>Getting Started</h2><h4 id=\"Install-gulp-to-your-project-devDependencies\"><a href=\"#Install-gulp-to-your-project-devDependencies\" class=\"headerlink\" title=\"Install gulp to your project devDependencies:\"></a>Install gulp to your project devDependencies:</h4><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$npm install gulp --save-dev</span><br></pre></td></tr></table></figure>\n<h4 id=\"Create-gulpfile-js-at-the-root-of-your-project\"><a href=\"#Create-gulpfile-js-at-the-root-of-your-project\" class=\"headerlink\" title=\"Create gulpfile.js at the root of your project:\"></a>Create <code>gulpfile.js</code> at the root of your project:</h4><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> gulp = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">gulp.task(<span class=\"string\">'default'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//place code for your default task here</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h4 id=\"Run-gulp\"><a href=\"#Run-gulp\" class=\"headerlink\" title=\"Run gulp\"></a>Run gulp</h4><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$gulp</span><br></pre></td></tr></table></figure>\n<h2 id=\"安装Gulp插件\"><a href=\"#安装Gulp插件\" class=\"headerlink\" title=\"安装Gulp插件\"></a>安装Gulp插件</h2><ul>\n<li>sass的编译(<a href=\"https://github.com/sindresorhus/gulp-ruby-sass\">gulp-ruby-sass</a>)</li>\n<li>自动添加css前缀(<a href=\"https://github.com/Metrime/gulp-autoprefixer\">gulp-autoprefixer</a>)</li>\n<li>压缩css(<a href=\"https://github.com/jonathanepollack/gulp-minify-css\">gulp-minify-css</a>)</li>\n<li>JS代码校验(<a href=\"https://github.com/spalger/gulp-jshint\">gulp-jshint</a>)</li>\n<li>合并JS代码(<a href=\"https://github.com/contra/gulp-concat\">gulp-gulp-concat</a>)</li>\n<li>压缩JS代码(<a href=\"https://github.com/terinjokes/gulp-uglify\">gulp-uglify</a>)</li>\n<li>压缩图片(<a href=\"https://github.com/sindresorhus/gulp-imagemin\">gulp-imagemin</a>)</li>\n<li>自动刷新页面(<a href=\"https://github.com/vohof/gulp-livereload\">gulp-livereload</a>)</li>\n<li>图片缓存,只有图片替换了才压缩(<a href=\"https://github.com/jgable/gulp-cache\">gulp-cache</a>)</li>\n<li>更新提醒(<a href=\"https://github.com/mikaelbr/gulp-notify\">gulp-notify</a>)</li>\n</ul>\n<p>安装这些插件需要运行:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ npm install  gulp-ruby-sass gulp-autoprefixer gulp-minify-css gulp-jshint gulp-concat gulp-uglify gulp-imagemin gulp-notify gulp-rename gulp-livereload gulp-cache del --save-dev</span><br></pre></td></tr></table></figure>\n<h2 id=\"加载插件\"><a href=\"#加载插件\" class=\"headerlink\" title=\"加载插件\"></a>加载插件</h2><p>在<code>gulpfile.js</code> 中加载插件:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> gulp = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp'</span>),</span><br><span class=\"line\">    sass = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-ruby-sass'</span>),</span><br><span class=\"line\">    autoprefixer = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-autoprefixer'</span>),</span><br><span class=\"line\">    minifycss = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-minify-css'</span>),</span><br><span class=\"line\">    jshint = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-jshint'</span>),</span><br><span class=\"line\">    uglify = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-uglify'</span>),</span><br><span class=\"line\">    imagemin = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-imagemin'</span>),</span><br><span class=\"line\">    rename = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-rename'</span>),</span><br><span class=\"line\">    concat = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-concat'</span>),</span><br><span class=\"line\">    notify = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-notify'</span>),</span><br><span class=\"line\">    cache = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-cache'</span>),</span><br><span class=\"line\">    livereload = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-livereload'</span>),</span><br><span class=\"line\">    del = <span class=\"built_in\">require</span>(<span class=\"string\">'del'</span>);</span><br></pre></td></tr></table></figure>\n<h2 id=\"建立任务\"><a href=\"#建立任务\" class=\"headerlink\" title=\"建立任务\"></a>建立任务</h2><h3 id=\"编译Sass、自动化添加CSS前缀和压缩\"><a href=\"#编译Sass、自动化添加CSS前缀和压缩\" class=\"headerlink\" title=\"编译Sass、自动化添加CSS前缀和压缩\"></a>编译Sass、自动化添加CSS前缀和压缩</h3><p>首先我们编译Sass，添加前缀，保存到我们制定的目录下面，还没结束，我们还要压缩，给文件添加<code>.min</code>后缀后再输出压缩文件到制定目录，最后提醒任务完成:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">gulp.task(<span class=\"string\">'style'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> gulp.src(<span class=\"string\">'src/styles/main.scss'</span>)</span><br><span class=\"line\">    .pipe(sass(&#123; style:<span class=\"string\">'expanded'</span> &#125;))</span><br><span class=\"line\">    .pipe(autoprefixer(<span class=\"string\">'last 2 version'</span>, <span class=\"string\">'safari 5'</span>, <span class=\"string\">'ie 8'</span>, <span class=\"string\">'ie 9'</span>, <span class=\"string\">'opera 12.1'</span>, <span class=\"string\">'ios 6'</span>, <span class=\"string\">'android 4'</span>))</span><br><span class=\"line\">    .pipe(gulp.dest(<span class=\"string\">'dist/assets/css'</span>))</span><br><span class=\"line\">    .pipe(rename(&#123;suffix:<span class=\"string\">'.min'</span>&#125;))</span><br><span class=\"line\">    .pipe(minifycss())</span><br><span class=\"line\">    .pipe(gulp.dest(<span class=\"string\">'dist/assets/css'</span>))</span><br><span class=\"line\">    .pipe(notify(&#123;message:<span class=\"string\">'Style task completed'</span>&#125;));</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>  <code>gulp.task</code>这个API主要用来创建任务，在命令行下可以输入 <code>$gulp styles</code> 来执行上面的任务</p>\n<p>  <code>gulp.src</code>这个API设置需要处理的文件的路径，可以多个文件以数组方式<code>[main.scss,vender.scss]</code>传入，也可以使用正则<code>/**/*.scss</code>.</p>\n<p>  <code>.pipe</code>这个API将根据需要处理的文件导向Sass插件，哪些插件的用法可以在Github上找到</p>\n<p>  <code>gulp.dest()</code>API设置生成文件的路径，一个任务可以有多个生成路径，一个可以输出未压缩的版本，一个可以输出压缩后的版本。</p>\n<h3 id=\"JS-代码校验、合并和压缩\"><a href=\"#JS-代码校验、合并和压缩\" class=\"headerlink\" title=\"JS 代码校验、合并和压缩\"></a>JS 代码校验、合并和压缩</h3><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">gulp.task(<span class=\"string\">'scripts'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> gulp.src(<span class=\"string\">'src/scripts/**/*.js'</span>)</span><br><span class=\"line\">    .pipe(jshint(<span class=\"string\">'.jshintrc'</span>))</span><br><span class=\"line\">    .pipe(jshint.reporter(<span class=\"string\">'default'</span>))</span><br><span class=\"line\">    .pipe(concat(<span class=\"string\">'main.js'</span>))</span><br><span class=\"line\">    .pipe(gulp.dest(<span class=\"string\">'dist/assets/js'</span>))</span><br><span class=\"line\">    .pipe(rename(&#123;sufffix:<span class=\"string\">'.min'</span>&#125;))</span><br><span class=\"line\">    .pipe(uglify())</span><br><span class=\"line\">    .pipe(gulp.dest(<span class=\"string\">'dist/assets/js'</span>))</span><br><span class=\"line\">    .pipe(notify(&#123; message:<span class=\"string\">'Scripts task complete'</span> &#125;));</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>需要提醒的是，我们要设置JSHint 的reporter方式，上面使用<code>default</code>默认方式，了解更多请点击<a href=\"http://jshint.com/docs/reporters/\">这里</a></p>\n<h3 id=\"压缩图片\"><a href=\"#压缩图片\" class=\"headerlink\" title=\"压缩图片\"></a>压缩图片</h3><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">gulp.task(<span class=\"string\">'image'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> gulp.src(<span class=\"string\">'src/images/**/*'</span>)</span><br><span class=\"line\">    .pipe(imagemin(&#123;optimizationLevel:<span class=\"number\">3</span>,progressive:<span class=\"literal\">true</span>,interlaced:<span class=\"literal\">true</span>&#125;))</span><br><span class=\"line\">    .pipe(gulp.dest(<span class=\"string\">'dist/assets/img'</span>))</span><br><span class=\"line\">    .pipe(notify(&#123; message:<span class=\"string\">'Images task complete'</span>&#125;));</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>这个任务使用<code>imagemin</code>插件把所有在<code>src/images/</code>目录以及其子目录下的所有图片(文件)进行压缩,我们可以进一步优化，利用缓存保存已压缩过的图片，使用之前装过的<code>gulp-cache</code>插件，不过要修改一下上面的代码</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">.pipe(imagemin(&#123; optimizationLevel: <span class=\"number\">3</span>, progressive: <span class=\"literal\">true</span>, interlaced: <span class=\"literal\">true</span> &#125;))</span><br></pre></td></tr></table></figure>\n<p>改为<br><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">.pipe(cache(imagemin(&#123; optimizationLevel: <span class=\"number\">5</span>, progressive: <span class=\"literal\">true</span>, interlaced: <span class=\"literal\">true</span> &#125;)))</span><br></pre></td></tr></table></figure></p>\n<p>这样，只有新建或者被修改过的图片才会被压缩</p>\n<h3 id=\"清除文件\"><a href=\"#清除文件\" class=\"headerlink\" title=\"清除文件\"></a>清除文件</h3><p>  在任务执行之前，最好先清除之前生成的文件：</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">gulp.task(<span class=\"string\">'clean'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">cb</span>)</span>&#123;</span><br><span class=\"line\">  del([<span class=\"string\">'dist/assets/css'</span>,<span class=\"string\">'dist/assets/js'</span>,<span class=\"string\">'dist/assets/img'</span>],cb);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>  这里没必要使用Gulp插件，可以使用NPM提供的插件，我们用一个回调函数(<code>cb</code>)确保在退出前完成任务</p>\n<h3 id=\"设置默认任务-default\"><a href=\"#设置默认任务-default\" class=\"headerlink\" title=\"设置默认任务(default)\"></a>设置默认任务(default)</h3><p>我们在命令行下输入<code>gulp</code>执行的就是默认任务,现在我们为默认任务指定执行上面写好的三个任务:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">gulp.task(<span class=\"string\">'default'</span>,[<span class=\"string\">'clean'</span>],<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  gulp.start(<span class=\"string\">'styles'</span>,<span class=\"string\">'scripts'</span>,<span class=\"string\">'images'</span>);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>在这个例子里，clean任务执行完成了才会去运行其他的任务，在<code>gulp.start()</code>里的任务执行的顺序是不确定的，所以将要在他们之前执行的任务写在数组里面。</p>\n"},{"layout":"keynote","title":"JqueryUI-Draggable","subtitle":"Keynote: JqueryUI-Draggable","iframe":null,"date":"2016-06-16T16:00:00.000Z","author":"","header-img":"post-bg-js-version.jpg","_content":"# JQuery UI 实例 - 拖动 (Draggable)\n\n## 默认功能\n\n在任意的DOM元素上启用draggable功能，通过鼠标点击并在视区中拖动来移动draggable对象。\n\n```html\n  ...\n  <script>\n    $(function(){\n      $('#draggable').draggable();\n    });\n  </script>\n\n  <div id=\"draggable\" class=\"ui-widget-content\">\n    <p>请拖动我!</p>\n  </div>\n\n```\n\n## 自动滚动\n\n当draggable移动到视区之外时自动滚动文档，设置scroll选项为true来启动自动滚动，当滚动触发时进行微调，滚动速度是通过scrollSensitivity和scrollSpeed选项来设置的。\n\n· main.js\n```javascript\n  $('#draggable').draggable({scroll:true});\n  $('#draggable2').draggable({scroll:true,scrollSensitivity:100});\n  $('#draggable3').draggable({scroll:true,scrollSpeed:100});\n\n```\n\n· index.html\n\n```html\n<div id=\"draggable\" class=\"ui-widget-content\">\n  <p>Scroll 设置为 true，默认设置</p>\n</div>\n\n<div id=\"draggable2\" class=\"ui-widget-content\">\n  <p>scrollSensitivity 设置为 100</p>\n</div>\n\n<div id=\"draggable3\" class=\"ui-widget-content\">\n  <p>scrollSpeed 设置为 100</p>\n</div>\n\n<div style=\"height: 5000px; width: 1px;\"></div>\n```\n\n## 约束运动\n\n  通过定义draggable 区域的边界约束每个draggable的运动，设置`axis`选项来限制draggable的路径为`x轴` 或者`y轴`，或者使用`containment`选项来指定一个父级的DOM或者一个JQuery选择器，比如'document'.\n\n· main.js\n```javascript\n  $('#draggable').draggable({axis:'y'});\n  $('#draggable2').draggable({axis:'x'});\n\n  $('#draggable3').draggable({containment:'#containment-wrapper',scroll:false});\n  $('#draggable5').draggable({containment:'parent'});\n```\n\n· index.html\n\n```html\n<h3>沿着轴约束运动：</h3>\n\n<div id=\"draggable\" class=\"draggable ui-widget-content\">\n  <p>只能垂直拖拽</p>\n</div>\n\n<div id=\"draggable2\" class=\"draggable ui-widget-content\">\n  <p>只能水平拖拽</p>\n</div>\n\n<h3>或者在另一个 DOM 元素中约束运动：</h3>\n<div id=\"containment-wrapper\">\n  <div id=\"draggable3\" class=\"draggable ui-widget-content\">\n    <p>我被约束在盒子里</p>\n  </div>\n\n  <div class=\"draggable ui-widget-content\">\n    <p id=\"draggable5\" class=\"ui-widget-header\">我被约束在父元素内</p>\n  </div>\n</div>\n\n```\n## 光标样式 (cursorAt)\n\n  当拖拽对象时定位光标，默认情况下，光标是出现在被拖拽对象中间，使用cursorAt选项来指定相对于draggable的另一个位置（指定一个相对于top、right、bottom、left的像素值）。通过提供一个带有有效的css光标值的cursor选项来自定义光标外观，有效的css光标值包括：default、move、pointer、crosshair等\n\n· main.js\n```javascript\n$(function() {\n  $( \"#draggable\" ).draggable({ cursor: \"move\", cursorAt: { top: 56, left: 56 } });\n  $( \"#draggable2\" ).draggable({ cursor: \"crosshair\", cursorAt: { top: -5, left: -5 } });\n  $( \"#draggable3\" ).draggable({ cursorAt: { bottom: 0 } });\n});\n```\n· index.html\n```html\n\n<div id=\"draggable\" class=\"ui-widget-content\">\n  <p>只有把我拖拽了 20 像素后，拖拽才开始</p>\n</div>\n\n<div id=\"draggable2\" class=\"ui-widget-content\">\n  <p>不管 distance 是多少，您都必须拖拽并等待 1000ms 后拖拽才开始</p>\n</div>\n\n```\n\n## 拖动（Draggable） + 排序（Sortable）\n\nDraggable 与 Sortable 的无缝交互。\n\n· main.js\n\n```javascript\n\n$(function(){\n  $('#sortable').sortable({\n    revert : true\n  });\n  $('#draggable').draggable({\n    connectToSortable:'#sortable',\n    help:'clone',\n    revert:'invalid'\n  });\n  $('ul, li').disableSelection();\n});\n\n```\n\n· index.html\n```html\n<ul>\n  <li id=\"draggable\" class=\"ui-state-highlight\">请拖拽我</li>\n</ul>\n\n<ul id=\"sortable\">\n  <li class=\"ui-state-default\">Item 1</li>\n  <li class=\"ui-state-default\">Item 2</li>\n  <li class=\"ui-state-default\">Item 3</li>\n  <li class=\"ui-state-default\">Item 4</li>\n  <li class=\"ui-state-default\">Item 5</li>\n</ul>\n\n```\n","source":"_posts/JqueryUI-Draggable.markdown","raw":"---\nlayout:     keynote\ntitle:      \"JqueryUI-Draggable\"\nsubtitle:   \"Keynote: JqueryUI-Draggable\"\niframe:     \ndate:       2016-06-17\nauthor:     \"\"\nheader-img: \"post-bg-js-version.jpg\"\ntags:\n    - JQuery 插件\n---\n# JQuery UI 实例 - 拖动 (Draggable)\n\n## 默认功能\n\n在任意的DOM元素上启用draggable功能，通过鼠标点击并在视区中拖动来移动draggable对象。\n\n```html\n  ...\n  <script>\n    $(function(){\n      $('#draggable').draggable();\n    });\n  </script>\n\n  <div id=\"draggable\" class=\"ui-widget-content\">\n    <p>请拖动我!</p>\n  </div>\n\n```\n\n## 自动滚动\n\n当draggable移动到视区之外时自动滚动文档，设置scroll选项为true来启动自动滚动，当滚动触发时进行微调，滚动速度是通过scrollSensitivity和scrollSpeed选项来设置的。\n\n· main.js\n```javascript\n  $('#draggable').draggable({scroll:true});\n  $('#draggable2').draggable({scroll:true,scrollSensitivity:100});\n  $('#draggable3').draggable({scroll:true,scrollSpeed:100});\n\n```\n\n· index.html\n\n```html\n<div id=\"draggable\" class=\"ui-widget-content\">\n  <p>Scroll 设置为 true，默认设置</p>\n</div>\n\n<div id=\"draggable2\" class=\"ui-widget-content\">\n  <p>scrollSensitivity 设置为 100</p>\n</div>\n\n<div id=\"draggable3\" class=\"ui-widget-content\">\n  <p>scrollSpeed 设置为 100</p>\n</div>\n\n<div style=\"height: 5000px; width: 1px;\"></div>\n```\n\n## 约束运动\n\n  通过定义draggable 区域的边界约束每个draggable的运动，设置`axis`选项来限制draggable的路径为`x轴` 或者`y轴`，或者使用`containment`选项来指定一个父级的DOM或者一个JQuery选择器，比如'document'.\n\n· main.js\n```javascript\n  $('#draggable').draggable({axis:'y'});\n  $('#draggable2').draggable({axis:'x'});\n\n  $('#draggable3').draggable({containment:'#containment-wrapper',scroll:false});\n  $('#draggable5').draggable({containment:'parent'});\n```\n\n· index.html\n\n```html\n<h3>沿着轴约束运动：</h3>\n\n<div id=\"draggable\" class=\"draggable ui-widget-content\">\n  <p>只能垂直拖拽</p>\n</div>\n\n<div id=\"draggable2\" class=\"draggable ui-widget-content\">\n  <p>只能水平拖拽</p>\n</div>\n\n<h3>或者在另一个 DOM 元素中约束运动：</h3>\n<div id=\"containment-wrapper\">\n  <div id=\"draggable3\" class=\"draggable ui-widget-content\">\n    <p>我被约束在盒子里</p>\n  </div>\n\n  <div class=\"draggable ui-widget-content\">\n    <p id=\"draggable5\" class=\"ui-widget-header\">我被约束在父元素内</p>\n  </div>\n</div>\n\n```\n## 光标样式 (cursorAt)\n\n  当拖拽对象时定位光标，默认情况下，光标是出现在被拖拽对象中间，使用cursorAt选项来指定相对于draggable的另一个位置（指定一个相对于top、right、bottom、left的像素值）。通过提供一个带有有效的css光标值的cursor选项来自定义光标外观，有效的css光标值包括：default、move、pointer、crosshair等\n\n· main.js\n```javascript\n$(function() {\n  $( \"#draggable\" ).draggable({ cursor: \"move\", cursorAt: { top: 56, left: 56 } });\n  $( \"#draggable2\" ).draggable({ cursor: \"crosshair\", cursorAt: { top: -5, left: -5 } });\n  $( \"#draggable3\" ).draggable({ cursorAt: { bottom: 0 } });\n});\n```\n· index.html\n```html\n\n<div id=\"draggable\" class=\"ui-widget-content\">\n  <p>只有把我拖拽了 20 像素后，拖拽才开始</p>\n</div>\n\n<div id=\"draggable2\" class=\"ui-widget-content\">\n  <p>不管 distance 是多少，您都必须拖拽并等待 1000ms 后拖拽才开始</p>\n</div>\n\n```\n\n## 拖动（Draggable） + 排序（Sortable）\n\nDraggable 与 Sortable 的无缝交互。\n\n· main.js\n\n```javascript\n\n$(function(){\n  $('#sortable').sortable({\n    revert : true\n  });\n  $('#draggable').draggable({\n    connectToSortable:'#sortable',\n    help:'clone',\n    revert:'invalid'\n  });\n  $('ul, li').disableSelection();\n});\n\n```\n\n· index.html\n```html\n<ul>\n  <li id=\"draggable\" class=\"ui-state-highlight\">请拖拽我</li>\n</ul>\n\n<ul id=\"sortable\">\n  <li class=\"ui-state-default\">Item 1</li>\n  <li class=\"ui-state-default\">Item 2</li>\n  <li class=\"ui-state-default\">Item 3</li>\n  <li class=\"ui-state-default\">Item 4</li>\n  <li class=\"ui-state-default\">Item 5</li>\n</ul>\n\n```\n","slug":"JqueryUI-Draggable","published":1,"updated":"2016-06-20T01:50:08.905Z","comments":1,"photos":[],"link":"","_id":"cipnd97130007yww7pvyxnntu","content":"<h1 id=\"JQuery-UI-实例-拖动-Draggable\"><a href=\"#JQuery-UI-实例-拖动-Draggable\" class=\"headerlink\" title=\"JQuery UI 实例 - 拖动 (Draggable)\"></a>JQuery UI 实例 - 拖动 (Draggable)</h1><h2 id=\"默认功能\"><a href=\"#默认功能\" class=\"headerlink\" title=\"默认功能\"></a>默认功能</h2><p>在任意的DOM元素上启用draggable功能，通过鼠标点击并在视区中拖动来移动draggable对象。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span><br><span class=\"line\">  $(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    $(<span class=\"string\">'#draggable'</span>).draggable();</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"draggable\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ui-widget-content\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>请拖动我!<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"自动滚动\"><a href=\"#自动滚动\" class=\"headerlink\" title=\"自动滚动\"></a>自动滚动</h2><p>当draggable移动到视区之外时自动滚动文档，设置scroll选项为true来启动自动滚动，当滚动触发时进行微调，滚动速度是通过scrollSensitivity和scrollSpeed选项来设置的。</p>\n<p>· main.js<br><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">'#draggable'</span>).draggable(&#123;scroll:<span class=\"literal\">true</span>&#125;);</span><br><span class=\"line\">$(<span class=\"string\">'#draggable2'</span>).draggable(&#123;scroll:<span class=\"literal\">true</span>,scrollSensitivity:<span class=\"number\">100</span>&#125;);</span><br><span class=\"line\">$(<span class=\"string\">'#draggable3'</span>).draggable(&#123;scroll:<span class=\"literal\">true</span>,scrollSpeed:<span class=\"number\">100</span>&#125;);</span><br></pre></td></tr></table></figure></p>\n<p>· index.html</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"draggable\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ui-widget-content\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Scroll 设置为 true，默认设置<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"draggable2\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ui-widget-content\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>scrollSensitivity 设置为 100<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"draggable3\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ui-widget-content\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>scrollSpeed 设置为 100<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">style</span>=<span class=\"string\">\"height: 5000px; width: 1px;\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"约束运动\"><a href=\"#约束运动\" class=\"headerlink\" title=\"约束运动\"></a>约束运动</h2><p>  通过定义draggable 区域的边界约束每个draggable的运动，设置<code>axis</code>选项来限制draggable的路径为<code>x轴</code> 或者<code>y轴</code>，或者使用<code>containment</code>选项来指定一个父级的DOM或者一个JQuery选择器，比如’document’.</p>\n<p>· main.js<br><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">'#draggable'</span>).draggable(&#123;axis:<span class=\"string\">'y'</span>&#125;);</span><br><span class=\"line\">$(<span class=\"string\">'#draggable2'</span>).draggable(&#123;axis:<span class=\"string\">'x'</span>&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">$(<span class=\"string\">'#draggable3'</span>).draggable(&#123;containment:<span class=\"string\">'#containment-wrapper'</span>,scroll:<span class=\"literal\">false</span>&#125;);</span><br><span class=\"line\">$(<span class=\"string\">'#draggable5'</span>).draggable(&#123;containment:<span class=\"string\">'parent'</span>&#125;);</span><br></pre></td></tr></table></figure></p>\n<p>· index.html</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span>沿着轴约束运动：<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"draggable\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"draggable ui-widget-content\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>只能垂直拖拽<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"draggable2\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"draggable ui-widget-content\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>只能水平拖拽<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span>或者在另一个 DOM 元素中约束运动：<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"containment-wrapper\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"draggable3\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"draggable ui-widget-content\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>我被约束在盒子里<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"draggable ui-widget-content\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">id</span>=<span class=\"string\">\"draggable5\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ui-widget-header\"</span>&gt;</span>我被约束在父元素内<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"光标样式-cursorAt\"><a href=\"#光标样式-cursorAt\" class=\"headerlink\" title=\"光标样式 (cursorAt)\"></a>光标样式 (cursorAt)</h2><p>  当拖拽对象时定位光标，默认情况下，光标是出现在被拖拽对象中间，使用cursorAt选项来指定相对于draggable的另一个位置（指定一个相对于top、right、bottom、left的像素值）。通过提供一个带有有效的css光标值的cursor选项来自定义光标外观，有效的css光标值包括：default、move、pointer、crosshair等</p>\n<p>· main.js<br><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">$(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  $( <span class=\"string\">\"#draggable\"</span> ).draggable(&#123; cursor: <span class=\"string\">\"move\"</span>, cursorAt: &#123; top: <span class=\"number\">56</span>, left: <span class=\"number\">56</span> &#125; &#125;);</span><br><span class=\"line\">  $( <span class=\"string\">\"#draggable2\"</span> ).draggable(&#123; cursor: <span class=\"string\">\"crosshair\"</span>, cursorAt: &#123; top: <span class=\"number\">-5</span>, left: <span class=\"number\">-5</span> &#125; &#125;);</span><br><span class=\"line\">  $( <span class=\"string\">\"#draggable3\"</span> ).draggable(&#123; cursorAt: &#123; bottom: <span class=\"number\">0</span> &#125; &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<p>· index.html<br><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"draggable\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ui-widget-content\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>只有把我拖拽了 20 像素后，拖拽才开始<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"draggable2\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ui-widget-content\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>不管 distance 是多少，您都必须拖拽并等待 1000ms 后拖拽才开始<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"拖动（Draggable）-排序（Sortable）\"><a href=\"#拖动（Draggable）-排序（Sortable）\" class=\"headerlink\" title=\"拖动（Draggable） + 排序（Sortable）\"></a>拖动（Draggable） + 排序（Sortable）</h2><p>Draggable 与 Sortable 的无缝交互。</p>\n<p>· main.js</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">$(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  $(<span class=\"string\">'#sortable'</span>).sortable(&#123;</span><br><span class=\"line\">    revert : <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  $(<span class=\"string\">'#draggable'</span>).draggable(&#123;</span><br><span class=\"line\">    connectToSortable:<span class=\"string\">'#sortable'</span>,</span><br><span class=\"line\">    help:<span class=\"string\">'clone'</span>,</span><br><span class=\"line\">    revert:<span class=\"string\">'invalid'</span></span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  $(<span class=\"string\">'ul, li'</span>).disableSelection();</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>· index.html<br><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">id</span>=<span class=\"string\">\"draggable\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ui-state-highlight\"</span>&gt;</span>请拖拽我<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">id</span>=<span class=\"string\">\"sortable\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ui-state-default\"</span>&gt;</span>Item 1<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ui-state-default\"</span>&gt;</span>Item 2<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ui-state-default\"</span>&gt;</span>Item 3<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ui-state-default\"</span>&gt;</span>Item 4<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ui-state-default\"</span>&gt;</span>Item 5<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n","excerpt":"","more":"<h1 id=\"JQuery-UI-实例-拖动-Draggable\"><a href=\"#JQuery-UI-实例-拖动-Draggable\" class=\"headerlink\" title=\"JQuery UI 实例 - 拖动 (Draggable)\"></a>JQuery UI 实例 - 拖动 (Draggable)</h1><h2 id=\"默认功能\"><a href=\"#默认功能\" class=\"headerlink\" title=\"默认功能\"></a>默认功能</h2><p>在任意的DOM元素上启用draggable功能，通过鼠标点击并在视区中拖动来移动draggable对象。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span><br><span class=\"line\">  $(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    $(<span class=\"string\">'#draggable'</span>).draggable();</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"draggable\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ui-widget-content\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>请拖动我!<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"自动滚动\"><a href=\"#自动滚动\" class=\"headerlink\" title=\"自动滚动\"></a>自动滚动</h2><p>当draggable移动到视区之外时自动滚动文档，设置scroll选项为true来启动自动滚动，当滚动触发时进行微调，滚动速度是通过scrollSensitivity和scrollSpeed选项来设置的。</p>\n<p>· main.js<br><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">'#draggable'</span>).draggable(&#123;scroll:<span class=\"literal\">true</span>&#125;);</span><br><span class=\"line\">$(<span class=\"string\">'#draggable2'</span>).draggable(&#123;scroll:<span class=\"literal\">true</span>,scrollSensitivity:<span class=\"number\">100</span>&#125;);</span><br><span class=\"line\">$(<span class=\"string\">'#draggable3'</span>).draggable(&#123;scroll:<span class=\"literal\">true</span>,scrollSpeed:<span class=\"number\">100</span>&#125;);</span><br></pre></td></tr></table></figure></p>\n<p>· index.html</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"draggable\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ui-widget-content\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Scroll 设置为 true，默认设置<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"draggable2\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ui-widget-content\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>scrollSensitivity 设置为 100<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"draggable3\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ui-widget-content\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>scrollSpeed 设置为 100<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">style</span>=<span class=\"string\">\"height: 5000px; width: 1px;\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"约束运动\"><a href=\"#约束运动\" class=\"headerlink\" title=\"约束运动\"></a>约束运动</h2><p>  通过定义draggable 区域的边界约束每个draggable的运动，设置<code>axis</code>选项来限制draggable的路径为<code>x轴</code> 或者<code>y轴</code>，或者使用<code>containment</code>选项来指定一个父级的DOM或者一个JQuery选择器，比如’document’.</p>\n<p>· main.js<br><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">'#draggable'</span>).draggable(&#123;axis:<span class=\"string\">'y'</span>&#125;);</span><br><span class=\"line\">$(<span class=\"string\">'#draggable2'</span>).draggable(&#123;axis:<span class=\"string\">'x'</span>&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">$(<span class=\"string\">'#draggable3'</span>).draggable(&#123;containment:<span class=\"string\">'#containment-wrapper'</span>,scroll:<span class=\"literal\">false</span>&#125;);</span><br><span class=\"line\">$(<span class=\"string\">'#draggable5'</span>).draggable(&#123;containment:<span class=\"string\">'parent'</span>&#125;);</span><br></pre></td></tr></table></figure></p>\n<p>· index.html</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span>沿着轴约束运动：<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"draggable\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"draggable ui-widget-content\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>只能垂直拖拽<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"draggable2\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"draggable ui-widget-content\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>只能水平拖拽<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span>或者在另一个 DOM 元素中约束运动：<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"containment-wrapper\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"draggable3\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"draggable ui-widget-content\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>我被约束在盒子里<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"draggable ui-widget-content\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">id</span>=<span class=\"string\">\"draggable5\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ui-widget-header\"</span>&gt;</span>我被约束在父元素内<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"光标样式-cursorAt\"><a href=\"#光标样式-cursorAt\" class=\"headerlink\" title=\"光标样式 (cursorAt)\"></a>光标样式 (cursorAt)</h2><p>  当拖拽对象时定位光标，默认情况下，光标是出现在被拖拽对象中间，使用cursorAt选项来指定相对于draggable的另一个位置（指定一个相对于top、right、bottom、left的像素值）。通过提供一个带有有效的css光标值的cursor选项来自定义光标外观，有效的css光标值包括：default、move、pointer、crosshair等</p>\n<p>· main.js<br><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">$(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  $( <span class=\"string\">\"#draggable\"</span> ).draggable(&#123; cursor: <span class=\"string\">\"move\"</span>, cursorAt: &#123; top: <span class=\"number\">56</span>, left: <span class=\"number\">56</span> &#125; &#125;);</span><br><span class=\"line\">  $( <span class=\"string\">\"#draggable2\"</span> ).draggable(&#123; cursor: <span class=\"string\">\"crosshair\"</span>, cursorAt: &#123; top: <span class=\"number\">-5</span>, left: <span class=\"number\">-5</span> &#125; &#125;);</span><br><span class=\"line\">  $( <span class=\"string\">\"#draggable3\"</span> ).draggable(&#123; cursorAt: &#123; bottom: <span class=\"number\">0</span> &#125; &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<p>· index.html<br><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"draggable\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ui-widget-content\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>只有把我拖拽了 20 像素后，拖拽才开始<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"draggable2\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ui-widget-content\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>不管 distance 是多少，您都必须拖拽并等待 1000ms 后拖拽才开始<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"拖动（Draggable）-排序（Sortable）\"><a href=\"#拖动（Draggable）-排序（Sortable）\" class=\"headerlink\" title=\"拖动（Draggable） + 排序（Sortable）\"></a>拖动（Draggable） + 排序（Sortable）</h2><p>Draggable 与 Sortable 的无缝交互。</p>\n<p>· main.js</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">$(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  $(<span class=\"string\">'#sortable'</span>).sortable(&#123;</span><br><span class=\"line\">    revert : <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  $(<span class=\"string\">'#draggable'</span>).draggable(&#123;</span><br><span class=\"line\">    connectToSortable:<span class=\"string\">'#sortable'</span>,</span><br><span class=\"line\">    help:<span class=\"string\">'clone'</span>,</span><br><span class=\"line\">    revert:<span class=\"string\">'invalid'</span></span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  $(<span class=\"string\">'ul, li'</span>).disableSelection();</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>· index.html<br><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">id</span>=<span class=\"string\">\"draggable\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ui-state-highlight\"</span>&gt;</span>请拖拽我<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">id</span>=<span class=\"string\">\"sortable\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ui-state-default\"</span>&gt;</span>Item 1<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ui-state-default\"</span>&gt;</span>Item 2<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ui-state-default\"</span>&gt;</span>Item 3<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ui-state-default\"</span>&gt;</span>Item 4<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ui-state-default\"</span>&gt;</span>Item 5<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n"},{"layout":"keynote","title":"How use Markdown to write GitHub README","subtitle":"Keynote: How use Markdown to write GitHub README","iframe":null,"date":"2016-06-16T16:00:00.000Z","author":"","header-img":"post-bg-js-version.jpg","_content":"#Github Readme 排版解析\n\n>README 文件的后缀名是md，md是markdown的缩写。markdown是一种编辑博客的语言，\n>Github在语法标准markdown上做了修改，称之为Github Flavored Markdown GFM 不是 GFW=.=\n\n##一、关于标题\n\n大标题  \n====  \n中标题\n-----\n\n在文本下面加上等于号=，那么上方的文本就变成大标题。等于号的个数无限制，但一定要大于0。\n比大标题低一级的是中标题，也就是显示出来比大标题小一点。在文本下面加上------ 那么上方的文本就变成中标题，同样的下划线的个数无限制。\n除此之外，你也会发现大，中标题下面都有一条横线，没这就是= 和-的显示结果。如果你只输入=，那么他就会显示一条横线。\n\n除此之外，标题还有等级表示法，分为六级，显示的文本大小一次减少，不同等级之间以井号#的个数来标识\n```mark\n#一级标题\n##二级标题\n###三级标题\n####四级标题\n#####五级标题\n######六级标题\n```\n##显示文本\n\n###普通文本\n    直接输入文字就是普通文本，但是要注意的是换行的时候不能直接通过回车来换行，需要使用<br>(或者<br/>)。事实上，markdown支持一些html标签，当然如果完全使用html写就失去了markdown的意义\n```bash\n这是一行<br>\n普通的文本<br/>\n换行啦\\<br>\n```\n注意第三行的<br>前添加的反斜杠\\，目的就是像其他语言那样实现转译，也就是<的转译\n此外，要显示一个超链接的话，就直接输入这个链接的url就好。显示出来会自动变成可链接的形式。\n####显示空格的小Tip\n默认的文本行首行都会被忽略的，但是如果你想用空格来排一下，那就把输入法由半角改为全角就OK啦\n###单行文本\n```bash\n        使用两个Tab符来实现单行文本。\n```\n注意前面有两个Tab，在Github上单行文本显示效果如图：\n\n\n###多行文本\n多行文本和单行文本异曲同工，只要在每行行首加两个Tab即可\n\n##使部分文字高亮显示\n可以使用` ` 将需要高亮显示的文字包围起来即可\nThank `You` . Please `Call` Me `Coder`\n\n##文字超链接\n给一段文字添加超链接的格式： [要显示的文字](超链接的地址  \"悬停显示\") 比如\n```mark\n[我的博客](http://blog.csdn.net \"blog\")\n```\n##插入符号\n###圆点符\n```mark\n* 这是一个圆点符号\n* 这是另一个圆点符号\n```\n\n```mark\n* 编程语言\n    * 脚本语言\n         * Python\n```\n第二行一个Tab，第三行两个Tab。这样用来表示层级结构就更清晰了吧，看效果：\n\n        如果你觉得三级结构表达还不够清楚，我们可以试着换另一种方式\n```mark\n>数据结构\n>>树\n>>>二叉树\n>>>>平衡二叉树\n>>>>>满二叉树\n```\n显示效果：\n\n当然比这个更一般的用法是这样。常常能在书籍里面看到的效果，比如引用别人的文章。直接看效果。\n\n\n##插入图片\n###来自网络的图片\n这个方括号里的baidu并不会对图像显示造成任何改动，如果你想达到鼠标悬停显示提示信息，那么可以仿照前面介绍的文本中的方法，就是这样\n```mark\n![baidu](http://www.baidu.com/img/bdlogo.gif \"百度logo\")\n```\n在URL后面，加一个双引号包围的字符串，显示效果如图：\n\n\n###Github仓库里的图片\n有时候我们想显示一个Github仓库里面的图片，其实图片显示的格式与上面基本一致，所不同的就是括号里的url怎么写\nhttps://github.com/georgezouq/MyImages/raw/master/Logo/foryou.gif\n###给图片加上超链接\n```mark\n[![baidu]](http://baidu.com)\n[baidu]:http://www.baidu.com/img/bdlogo.git \"百度LOGO\"\n```\n插入代码片断\n\n\n\n##使用Github的Gist\nGist是以文件为单位的，不是以项目为单位的。而且与普通的GitHub上建的仓库不同，Gist是private的哦。普通的项目默认都是public的，要想弄成private貌似还要交钱的样子。既然是private那么用来写写日记，是极好的。\nGitHub网页的顶部有：\n\n点进去:\n\n这就是你可以编辑的私有文件，它不仅支持Text文本，还支持各种编程语言呢！当然也包括markdown。输入文件名：\n\n最后保存，选中 Create Secret Gist 就是私有的喽。\n","source":"_posts/How use Markdown to write GitHub README.markdown","raw":"---\nlayout:     keynote\ntitle:      \"How use Markdown to write GitHub README\"\nsubtitle:   \"Keynote: How use Markdown to write GitHub README\"\niframe:     \ndate:       2016-06-17\nauthor:     \"\"\nheader-img: \"post-bg-js-version.jpg\"\ntags:\n    - 工具使用\n---\n#Github Readme 排版解析\n\n>README 文件的后缀名是md，md是markdown的缩写。markdown是一种编辑博客的语言，\n>Github在语法标准markdown上做了修改，称之为Github Flavored Markdown GFM 不是 GFW=.=\n\n##一、关于标题\n\n大标题  \n====  \n中标题\n-----\n\n在文本下面加上等于号=，那么上方的文本就变成大标题。等于号的个数无限制，但一定要大于0。\n比大标题低一级的是中标题，也就是显示出来比大标题小一点。在文本下面加上------ 那么上方的文本就变成中标题，同样的下划线的个数无限制。\n除此之外，你也会发现大，中标题下面都有一条横线，没这就是= 和-的显示结果。如果你只输入=，那么他就会显示一条横线。\n\n除此之外，标题还有等级表示法，分为六级，显示的文本大小一次减少，不同等级之间以井号#的个数来标识\n```mark\n#一级标题\n##二级标题\n###三级标题\n####四级标题\n#####五级标题\n######六级标题\n```\n##显示文本\n\n###普通文本\n    直接输入文字就是普通文本，但是要注意的是换行的时候不能直接通过回车来换行，需要使用<br>(或者<br/>)。事实上，markdown支持一些html标签，当然如果完全使用html写就失去了markdown的意义\n```bash\n这是一行<br>\n普通的文本<br/>\n换行啦\\<br>\n```\n注意第三行的<br>前添加的反斜杠\\，目的就是像其他语言那样实现转译，也就是<的转译\n此外，要显示一个超链接的话，就直接输入这个链接的url就好。显示出来会自动变成可链接的形式。\n####显示空格的小Tip\n默认的文本行首行都会被忽略的，但是如果你想用空格来排一下，那就把输入法由半角改为全角就OK啦\n###单行文本\n```bash\n        使用两个Tab符来实现单行文本。\n```\n注意前面有两个Tab，在Github上单行文本显示效果如图：\n\n\n###多行文本\n多行文本和单行文本异曲同工，只要在每行行首加两个Tab即可\n\n##使部分文字高亮显示\n可以使用` ` 将需要高亮显示的文字包围起来即可\nThank `You` . Please `Call` Me `Coder`\n\n##文字超链接\n给一段文字添加超链接的格式： [要显示的文字](超链接的地址  \"悬停显示\") 比如\n```mark\n[我的博客](http://blog.csdn.net \"blog\")\n```\n##插入符号\n###圆点符\n```mark\n* 这是一个圆点符号\n* 这是另一个圆点符号\n```\n\n```mark\n* 编程语言\n    * 脚本语言\n         * Python\n```\n第二行一个Tab，第三行两个Tab。这样用来表示层级结构就更清晰了吧，看效果：\n\n        如果你觉得三级结构表达还不够清楚，我们可以试着换另一种方式\n```mark\n>数据结构\n>>树\n>>>二叉树\n>>>>平衡二叉树\n>>>>>满二叉树\n```\n显示效果：\n\n当然比这个更一般的用法是这样。常常能在书籍里面看到的效果，比如引用别人的文章。直接看效果。\n\n\n##插入图片\n###来自网络的图片\n这个方括号里的baidu并不会对图像显示造成任何改动，如果你想达到鼠标悬停显示提示信息，那么可以仿照前面介绍的文本中的方法，就是这样\n```mark\n![baidu](http://www.baidu.com/img/bdlogo.gif \"百度logo\")\n```\n在URL后面，加一个双引号包围的字符串，显示效果如图：\n\n\n###Github仓库里的图片\n有时候我们想显示一个Github仓库里面的图片，其实图片显示的格式与上面基本一致，所不同的就是括号里的url怎么写\nhttps://github.com/georgezouq/MyImages/raw/master/Logo/foryou.gif\n###给图片加上超链接\n```mark\n[![baidu]](http://baidu.com)\n[baidu]:http://www.baidu.com/img/bdlogo.git \"百度LOGO\"\n```\n插入代码片断\n\n\n\n##使用Github的Gist\nGist是以文件为单位的，不是以项目为单位的。而且与普通的GitHub上建的仓库不同，Gist是private的哦。普通的项目默认都是public的，要想弄成private貌似还要交钱的样子。既然是private那么用来写写日记，是极好的。\nGitHub网页的顶部有：\n\n点进去:\n\n这就是你可以编辑的私有文件，它不仅支持Text文本，还支持各种编程语言呢！当然也包括markdown。输入文件名：\n\n最后保存，选中 Create Secret Gist 就是私有的喽。\n","slug":"How use Markdown to write GitHub README","published":1,"updated":"2016-06-20T01:49:36.348Z","comments":1,"photos":[],"link":"","_id":"cipnd97170009yww7paqwc1t1","content":"<p>#Github Readme 排版解析</p>\n<blockquote>\n<p>README 文件的后缀名是md，md是markdown的缩写。markdown是一种编辑博客的语言，<br>Github在语法标准markdown上做了修改，称之为Github Flavored Markdown GFM 不是 GFW=.=</p>\n</blockquote>\n<p>##一、关于标题</p>\n<h1 id=\"大标题\"><a href=\"#大标题\" class=\"headerlink\" title=\"大标题  \"></a>大标题  </h1><h2 id=\"中标题\"><a href=\"#中标题\" class=\"headerlink\" title=\"中标题\"></a>中标题</h2><p>在文本下面加上等于号=，那么上方的文本就变成大标题。等于号的个数无限制，但一定要大于0。<br>比大标题低一级的是中标题，也就是显示出来比大标题小一点。在文本下面加上—— 那么上方的文本就变成中标题，同样的下划线的个数无限制。<br>除此之外，你也会发现大，中标题下面都有一条横线，没这就是= 和-的显示结果。如果你只输入=，那么他就会显示一条横线。</p>\n<p>除此之外，标题还有等级表示法，分为六级，显示的文本大小一次减少，不同等级之间以井号#的个数来标识<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">#一级标题</span><br><span class=\"line\">##二级标题</span><br><span class=\"line\">###三级标题</span><br><span class=\"line\">####四级标题</span><br><span class=\"line\">#####五级标题</span><br><span class=\"line\">######六级标题</span><br></pre></td></tr></table></figure></p>\n<p>##显示文本</p>\n<p>###普通文本<br>    直接输入文字就是普通文本，但是要注意的是换行的时候不能直接通过回车来换行，需要使用<br>(或者<br>)。事实上，markdown支持一些html标签，当然如果完全使用html写就失去了markdown的意义<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">这是一行&lt;br&gt;</span><br><span class=\"line\">普通的文本&lt;br/&gt;</span><br><span class=\"line\">换行啦\\&lt;br&gt;</span><br></pre></td></tr></table></figure></p>\n<p>注意第三行的<br>前添加的反斜杠\\，目的就是像其他语言那样实现转译，也就是&lt;的转译<br>此外，要显示一个超链接的话，就直接输入这个链接的url就好。显示出来会自动变成可链接的形式。</p>\n<p>####显示空格的小Tip<br>默认的文本行首行都会被忽略的，但是如果你想用空格来排一下，那就把输入法由半角改为全角就OK啦</p>\n<p>###单行文本<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">使用两个Tab符来实现单行文本。</span><br></pre></td></tr></table></figure></p>\n<p>注意前面有两个Tab，在Github上单行文本显示效果如图：</p>\n<p>###多行文本<br>多行文本和单行文本异曲同工，只要在每行行首加两个Tab即可</p>\n<p>##使部分文字高亮显示<br>可以使用<code>` 将需要高亮显示的文字包围起来即可\nThank</code>You<code>. Please</code>Call<code>Me</code>Coder`</p>\n<p>##文字超链接<br>给一段文字添加超链接的格式： <a href=\"超链接的地址\" title=\"悬停显示\">要显示的文字</a> 比如<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">[我的博客](http://blog.csdn.net &quot;blog&quot;)</span><br></pre></td></tr></table></figure></p>\n<p>##插入符号</p>\n<p>###圆点符<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">* 这是一个圆点符号</span><br><span class=\"line\">* 这是另一个圆点符号</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">* 编程语言</span><br><span class=\"line\">    * 脚本语言</span><br><span class=\"line\">         * Python</span><br></pre></td></tr></table></figure>\n<p>第二行一个Tab，第三行两个Tab。这样用来表示层级结构就更清晰了吧，看效果：</p>\n<pre><code>如果你觉得三级结构表达还不够清楚，我们可以试着换另一种方式\n</code></pre><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&gt;数据结构</span><br><span class=\"line\">&gt;&gt;树</span><br><span class=\"line\">&gt;&gt;&gt;二叉树</span><br><span class=\"line\">&gt;&gt;&gt;&gt;平衡二叉树</span><br><span class=\"line\">&gt;&gt;&gt;&gt;&gt;满二叉树</span><br></pre></td></tr></table></figure>\n<p>显示效果：</p>\n<p>当然比这个更一般的用法是这样。常常能在书籍里面看到的效果，比如引用别人的文章。直接看效果。</p>\n<p>##插入图片</p>\n<p>###来自网络的图片<br>这个方括号里的baidu并不会对图像显示造成任何改动，如果你想达到鼠标悬停显示提示信息，那么可以仿照前面介绍的文本中的方法，就是这样<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">![baidu](http://www.baidu.com/img/bdlogo.gif &quot;百度logo&quot;)</span><br></pre></td></tr></table></figure></p>\n<p>在URL后面，加一个双引号包围的字符串，显示效果如图：</p>\n<p>###Github仓库里的图片<br>有时候我们想显示一个Github仓库里面的图片，其实图片显示的格式与上面基本一致，所不同的就是括号里的url怎么写<br><a href=\"https://github.com/georgezouq/MyImages/raw/master/Logo/foryou.gif\" target=\"_blank\" rel=\"external\">https://github.com/georgezouq/MyImages/raw/master/Logo/foryou.gif</a></p>\n<p>###给图片加上超链接<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">[![baidu]](http://baidu.com)</span><br><span class=\"line\">[baidu]:http://www.baidu.com/img/bdlogo.git &quot;百度LOGO&quot;</span><br></pre></td></tr></table></figure></p>\n<p>插入代码片断</p>\n<p>##使用Github的Gist<br>Gist是以文件为单位的，不是以项目为单位的。而且与普通的GitHub上建的仓库不同，Gist是private的哦。普通的项目默认都是public的，要想弄成private貌似还要交钱的样子。既然是private那么用来写写日记，是极好的。<br>GitHub网页的顶部有：</p>\n<p>点进去:</p>\n<p>这就是你可以编辑的私有文件，它不仅支持Text文本，还支持各种编程语言呢！当然也包括markdown。输入文件名：</p>\n<p>最后保存，选中 Create Secret Gist 就是私有的喽。</p>\n","excerpt":"","more":"<p>#Github Readme 排版解析</p>\n<blockquote>\n<p>README 文件的后缀名是md，md是markdown的缩写。markdown是一种编辑博客的语言，<br>Github在语法标准markdown上做了修改，称之为Github Flavored Markdown GFM 不是 GFW=.=</p>\n</blockquote>\n<p>##一、关于标题</p>\n<h1 id=\"大标题\"><a href=\"#大标题\" class=\"headerlink\" title=\"大标题  \"></a>大标题  </h1><h2 id=\"中标题\"><a href=\"#中标题\" class=\"headerlink\" title=\"中标题\"></a>中标题</h2><p>在文本下面加上等于号=，那么上方的文本就变成大标题。等于号的个数无限制，但一定要大于0。<br>比大标题低一级的是中标题，也就是显示出来比大标题小一点。在文本下面加上—— 那么上方的文本就变成中标题，同样的下划线的个数无限制。<br>除此之外，你也会发现大，中标题下面都有一条横线，没这就是= 和-的显示结果。如果你只输入=，那么他就会显示一条横线。</p>\n<p>除此之外，标题还有等级表示法，分为六级，显示的文本大小一次减少，不同等级之间以井号#的个数来标识<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">#一级标题</span><br><span class=\"line\">##二级标题</span><br><span class=\"line\">###三级标题</span><br><span class=\"line\">####四级标题</span><br><span class=\"line\">#####五级标题</span><br><span class=\"line\">######六级标题</span><br></pre></td></tr></table></figure></p>\n<p>##显示文本</p>\n<p>###普通文本<br>    直接输入文字就是普通文本，但是要注意的是换行的时候不能直接通过回车来换行，需要使用<br>(或者<br/>)。事实上，markdown支持一些html标签，当然如果完全使用html写就失去了markdown的意义<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">这是一行&lt;br&gt;</span><br><span class=\"line\">普通的文本&lt;br/&gt;</span><br><span class=\"line\">换行啦\\&lt;br&gt;</span><br></pre></td></tr></table></figure></p>\n<p>注意第三行的<br>前添加的反斜杠\\，目的就是像其他语言那样实现转译，也就是&lt;的转译<br>此外，要显示一个超链接的话，就直接输入这个链接的url就好。显示出来会自动变成可链接的形式。</p>\n<p>####显示空格的小Tip<br>默认的文本行首行都会被忽略的，但是如果你想用空格来排一下，那就把输入法由半角改为全角就OK啦</p>\n<p>###单行文本<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">使用两个Tab符来实现单行文本。</span><br></pre></td></tr></table></figure></p>\n<p>注意前面有两个Tab，在Github上单行文本显示效果如图：</p>\n<p>###多行文本<br>多行文本和单行文本异曲同工，只要在每行行首加两个Tab即可</p>\n<p>##使部分文字高亮显示<br>可以使用<code>` 将需要高亮显示的文字包围起来即可\nThank</code>You<code>. Please</code>Call<code>Me</code>Coder`</p>\n<p>##文字超链接<br>给一段文字添加超链接的格式： <a href=\"超链接的地址\" title=\"悬停显示\">要显示的文字</a> 比如<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">[我的博客](http://blog.csdn.net &quot;blog&quot;)</span><br></pre></td></tr></table></figure></p>\n<p>##插入符号</p>\n<p>###圆点符<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">* 这是一个圆点符号</span><br><span class=\"line\">* 这是另一个圆点符号</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">* 编程语言</span><br><span class=\"line\">    * 脚本语言</span><br><span class=\"line\">         * Python</span><br></pre></td></tr></table></figure>\n<p>第二行一个Tab，第三行两个Tab。这样用来表示层级结构就更清晰了吧，看效果：</p>\n<pre><code>如果你觉得三级结构表达还不够清楚，我们可以试着换另一种方式\n</code></pre><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&gt;数据结构</span><br><span class=\"line\">&gt;&gt;树</span><br><span class=\"line\">&gt;&gt;&gt;二叉树</span><br><span class=\"line\">&gt;&gt;&gt;&gt;平衡二叉树</span><br><span class=\"line\">&gt;&gt;&gt;&gt;&gt;满二叉树</span><br></pre></td></tr></table></figure>\n<p>显示效果：</p>\n<p>当然比这个更一般的用法是这样。常常能在书籍里面看到的效果，比如引用别人的文章。直接看效果。</p>\n<p>##插入图片</p>\n<p>###来自网络的图片<br>这个方括号里的baidu并不会对图像显示造成任何改动，如果你想达到鼠标悬停显示提示信息，那么可以仿照前面介绍的文本中的方法，就是这样<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">![baidu](http://www.baidu.com/img/bdlogo.gif &quot;百度logo&quot;)</span><br></pre></td></tr></table></figure></p>\n<p>在URL后面，加一个双引号包围的字符串，显示效果如图：</p>\n<p>###Github仓库里的图片<br>有时候我们想显示一个Github仓库里面的图片，其实图片显示的格式与上面基本一致，所不同的就是括号里的url怎么写<br><a href=\"https://github.com/georgezouq/MyImages/raw/master/Logo/foryou.gif\">https://github.com/georgezouq/MyImages/raw/master/Logo/foryou.gif</a></p>\n<p>###给图片加上超链接<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">[![baidu]](http://baidu.com)</span><br><span class=\"line\">[baidu]:http://www.baidu.com/img/bdlogo.git &quot;百度LOGO&quot;</span><br></pre></td></tr></table></figure></p>\n<p>插入代码片断</p>\n<p>##使用Github的Gist<br>Gist是以文件为单位的，不是以项目为单位的。而且与普通的GitHub上建的仓库不同，Gist是private的哦。普通的项目默认都是public的，要想弄成private貌似还要交钱的样子。既然是private那么用来写写日记，是极好的。<br>GitHub网页的顶部有：</p>\n<p>点进去:</p>\n<p>这就是你可以编辑的私有文件，它不仅支持Text文本，还支持各种编程语言呢！当然也包括markdown。输入文件名：</p>\n<p>最后保存，选中 Create Secret Gist 就是私有的喽。</p>\n"},{"layout":"keynote","title":"Less And Sass","subtitle":"Keynote: Less And Sass","iframe":null,"date":"2016-06-16T16:00:00.000Z","author":"","header-img":"post-bg-js-version.jpg","_content":"# Less与Sass解析\n\n  首先我们要明确一个观点，尽管Less和Sass语法上有一些共性，但是Less !== Sass。当我们构建一个网站的时候，\n我们可能会需要调色板这个功能，即拥有提供固定的可选择样式，避免样式跳跃过大。这个时候我们就用到了Less和Sass，\n事实证明，他们的功能要比这个多得多。\n\n### Less 和 Sass 语法共性\n\n1.混入（Minxins）—— class中的class\n2.参数混入 —— 可以传递参数的class\n3.嵌套规则 —— Class中嵌套class，从而较少重复的代码\n4.运算 —— CSS中用上数学\n5.颜色功能 —— 可编辑颜色\n6.命名空间（namespace） —— 分组样式\n7.作用域 —— 局部修改样式\n8.JavaScript赋值 - 在CSS中使用JavaScript表达式赋值\n\nLess和Sass的主要不同就是他们的实现方式，Less是基于JavaScript，所以是在客户端处理。而\nSass是基于Ruby在服务器端处理的。很多开发者不会选择Less因为JavaScript引擎需要额外的时\n间来处理代码然后输出修改过的CSS到浏览器。关于这个有很多种方式，我选择的是只在开发环节使用\nLESS，一旦我完成开发，就复制然后粘贴Less输出的到一个压缩器，然后到一个独立的CSS文件来替代\nLess文件。另外，我选择使用LESS.app来编译和压缩Less文件。两个选择都将最小化你的样式输出，\n从而避免由于用户的浏览器不支持JavaScript而可能引起的任何问题。\n\n# Less Is More\n\n## Sass 安装\n\n### 安装\n\n  如果已经安装好了Ruby，接着在命令行下输入\n\n  ```shell\n    gem install sass\n  ```\n\n### 使用\n\n  将Sass文件(.sass)转化为`css`代码\n\n  ```shell\n    sass test.scss\n  ```\n\n  如果要将显示结果保存成未见，后面再跟一个`.css`文件名\n\n  ```shell\n  sass test.scss test.css\n  ```\n\n  Sass 提供四个编译风格选项：\n\n  1.nested : 嵌套缩进的css代码，他是默认值\n  2.expanded : 没有缩进的、拓展css代码\n  3.compact : 简洁格式的css代码\n  4.compressed : 压缩后的css代码\n\n  在生产环境当中，一般使用最后一个选项\n\n  sass --style compressed test.sass test.css\n\n  也可以让sass监听某人文件或目录，一旦源文件有变化，就自动生成编译后的文件\n```shell\n  //watch a filter\n  sass --watch input.scss:output.css\n\n  //watch a directory\n  sass --watch app/sass:public/stylesheets\n\n```  \n## Less 安装\n\n在项目中引入less.js\n\n1.下载less.js\n2.创建一个文件来存放Less代码，如style.less\n3.添加以下代码到你的HTML的<head>中\n\n```HTML\n<link rel=\"stylesheet/less\" type=\"text/css\" href=\"styles.less\">\n<script src=\"less.js\" type=\"text/javascript\"></script>\n```\n\n其实也有一个[服务器端的less版本](http://lesscss.org/#-server-side-usage)，在服务器上安装Less的最简单的办法就是使用[Node Package](https://github.com/npm/npm)Messager (NPM 一看 就知道是基于NodeJS的)\n\n## 相同和不同\n\n\n### 变量\n    If you are developer,variables will be your best friend\n\n我们可以将能重复使用到的值（本案例里是color）设置成变量，这样就可以避免重复的定义，减少很大的工作量\n\n```less\n  @blue : #00c;\n  @light_blue : @blue + #333;\n  @dark_blue : @blue - 333;\n```\n\n他们看起来：\n[!less]:https://github.com/georgezouq/geoblog/raw/master/img/blue-gradient,jpg\n\n关于变量 Less和Sass的唯一区别就是 Less使用`@` 而 Sass 使用`$`.同时还有一些作用域上的差别，我们之后会提到\n\n### 混入(mixin)\n\n有些时候我们会创建一些在样式表中重复使用的样式规则，通常会使用\n```html\n  <div class=\"border article\"></div>\n```\n\n这种方式引用多种样式，但是有了less 我们可以\n\n```less\n.border{\n  border-top : 1px dotted #333;\n}\narticle.post{\n  background:#333;\n  .border;\n}\nul.menu{\n  background:#ccc;\n  .border;\n}\n\n```\n\n下面是在两个元素中分别添加`.border` 同样的效果，而且仅仅在样式变中就完成了\n\n[!less]:https://github.com/georgezouq/geoblog/raw/master/img/bordered-elements,jpg\n\n在Sass中，我们需要在样式规则前添加`@minxin`声明,然后通过`@include`来调用它\n\n```Sass\n  @mixin border {\n    border-top:1px dotted #333;\n  }\n  article.post {\n    background : #eee;\n    @include border;\n  }\n  ui.menu {\n    background:#ccc;\n    @include border;\n  }\n```\n\n### 参数混入\n\n使用Less或Sass，我们可以使用函数处理Css中多余的工作。最好的例子就是我们正在经历的从Css2到css3的过渡过程中很多浏览器的私有前缀。Nettuts+有一篇Jeffrey Way写的[文章](http://code.tutsplus.com/tutorials/quick-tip-never-type-a-vendor-prefix-again--net-17589)\n内容是包含参数的文件，他们可以附带大多数浏览器私有前缀Css3属性\n\n```Less\n.border-radius( @radius:3px ){\n  -webkit-border-radius : @radius;\n  -moz-border-radius : @radius;\n  border-radius : @radius;\n}\n```\n\nSess的语法很像Less，只是只用$声明变量，然后使用前面提到的`@minxin` 和 `@include`来调用\n\n### 选择器继承\n\n  Less并没有提供这个功能，通过这个功能，你可以讲一个选择器附加到已经预先定义的选择器上，而无需在使用逗号\n  将两者分开:\n\n```Sass\n.menu {\n  border:1px solid #ddd;\n}\n\n.footer {\n  @extend .menu;\n}\n\n/* 上面的写法等同于 */\n.menu,.footer {\n  border:1px solid #ddd;\n}\n```\n\n### 嵌套规则\n\n在Css中嵌套Class和ID是避免你的样式干扰或者被别的样式干扰的唯一方法，但这样会非常凌乱。使用一个类似于`#site-body.post.postheader h2`的选择器毫无吸引力，使用Less，你可以嵌套Id、class及标签:\n\n```Less\n#site-body{\n  .post {\n    .post-header {\n      h2 {\n\n      }\n      a {\n        &amp;:visited { ... }\n        &amp;:hover { ... }\n      }\n    }\n  }\n}\n```\n上面的代码最终和上面的例子（长长的选择器）的效果一样，但是更容易阅读和理解\n\n### 运算\n\n在css中使用数字或变量来实现数学之美\n\n```Less\n@base_margin: 10px;\n@double_margin: @base_margin * 2;\n@full_page: 960px;\n@half_page: @full_page / 2;\n@quarter_page: (@full_page / 2) / 2;\n\n```\n\nSass 在对数字的处理上更加专业，让已经可以换算单位了，Sass可以处理无法识别的度量单位并将其输出，这个特性明显是一个对未来的尝试 —— 证明W3C做出的一些改变\n\n```Sass\n/* Sass */\n2in + 3cm + 2pc = 3.514in\n\n/* Less */\n2in + 3cm + 2pc = ERROR!\n```\n\n### Color 函数\n\n在文章开头的时候我们提到了调色板，对此贡献最大的一部分就是颜色函数。加入你用一个标准的蓝色贯穿到你的样式中，然后你想在表单中用这个蓝色来做一个渐变的按钮。你可以打开PS或者其他编辑器来获取一个比蓝色浅的或者比较暗的HFX色值来作为渐变色，或者，你可以使用Less中的颜色函数\n\n```Less\n@blue: #369;\n\n.submit {\n  padding:5px 10px;\n  border:1px solid @blue;\n  background: -moz-linear-gradient(top, lighten(@blue, 10%), @blue 100%); /*Moz*/\n\tbackground: -webkit-gradient(linear, center top, center bottom, from(lighten(@blue, 10%)), color-stop(100%, @blue)); /*Webkit*/\n\tbackground: -o-linear-gradient(top, lighten(@blue, 10%) 0%, @blue 100%); /*Opera*/\n\tbackground: -ms-linear-gradient(top, lighten(@blue, 10%) 0%, @blue 100%); /*IE 10+*/\n\tbackground: linear-gradient(top, lighten(@blue, 10%) 0%, @blue 100%); /*W3C*/\n  color: #fff;\n  text-shadow: 0 -1px 1px rgba(0,0,0,0.4);\n}\n```\n\nlighten函数明显就是用百分比值来减轻颜色，在这个例子中，他将减轻这个基础的蓝色的10%。这种方法可以让我们变阿华的元素或者其他任何元素的颜色值 —— 只是简单的改变基础颜色而已，这对于主题（模板）来说非常有用。而且，如果你使用参数功能，像上面提到的，你还可以更简单的应用到一些浏览器的私有前缀的生命中，如：\n```Less\n.linear-gradient(lighten(@blue),@blue,100%)\n```\n\n最终效果的确很赞\n\n[!less]:https://github.com/georgezouq/geoblog/raw/master/img/091228yWj,jpg\n\nSass 貌似与更多的选项，如果你想了解更多，可以看一些[这篇很详细的介绍](http://nex-3.com/posts/89-powerful-color-manipulation-with-Sass)\n\n### 条件语句与控制\n\n这的确是一个很好用的功能，也是另一个Less不支持的功能，你可以使用if {} else {} 条件语句，for {} 循环。他甚至支持and、or和not，以及< , > , >= , <= 和 == 等操作符\n\n```Sass\n\n/* Sample Sass \"if\" statement */\n@if lightness($color) &gt; 30% {\n    backgroung-color: #000;\n} @else {\n    background-color: #fff;\n}\n/* Sample Sass \"for\" loop */\n@for $i from 1px to 10px {\n    .border-#{i} {\n        border: $i solid blue;\n    }\n}\n```\n\n### 命名空间\n\n命名空间可以有效的组织我们的Css，我们可以将一些公用的样式分组，然后在用的时候直接使用。例如，我们创建了一个名为default的样式分组，那我们就可以在用到的时候直接从该组中调用。\n\n```Less\n  .nav_list() {\n    list-style : none;\n    margin: 0;\n    padding: 0;\n  }\n  .button(){ ... }\n  .quote(){ ... }\n\n```\n\n然后，在我们的代码中，如果我们正好在一个nav元素中使用了ul元素，那么我们就会想到我们需要default的样式，然后我们就可以简单的调用它，他就会被直接使用\n\nnav ul {\n  #defaults &gt; .nav_list;\n}\n\n### 作用域\n\n作用域是编程中的标配，LESS中也是。如果你在你的样式表的root级声明一个变量，他在整个文档中都是可以使用的。然而，如果你在一个选择器，比如ID或者CLASS中，重新定义了这个变量，那么，他就只能在这个选择器中可用了。\n\n```Less\n@color: #00c; /* 蓝色 */\n#header {\n  @color: #c00; /* 红色 */\n  border: 1px solid @color; /* 红色边框 */\n}\n\n#footer {\n  border: 1px solid @color; /* 蓝色边框 */\n}\n```\n\n### 注释\n\n这一部分比较基础，Less允许两种注释的写法`//注释`和 `/* 注释 */`\n\n### 导入\n\n标准的`@import: 'classes.less' ` 如果你想要引入其他的LESS文件，那么文件的拓展名是可选的，所以@import 'classes' ;也是可行的。如果你想要导入一些无需less处理的内容，你可以使用.css后缀\n\n### 字符串插入\n\n字符串也是可以用于变量中的，然后通过 `@{name}` 来调用\n\n```Less\n@base_url: 'http://www.ddd.com'\nbackground-image: url(\"@{base_url}/images/background.png\");\n\n```\n\n### 转义(Escaping)\n\n我们通常需要引入一个css中非法或者less无法识别的值，通常一些IE的hack，要避免抛出异常并破坏Less，你需要避开他们\n\n```less\n.class{\n  filter: ~\"progid:DXImageTransform.Microsoft.Alpha(opacity=20)\";\n}\n/* 实际上将会输出下面的代码 */\n.class {\n  filter:progid:DXImageTransform.Microft.Alpha(opacity=20);\n}\n```\n### Javascript 赋值\n\n在样式表中使用Javascript：\n\n```less\n@string: `'howdy'.toUpperCase()`; /* @string 变成 HOWDY */\n\n/* 你也可以使用前面提到的值 */\n@string: 'howdy';\n@var: ~`'@{string}'.toUpperCase()`; /* 变为 HOWDY */\n\n/* 获取文档的信息 */\n@heigh = `document.body.clientHeight`;\n\n```\n\n### 输出格式\n\n然而Less并没有输出设置，而Sass中提供四种选项：nested，compact，compressed 和 expanded\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nhttp://blog.jobbole.com/24671/\n","source":"_posts/Less And Sass.markdown","raw":"---\nlayout:     keynote\ntitle:      \"Less And Sass\"\nsubtitle:   \"Keynote: Less And Sass\"\niframe:     \ndate:       2016-06-17\nauthor:     \"\"\nheader-img: \"post-bg-js-version.jpg\"\ntags:\n    - 前端开发\n    - CSS\n---\n# Less与Sass解析\n\n  首先我们要明确一个观点，尽管Less和Sass语法上有一些共性，但是Less !== Sass。当我们构建一个网站的时候，\n我们可能会需要调色板这个功能，即拥有提供固定的可选择样式，避免样式跳跃过大。这个时候我们就用到了Less和Sass，\n事实证明，他们的功能要比这个多得多。\n\n### Less 和 Sass 语法共性\n\n1.混入（Minxins）—— class中的class\n2.参数混入 —— 可以传递参数的class\n3.嵌套规则 —— Class中嵌套class，从而较少重复的代码\n4.运算 —— CSS中用上数学\n5.颜色功能 —— 可编辑颜色\n6.命名空间（namespace） —— 分组样式\n7.作用域 —— 局部修改样式\n8.JavaScript赋值 - 在CSS中使用JavaScript表达式赋值\n\nLess和Sass的主要不同就是他们的实现方式，Less是基于JavaScript，所以是在客户端处理。而\nSass是基于Ruby在服务器端处理的。很多开发者不会选择Less因为JavaScript引擎需要额外的时\n间来处理代码然后输出修改过的CSS到浏览器。关于这个有很多种方式，我选择的是只在开发环节使用\nLESS，一旦我完成开发，就复制然后粘贴Less输出的到一个压缩器，然后到一个独立的CSS文件来替代\nLess文件。另外，我选择使用LESS.app来编译和压缩Less文件。两个选择都将最小化你的样式输出，\n从而避免由于用户的浏览器不支持JavaScript而可能引起的任何问题。\n\n# Less Is More\n\n## Sass 安装\n\n### 安装\n\n  如果已经安装好了Ruby，接着在命令行下输入\n\n  ```shell\n    gem install sass\n  ```\n\n### 使用\n\n  将Sass文件(.sass)转化为`css`代码\n\n  ```shell\n    sass test.scss\n  ```\n\n  如果要将显示结果保存成未见，后面再跟一个`.css`文件名\n\n  ```shell\n  sass test.scss test.css\n  ```\n\n  Sass 提供四个编译风格选项：\n\n  1.nested : 嵌套缩进的css代码，他是默认值\n  2.expanded : 没有缩进的、拓展css代码\n  3.compact : 简洁格式的css代码\n  4.compressed : 压缩后的css代码\n\n  在生产环境当中，一般使用最后一个选项\n\n  sass --style compressed test.sass test.css\n\n  也可以让sass监听某人文件或目录，一旦源文件有变化，就自动生成编译后的文件\n```shell\n  //watch a filter\n  sass --watch input.scss:output.css\n\n  //watch a directory\n  sass --watch app/sass:public/stylesheets\n\n```  \n## Less 安装\n\n在项目中引入less.js\n\n1.下载less.js\n2.创建一个文件来存放Less代码，如style.less\n3.添加以下代码到你的HTML的<head>中\n\n```HTML\n<link rel=\"stylesheet/less\" type=\"text/css\" href=\"styles.less\">\n<script src=\"less.js\" type=\"text/javascript\"></script>\n```\n\n其实也有一个[服务器端的less版本](http://lesscss.org/#-server-side-usage)，在服务器上安装Less的最简单的办法就是使用[Node Package](https://github.com/npm/npm)Messager (NPM 一看 就知道是基于NodeJS的)\n\n## 相同和不同\n\n\n### 变量\n    If you are developer,variables will be your best friend\n\n我们可以将能重复使用到的值（本案例里是color）设置成变量，这样就可以避免重复的定义，减少很大的工作量\n\n```less\n  @blue : #00c;\n  @light_blue : @blue + #333;\n  @dark_blue : @blue - 333;\n```\n\n他们看起来：\n[!less]:https://github.com/georgezouq/geoblog/raw/master/img/blue-gradient,jpg\n\n关于变量 Less和Sass的唯一区别就是 Less使用`@` 而 Sass 使用`$`.同时还有一些作用域上的差别，我们之后会提到\n\n### 混入(mixin)\n\n有些时候我们会创建一些在样式表中重复使用的样式规则，通常会使用\n```html\n  <div class=\"border article\"></div>\n```\n\n这种方式引用多种样式，但是有了less 我们可以\n\n```less\n.border{\n  border-top : 1px dotted #333;\n}\narticle.post{\n  background:#333;\n  .border;\n}\nul.menu{\n  background:#ccc;\n  .border;\n}\n\n```\n\n下面是在两个元素中分别添加`.border` 同样的效果，而且仅仅在样式变中就完成了\n\n[!less]:https://github.com/georgezouq/geoblog/raw/master/img/bordered-elements,jpg\n\n在Sass中，我们需要在样式规则前添加`@minxin`声明,然后通过`@include`来调用它\n\n```Sass\n  @mixin border {\n    border-top:1px dotted #333;\n  }\n  article.post {\n    background : #eee;\n    @include border;\n  }\n  ui.menu {\n    background:#ccc;\n    @include border;\n  }\n```\n\n### 参数混入\n\n使用Less或Sass，我们可以使用函数处理Css中多余的工作。最好的例子就是我们正在经历的从Css2到css3的过渡过程中很多浏览器的私有前缀。Nettuts+有一篇Jeffrey Way写的[文章](http://code.tutsplus.com/tutorials/quick-tip-never-type-a-vendor-prefix-again--net-17589)\n内容是包含参数的文件，他们可以附带大多数浏览器私有前缀Css3属性\n\n```Less\n.border-radius( @radius:3px ){\n  -webkit-border-radius : @radius;\n  -moz-border-radius : @radius;\n  border-radius : @radius;\n}\n```\n\nSess的语法很像Less，只是只用$声明变量，然后使用前面提到的`@minxin` 和 `@include`来调用\n\n### 选择器继承\n\n  Less并没有提供这个功能，通过这个功能，你可以讲一个选择器附加到已经预先定义的选择器上，而无需在使用逗号\n  将两者分开:\n\n```Sass\n.menu {\n  border:1px solid #ddd;\n}\n\n.footer {\n  @extend .menu;\n}\n\n/* 上面的写法等同于 */\n.menu,.footer {\n  border:1px solid #ddd;\n}\n```\n\n### 嵌套规则\n\n在Css中嵌套Class和ID是避免你的样式干扰或者被别的样式干扰的唯一方法，但这样会非常凌乱。使用一个类似于`#site-body.post.postheader h2`的选择器毫无吸引力，使用Less，你可以嵌套Id、class及标签:\n\n```Less\n#site-body{\n  .post {\n    .post-header {\n      h2 {\n\n      }\n      a {\n        &amp;:visited { ... }\n        &amp;:hover { ... }\n      }\n    }\n  }\n}\n```\n上面的代码最终和上面的例子（长长的选择器）的效果一样，但是更容易阅读和理解\n\n### 运算\n\n在css中使用数字或变量来实现数学之美\n\n```Less\n@base_margin: 10px;\n@double_margin: @base_margin * 2;\n@full_page: 960px;\n@half_page: @full_page / 2;\n@quarter_page: (@full_page / 2) / 2;\n\n```\n\nSass 在对数字的处理上更加专业，让已经可以换算单位了，Sass可以处理无法识别的度量单位并将其输出，这个特性明显是一个对未来的尝试 —— 证明W3C做出的一些改变\n\n```Sass\n/* Sass */\n2in + 3cm + 2pc = 3.514in\n\n/* Less */\n2in + 3cm + 2pc = ERROR!\n```\n\n### Color 函数\n\n在文章开头的时候我们提到了调色板，对此贡献最大的一部分就是颜色函数。加入你用一个标准的蓝色贯穿到你的样式中，然后你想在表单中用这个蓝色来做一个渐变的按钮。你可以打开PS或者其他编辑器来获取一个比蓝色浅的或者比较暗的HFX色值来作为渐变色，或者，你可以使用Less中的颜色函数\n\n```Less\n@blue: #369;\n\n.submit {\n  padding:5px 10px;\n  border:1px solid @blue;\n  background: -moz-linear-gradient(top, lighten(@blue, 10%), @blue 100%); /*Moz*/\n\tbackground: -webkit-gradient(linear, center top, center bottom, from(lighten(@blue, 10%)), color-stop(100%, @blue)); /*Webkit*/\n\tbackground: -o-linear-gradient(top, lighten(@blue, 10%) 0%, @blue 100%); /*Opera*/\n\tbackground: -ms-linear-gradient(top, lighten(@blue, 10%) 0%, @blue 100%); /*IE 10+*/\n\tbackground: linear-gradient(top, lighten(@blue, 10%) 0%, @blue 100%); /*W3C*/\n  color: #fff;\n  text-shadow: 0 -1px 1px rgba(0,0,0,0.4);\n}\n```\n\nlighten函数明显就是用百分比值来减轻颜色，在这个例子中，他将减轻这个基础的蓝色的10%。这种方法可以让我们变阿华的元素或者其他任何元素的颜色值 —— 只是简单的改变基础颜色而已，这对于主题（模板）来说非常有用。而且，如果你使用参数功能，像上面提到的，你还可以更简单的应用到一些浏览器的私有前缀的生命中，如：\n```Less\n.linear-gradient(lighten(@blue),@blue,100%)\n```\n\n最终效果的确很赞\n\n[!less]:https://github.com/georgezouq/geoblog/raw/master/img/091228yWj,jpg\n\nSass 貌似与更多的选项，如果你想了解更多，可以看一些[这篇很详细的介绍](http://nex-3.com/posts/89-powerful-color-manipulation-with-Sass)\n\n### 条件语句与控制\n\n这的确是一个很好用的功能，也是另一个Less不支持的功能，你可以使用if {} else {} 条件语句，for {} 循环。他甚至支持and、or和not，以及< , > , >= , <= 和 == 等操作符\n\n```Sass\n\n/* Sample Sass \"if\" statement */\n@if lightness($color) &gt; 30% {\n    backgroung-color: #000;\n} @else {\n    background-color: #fff;\n}\n/* Sample Sass \"for\" loop */\n@for $i from 1px to 10px {\n    .border-#{i} {\n        border: $i solid blue;\n    }\n}\n```\n\n### 命名空间\n\n命名空间可以有效的组织我们的Css，我们可以将一些公用的样式分组，然后在用的时候直接使用。例如，我们创建了一个名为default的样式分组，那我们就可以在用到的时候直接从该组中调用。\n\n```Less\n  .nav_list() {\n    list-style : none;\n    margin: 0;\n    padding: 0;\n  }\n  .button(){ ... }\n  .quote(){ ... }\n\n```\n\n然后，在我们的代码中，如果我们正好在一个nav元素中使用了ul元素，那么我们就会想到我们需要default的样式，然后我们就可以简单的调用它，他就会被直接使用\n\nnav ul {\n  #defaults &gt; .nav_list;\n}\n\n### 作用域\n\n作用域是编程中的标配，LESS中也是。如果你在你的样式表的root级声明一个变量，他在整个文档中都是可以使用的。然而，如果你在一个选择器，比如ID或者CLASS中，重新定义了这个变量，那么，他就只能在这个选择器中可用了。\n\n```Less\n@color: #00c; /* 蓝色 */\n#header {\n  @color: #c00; /* 红色 */\n  border: 1px solid @color; /* 红色边框 */\n}\n\n#footer {\n  border: 1px solid @color; /* 蓝色边框 */\n}\n```\n\n### 注释\n\n这一部分比较基础，Less允许两种注释的写法`//注释`和 `/* 注释 */`\n\n### 导入\n\n标准的`@import: 'classes.less' ` 如果你想要引入其他的LESS文件，那么文件的拓展名是可选的，所以@import 'classes' ;也是可行的。如果你想要导入一些无需less处理的内容，你可以使用.css后缀\n\n### 字符串插入\n\n字符串也是可以用于变量中的，然后通过 `@{name}` 来调用\n\n```Less\n@base_url: 'http://www.ddd.com'\nbackground-image: url(\"@{base_url}/images/background.png\");\n\n```\n\n### 转义(Escaping)\n\n我们通常需要引入一个css中非法或者less无法识别的值，通常一些IE的hack，要避免抛出异常并破坏Less，你需要避开他们\n\n```less\n.class{\n  filter: ~\"progid:DXImageTransform.Microsoft.Alpha(opacity=20)\";\n}\n/* 实际上将会输出下面的代码 */\n.class {\n  filter:progid:DXImageTransform.Microft.Alpha(opacity=20);\n}\n```\n### Javascript 赋值\n\n在样式表中使用Javascript：\n\n```less\n@string: `'howdy'.toUpperCase()`; /* @string 变成 HOWDY */\n\n/* 你也可以使用前面提到的值 */\n@string: 'howdy';\n@var: ~`'@{string}'.toUpperCase()`; /* 变为 HOWDY */\n\n/* 获取文档的信息 */\n@heigh = `document.body.clientHeight`;\n\n```\n\n### 输出格式\n\n然而Less并没有输出设置，而Sass中提供四种选项：nested，compact，compressed 和 expanded\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nhttp://blog.jobbole.com/24671/\n","slug":"Less And Sass","published":1,"updated":"2016-06-20T01:50:40.933Z","comments":1,"photos":[],"link":"","_id":"cipnd9719000ayww74xshduh8","content":"<h1 id=\"Less与Sass解析\"><a href=\"#Less与Sass解析\" class=\"headerlink\" title=\"Less与Sass解析\"></a>Less与Sass解析</h1><p>  首先我们要明确一个观点，尽管Less和Sass语法上有一些共性，但是Less !== Sass。当我们构建一个网站的时候，<br>我们可能会需要调色板这个功能，即拥有提供固定的可选择样式，避免样式跳跃过大。这个时候我们就用到了Less和Sass，<br>事实证明，他们的功能要比这个多得多。</p>\n<h3 id=\"Less-和-Sass-语法共性\"><a href=\"#Less-和-Sass-语法共性\" class=\"headerlink\" title=\"Less 和 Sass 语法共性\"></a>Less 和 Sass 语法共性</h3><p>1.混入（Minxins）—— class中的class<br>2.参数混入 —— 可以传递参数的class<br>3.嵌套规则 —— Class中嵌套class，从而较少重复的代码<br>4.运算 —— CSS中用上数学<br>5.颜色功能 —— 可编辑颜色<br>6.命名空间（namespace） —— 分组样式<br>7.作用域 —— 局部修改样式<br>8.JavaScript赋值 - 在CSS中使用JavaScript表达式赋值</p>\n<p>Less和Sass的主要不同就是他们的实现方式，Less是基于JavaScript，所以是在客户端处理。而<br>Sass是基于Ruby在服务器端处理的。很多开发者不会选择Less因为JavaScript引擎需要额外的时<br>间来处理代码然后输出修改过的CSS到浏览器。关于这个有很多种方式，我选择的是只在开发环节使用<br>LESS，一旦我完成开发，就复制然后粘贴Less输出的到一个压缩器，然后到一个独立的CSS文件来替代<br>Less文件。另外，我选择使用LESS.app来编译和压缩Less文件。两个选择都将最小化你的样式输出，<br>从而避免由于用户的浏览器不支持JavaScript而可能引起的任何问题。</p>\n<h1 id=\"Less-Is-More\"><a href=\"#Less-Is-More\" class=\"headerlink\" title=\"Less Is More\"></a>Less Is More</h1><h2 id=\"Sass-安装\"><a href=\"#Sass-安装\" class=\"headerlink\" title=\"Sass 安装\"></a>Sass 安装</h2><h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><p>  如果已经安装好了Ruby，接着在命令行下输入</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">gem install sass</span><br></pre></td></tr></table></figure>\n<h3 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h3><p>  将Sass文件(.sass)转化为<code>css</code>代码</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">sass test.scss</span><br></pre></td></tr></table></figure>\n<p>  如果要将显示结果保存成未见，后面再跟一个<code>.css</code>文件名</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">sass test.scss test.css</span><br></pre></td></tr></table></figure>\n<p>  Sass 提供四个编译风格选项：</p>\n<p>  1.nested : 嵌套缩进的css代码，他是默认值<br>  2.expanded : 没有缩进的、拓展css代码<br>  3.compact : 简洁格式的css代码<br>  4.compressed : 压缩后的css代码</p>\n<p>  在生产环境当中，一般使用最后一个选项</p>\n<p>  sass –style compressed test.sass test.css</p>\n<p>  也可以让sass监听某人文件或目录，一旦源文件有变化，就自动生成编译后的文件<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">  //watch a filter</span><br><span class=\"line\">  sass --watch input.scss:output.css</span><br><span class=\"line\"></span><br><span class=\"line\">  //watch a directory</span><br><span class=\"line\">  sass --watch app/sass:public/stylesheets</span><br><span class=\"line\"></span><br><span class=\"line\">```  </span><br><span class=\"line\">## Less 安装</span><br><span class=\"line\"></span><br><span class=\"line\">在项目中引入less.js</span><br><span class=\"line\"></span><br><span class=\"line\">1.下载less.js</span><br><span class=\"line\">2.创建一个文件来存放Less代码，如style.less</span><br><span class=\"line\">3.添加以下代码到你的HTML的&lt;head&gt;中</span><br><span class=\"line\"></span><br><span class=\"line\">```HTML</span><br><span class=\"line\">&lt;link rel=&quot;stylesheet/less&quot; type=&quot;text/css&quot; href=&quot;styles.less&quot;&gt;</span><br><span class=\"line\">&lt;script src=&quot;less.js&quot; type=&quot;text/javascript&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure></p>\n<p>其实也有一个<a href=\"http://lesscss.org/#-server-side-usage\" target=\"_blank\" rel=\"external\">服务器端的less版本</a>，在服务器上安装Less的最简单的办法就是使用<a href=\"https://github.com/npm/npm\" target=\"_blank\" rel=\"external\">Node Package</a>Messager (NPM 一看 就知道是基于NodeJS的)</p>\n<h2 id=\"相同和不同\"><a href=\"#相同和不同\" class=\"headerlink\" title=\"相同和不同\"></a>相同和不同</h2><h3 id=\"变量\"><a href=\"#变量\" class=\"headerlink\" title=\"变量\"></a>变量</h3><pre><code>If you are developer,variables will be your best friend\n</code></pre><p>我们可以将能重复使用到的值（本案例里是color）设置成变量，这样就可以避免重复的定义，减少很大的工作量</p>\n<figure class=\"highlight less\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">@blue :</span> <span class=\"number\">#00c</span>;</span><br><span class=\"line\"><span class=\"variable\">@light_blue :</span> <span class=\"variable\">@blue</span> + <span class=\"number\">#333</span>;</span><br><span class=\"line\"><span class=\"variable\">@dark_blue :</span> <span class=\"variable\">@blue</span> - <span class=\"number\">333</span>;</span><br></pre></td></tr></table></figure>\n<p>他们看起来：</p>\n<p>关于变量 Less和Sass的唯一区别就是 Less使用<code>@</code> 而 Sass 使用<code>$</code>.同时还有一些作用域上的差别，我们之后会提到</p>\n<h3 id=\"混入-mixin\"><a href=\"#混入-mixin\" class=\"headerlink\" title=\"混入(mixin)\"></a>混入(mixin)</h3><p>有些时候我们会创建一些在样式表中重复使用的样式规则，通常会使用<br><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"border article\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>这种方式引用多种样式，但是有了less 我们可以</p>\n<figure class=\"highlight less\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.border</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">border-top </span>: <span class=\"number\">1px</span> dotted <span class=\"number\">#333</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">article</span><span class=\"selector-class\">.post</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>:<span class=\"number\">#333</span>;</span><br><span class=\"line\">  <span class=\"selector-class\">.border</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">ul</span><span class=\"selector-class\">.menu</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>:<span class=\"number\">#ccc</span>;</span><br><span class=\"line\">  <span class=\"selector-class\">.border</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>下面是在两个元素中分别添加<code>.border</code> 同样的效果，而且仅仅在样式变中就完成了</p>\n<p>在Sass中，我们需要在样式规则前添加<code>@minxin</code>声明,然后通过<code>@include</code>来调用它</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">@mixin border &#123;</span><br><span class=\"line\">  border-top:1px dotted #333;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">article.post &#123;</span><br><span class=\"line\">  background : #eee;</span><br><span class=\"line\">  @include border;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">ui.menu &#123;</span><br><span class=\"line\">  background:#ccc;</span><br><span class=\"line\">  @include border;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"参数混入\"><a href=\"#参数混入\" class=\"headerlink\" title=\"参数混入\"></a>参数混入</h3><p>使用Less或Sass，我们可以使用函数处理Css中多余的工作。最好的例子就是我们正在经历的从Css2到css3的过渡过程中很多浏览器的私有前缀。Nettuts+有一篇Jeffrey Way写的<a href=\"http://code.tutsplus.com/tutorials/quick-tip-never-type-a-vendor-prefix-again--net-17589\" target=\"_blank\" rel=\"external\">文章</a><br>内容是包含参数的文件，他们可以附带大多数浏览器私有前缀Css3属性</p>\n<figure class=\"highlight less\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.border-radius</span>( <span class=\"variable\">@radius</span>:<span class=\"number\">3px</span> )&#123;</span><br><span class=\"line\">  <span class=\"attribute\">-webkit-border-radius </span>: <span class=\"variable\">@radius</span>;</span><br><span class=\"line\">  <span class=\"attribute\">-moz-border-radius </span>: <span class=\"variable\">@radius</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border-radius </span>: <span class=\"variable\">@radius</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Sess的语法很像Less，只是只用$声明变量，然后使用前面提到的<code>@minxin</code> 和 <code>@include</code>来调用</p>\n<h3 id=\"选择器继承\"><a href=\"#选择器继承\" class=\"headerlink\" title=\"选择器继承\"></a>选择器继承</h3><p>  Less并没有提供这个功能，通过这个功能，你可以讲一个选择器附加到已经预先定义的选择器上，而无需在使用逗号<br>  将两者分开:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">.menu &#123;</span><br><span class=\"line\">  border:1px solid #ddd;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">.footer &#123;</span><br><span class=\"line\">  @extend .menu;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">/* 上面的写法等同于 */</span><br><span class=\"line\">.menu,.footer &#123;</span><br><span class=\"line\">  border:1px solid #ddd;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"嵌套规则\"><a href=\"#嵌套规则\" class=\"headerlink\" title=\"嵌套规则\"></a>嵌套规则</h3><p>在Css中嵌套Class和ID是避免你的样式干扰或者被别的样式干扰的唯一方法，但这样会非常凌乱。使用一个类似于<code>#site-body.post.postheader h2</code>的选择器毫无吸引力，使用Less，你可以嵌套Id、class及标签:</p>\n<figure class=\"highlight less\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-id\">#site-body</span>&#123;</span><br><span class=\"line\">  <span class=\"selector-class\">.post</span> &#123;</span><br><span class=\"line\">    <span class=\"selector-class\">.post-header</span> &#123;</span><br><span class=\"line\">      <span class=\"selector-tag\">h2</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"selector-tag\">a</span> &#123;</span><br><span class=\"line\">        <span class=\"selector-tag\">&amp;</span><span class=\"selector-tag\">amp</span>;<span class=\"selector-pseudo\">:visited</span> &#123; ... &#125;</span><br><span class=\"line\">        <span class=\"selector-tag\">&amp;</span><span class=\"selector-tag\">amp</span>;<span class=\"selector-pseudo\">:hover</span> &#123; ... &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面的代码最终和上面的例子（长长的选择器）的效果一样，但是更容易阅读和理解</p>\n<h3 id=\"运算\"><a href=\"#运算\" class=\"headerlink\" title=\"运算\"></a>运算</h3><p>在css中使用数字或变量来实现数学之美</p>\n<figure class=\"highlight less\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">@base_margin:</span> <span class=\"number\">10px</span>;</span><br><span class=\"line\"><span class=\"variable\">@double_margin:</span> <span class=\"variable\">@base_margin</span> * <span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"variable\">@full_page:</span> <span class=\"number\">960px</span>;</span><br><span class=\"line\"><span class=\"variable\">@half_page:</span> <span class=\"variable\">@full_page</span> / <span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"variable\">@quarter_page:</span> (<span class=\"variable\">@full_page</span> / <span class=\"number\">2</span>) / <span class=\"number\">2</span>;</span><br></pre></td></tr></table></figure>\n<p>Sass 在对数字的处理上更加专业，让已经可以换算单位了，Sass可以处理无法识别的度量单位并将其输出，这个特性明显是一个对未来的尝试 —— 证明W3C做出的一些改变</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">/* Sass */</span><br><span class=\"line\">2in + 3cm + 2pc = 3.514in</span><br><span class=\"line\"></span><br><span class=\"line\">/* Less */</span><br><span class=\"line\">2in + 3cm + 2pc = ERROR!</span><br></pre></td></tr></table></figure>\n<h3 id=\"Color-函数\"><a href=\"#Color-函数\" class=\"headerlink\" title=\"Color 函数\"></a>Color 函数</h3><p>在文章开头的时候我们提到了调色板，对此贡献最大的一部分就是颜色函数。加入你用一个标准的蓝色贯穿到你的样式中，然后你想在表单中用这个蓝色来做一个渐变的按钮。你可以打开PS或者其他编辑器来获取一个比蓝色浅的或者比较暗的HFX色值来作为渐变色，或者，你可以使用Less中的颜色函数</p>\n<figure class=\"highlight less\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">@blue:</span> <span class=\"number\">#369</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.submit</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">padding</span>:<span class=\"number\">5px</span> <span class=\"number\">10px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border</span>:<span class=\"number\">1px</span> solid <span class=\"variable\">@blue</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: -moz-linear-gradient(top, lighten(<span class=\"variable\">@blue</span>, <span class=\"number\">10%</span>), <span class=\"variable\">@blue</span> <span class=\"number\">100%</span>); <span class=\"comment\">/*Moz*/</span></span><br><span class=\"line\">\t<span class=\"attribute\">background</span>: -webkit-gradient(linear, center top, center bottom, from(lighten(<span class=\"variable\">@blue</span>, <span class=\"number\">10%</span>)), color-stop(<span class=\"number\">100%</span>, <span class=\"variable\">@blue</span>)); <span class=\"comment\">/*Webkit*/</span></span><br><span class=\"line\">\t<span class=\"attribute\">background</span>: -o-linear-gradient(top, lighten(<span class=\"variable\">@blue</span>, <span class=\"number\">10%</span>) <span class=\"number\">0%</span>, <span class=\"variable\">@blue</span> <span class=\"number\">100%</span>); <span class=\"comment\">/*Opera*/</span></span><br><span class=\"line\">\t<span class=\"attribute\">background</span>: -ms-linear-gradient(top, lighten(<span class=\"variable\">@blue</span>, <span class=\"number\">10%</span>) <span class=\"number\">0%</span>, <span class=\"variable\">@blue</span> <span class=\"number\">100%</span>); <span class=\"comment\">/*IE 10+*/</span></span><br><span class=\"line\">\t<span class=\"attribute\">background</span>: linear-gradient(top, lighten(<span class=\"variable\">@blue</span>, <span class=\"number\">10%</span>) <span class=\"number\">0%</span>, <span class=\"variable\">@blue</span> <span class=\"number\">100%</span>); <span class=\"comment\">/*W3C*/</span></span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#fff</span>;</span><br><span class=\"line\">  <span class=\"attribute\">text-shadow</span>: <span class=\"number\">0</span> -<span class=\"number\">1px</span> <span class=\"number\">1px</span> rgba(<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0.4</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>lighten函数明显就是用百分比值来减轻颜色，在这个例子中，他将减轻这个基础的蓝色的10%。这种方法可以让我们变阿华的元素或者其他任何元素的颜色值 —— 只是简单的改变基础颜色而已，这对于主题（模板）来说非常有用。而且，如果你使用参数功能，像上面提到的，你还可以更简单的应用到一些浏览器的私有前缀的生命中，如：<br><figure class=\"highlight less\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.linear-gradient</span>(lighten(<span class=\"variable\">@blue</span>),<span class=\"variable\">@blue</span>,<span class=\"number\">100%</span>)</span><br></pre></td></tr></table></figure></p>\n<p>最终效果的确很赞</p>\n<p>Sass 貌似与更多的选项，如果你想了解更多，可以看一些<a href=\"http://nex-3.com/posts/89-powerful-color-manipulation-with-Sass\" target=\"_blank\" rel=\"external\">这篇很详细的介绍</a></p>\n<h3 id=\"条件语句与控制\"><a href=\"#条件语句与控制\" class=\"headerlink\" title=\"条件语句与控制\"></a>条件语句与控制</h3><p>这的确是一个很好用的功能，也是另一个Less不支持的功能，你可以使用if {} else {} 条件语句，for {} 循环。他甚至支持and、or和not，以及&lt; , &gt; , &gt;= , &lt;= 和 == 等操作符</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">/* Sample Sass &quot;if&quot; statement */</span><br><span class=\"line\">@if lightness($color) &amp;gt; 30% &#123;</span><br><span class=\"line\">    backgroung-color: #000;</span><br><span class=\"line\">&#125; @else &#123;</span><br><span class=\"line\">    background-color: #fff;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">/* Sample Sass &quot;for&quot; loop */</span><br><span class=\"line\">@for $i from 1px to 10px &#123;</span><br><span class=\"line\">    .border-#&#123;i&#125; &#123;</span><br><span class=\"line\">        border: $i solid blue;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"命名空间\"><a href=\"#命名空间\" class=\"headerlink\" title=\"命名空间\"></a>命名空间</h3><p>命名空间可以有效的组织我们的Css，我们可以将一些公用的样式分组，然后在用的时候直接使用。例如，我们创建了一个名为default的样式分组，那我们就可以在用到的时候直接从该组中调用。</p>\n<figure class=\"highlight less\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.nav_list</span>() &#123;</span><br><span class=\"line\">  <span class=\"attribute\">list-style </span>: none;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">padding</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.button</span>()&#123; ... &#125;</span><br><span class=\"line\"><span class=\"selector-class\">.quote</span>()&#123; ... &#125;</span><br></pre></td></tr></table></figure>\n<p>然后，在我们的代码中，如果我们正好在一个nav元素中使用了ul元素，那么我们就会想到我们需要default的样式，然后我们就可以简单的调用它，他就会被直接使用</p>\n<p>nav ul {</p>\n<p>  #defaults &gt; .nav_list;<br>}</p>\n<h3 id=\"作用域\"><a href=\"#作用域\" class=\"headerlink\" title=\"作用域\"></a>作用域</h3><p>作用域是编程中的标配，LESS中也是。如果你在你的样式表的root级声明一个变量，他在整个文档中都是可以使用的。然而，如果你在一个选择器，比如ID或者CLASS中，重新定义了这个变量，那么，他就只能在这个选择器中可用了。</p>\n<figure class=\"highlight less\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">@color:</span> <span class=\"number\">#00c</span>; <span class=\"comment\">/* 蓝色 */</span></span><br><span class=\"line\"><span class=\"selector-id\">#header</span> &#123;</span><br><span class=\"line\">  <span class=\"variable\">@color:</span> <span class=\"number\">#c00</span>; <span class=\"comment\">/* 红色 */</span></span><br><span class=\"line\">  <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid <span class=\"variable\">@color</span>; <span class=\"comment\">/* 红色边框 */</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-id\">#footer</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid <span class=\"variable\">@color</span>; <span class=\"comment\">/* 蓝色边框 */</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"注释\"><a href=\"#注释\" class=\"headerlink\" title=\"注释\"></a>注释</h3><p>这一部分比较基础，Less允许两种注释的写法<code>//注释</code>和 <code>/* 注释 */</code></p>\n<h3 id=\"导入\"><a href=\"#导入\" class=\"headerlink\" title=\"导入\"></a>导入</h3><p>标准的<code>@import: &#39;classes.less&#39;</code> 如果你想要引入其他的LESS文件，那么文件的拓展名是可选的，所以@import ‘classes’ ;也是可行的。如果你想要导入一些无需less处理的内容，你可以使用.css后缀</p>\n<h3 id=\"字符串插入\"><a href=\"#字符串插入\" class=\"headerlink\" title=\"字符串插入\"></a>字符串插入</h3><p>字符串也是可以用于变量中的，然后通过 <code>@{name}</code> 来调用</p>\n<figure class=\"highlight less\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">@base_url:</span> <span class=\"string\">'http://www.ddd.com'</span></span><br><span class=\"line\"><span class=\"attribute\">background-image</span>: url(<span class=\"string\">\"@&#123;base_url&#125;/images/background.png\"</span>);</span><br></pre></td></tr></table></figure>\n<h3 id=\"转义-Escaping\"><a href=\"#转义-Escaping\" class=\"headerlink\" title=\"转义(Escaping)\"></a>转义(Escaping)</h3><p>我们通常需要引入一个css中非法或者less无法识别的值，通常一些IE的hack，要避免抛出异常并破坏Less，你需要避开他们</p>\n<figure class=\"highlight less\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.class</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">filter</span>: <span class=\"string\">~\"progid:DXImageTransform.Microsoft.Alpha(opacity=20)\"</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/* 实际上将会输出下面的代码 */</span></span><br><span class=\"line\"><span class=\"selector-class\">.class</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">filter</span>:<span class=\"attribute\">progid</span>:DXImageTransform.Microft.Alpha(opacity=<span class=\"number\">20</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Javascript-赋值\"><a href=\"#Javascript-赋值\" class=\"headerlink\" title=\"Javascript 赋值\"></a>Javascript 赋值</h3><p>在样式表中使用Javascript：</p>\n<figure class=\"highlight less\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">@string:</span> <span class=\"built_in\">`'howdy'.toUpperCase()`</span>; <span class=\"comment\">/* @string 变成 HOWDY */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 你也可以使用前面提到的值 */</span></span><br><span class=\"line\"><span class=\"variable\">@string:</span> <span class=\"string\">'howdy'</span>;</span><br><span class=\"line\"><span class=\"variable\">@var:</span> <span class=\"built_in\">~`'@&#123;string&#125;'.toUpperCase()`</span>; <span class=\"comment\">/* 变为 HOWDY */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 获取文档的信息 */</span></span><br><span class=\"line\"><span class=\"variable\">@heigh</span> = <span class=\"built_in\">`document.body.clientHeight`</span>;</span><br></pre></td></tr></table></figure>\n<h3 id=\"输出格式\"><a href=\"#输出格式\" class=\"headerlink\" title=\"输出格式\"></a>输出格式</h3><p>然而Less并没有输出设置，而Sass中提供四种选项：nested，compact，compressed 和 expanded</p>\n<p><a href=\"http://blog.jobbole.com/24671/\" target=\"_blank\" rel=\"external\">http://blog.jobbole.com/24671/</a></p>\n","excerpt":"","more":"<h1 id=\"Less与Sass解析\"><a href=\"#Less与Sass解析\" class=\"headerlink\" title=\"Less与Sass解析\"></a>Less与Sass解析</h1><p>  首先我们要明确一个观点，尽管Less和Sass语法上有一些共性，但是Less !== Sass。当我们构建一个网站的时候，<br>我们可能会需要调色板这个功能，即拥有提供固定的可选择样式，避免样式跳跃过大。这个时候我们就用到了Less和Sass，<br>事实证明，他们的功能要比这个多得多。</p>\n<h3 id=\"Less-和-Sass-语法共性\"><a href=\"#Less-和-Sass-语法共性\" class=\"headerlink\" title=\"Less 和 Sass 语法共性\"></a>Less 和 Sass 语法共性</h3><p>1.混入（Minxins）—— class中的class<br>2.参数混入 —— 可以传递参数的class<br>3.嵌套规则 —— Class中嵌套class，从而较少重复的代码<br>4.运算 —— CSS中用上数学<br>5.颜色功能 —— 可编辑颜色<br>6.命名空间（namespace） —— 分组样式<br>7.作用域 —— 局部修改样式<br>8.JavaScript赋值 - 在CSS中使用JavaScript表达式赋值</p>\n<p>Less和Sass的主要不同就是他们的实现方式，Less是基于JavaScript，所以是在客户端处理。而<br>Sass是基于Ruby在服务器端处理的。很多开发者不会选择Less因为JavaScript引擎需要额外的时<br>间来处理代码然后输出修改过的CSS到浏览器。关于这个有很多种方式，我选择的是只在开发环节使用<br>LESS，一旦我完成开发，就复制然后粘贴Less输出的到一个压缩器，然后到一个独立的CSS文件来替代<br>Less文件。另外，我选择使用LESS.app来编译和压缩Less文件。两个选择都将最小化你的样式输出，<br>从而避免由于用户的浏览器不支持JavaScript而可能引起的任何问题。</p>\n<h1 id=\"Less-Is-More\"><a href=\"#Less-Is-More\" class=\"headerlink\" title=\"Less Is More\"></a>Less Is More</h1><h2 id=\"Sass-安装\"><a href=\"#Sass-安装\" class=\"headerlink\" title=\"Sass 安装\"></a>Sass 安装</h2><h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><p>  如果已经安装好了Ruby，接着在命令行下输入</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">gem install sass</span><br></pre></td></tr></table></figure>\n<h3 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h3><p>  将Sass文件(.sass)转化为<code>css</code>代码</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">sass test.scss</span><br></pre></td></tr></table></figure>\n<p>  如果要将显示结果保存成未见，后面再跟一个<code>.css</code>文件名</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">sass test.scss test.css</span><br></pre></td></tr></table></figure>\n<p>  Sass 提供四个编译风格选项：</p>\n<p>  1.nested : 嵌套缩进的css代码，他是默认值<br>  2.expanded : 没有缩进的、拓展css代码<br>  3.compact : 简洁格式的css代码<br>  4.compressed : 压缩后的css代码</p>\n<p>  在生产环境当中，一般使用最后一个选项</p>\n<p>  sass –style compressed test.sass test.css</p>\n<p>  也可以让sass监听某人文件或目录，一旦源文件有变化，就自动生成编译后的文件<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">  //watch a filter</span><br><span class=\"line\">  sass --watch input.scss:output.css</span><br><span class=\"line\"></span><br><span class=\"line\">  //watch a directory</span><br><span class=\"line\">  sass --watch app/sass:public/stylesheets</span><br><span class=\"line\"></span><br><span class=\"line\">```  </span><br><span class=\"line\">## Less 安装</span><br><span class=\"line\"></span><br><span class=\"line\">在项目中引入less.js</span><br><span class=\"line\"></span><br><span class=\"line\">1.下载less.js</span><br><span class=\"line\">2.创建一个文件来存放Less代码，如style.less</span><br><span class=\"line\">3.添加以下代码到你的HTML的&lt;head&gt;中</span><br><span class=\"line\"></span><br><span class=\"line\">```HTML</span><br><span class=\"line\">&lt;link rel=&quot;stylesheet/less&quot; type=&quot;text/css&quot; href=&quot;styles.less&quot;&gt;</span><br><span class=\"line\">&lt;script src=&quot;less.js&quot; type=&quot;text/javascript&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure></p>\n<p>其实也有一个<a href=\"http://lesscss.org/#-server-side-usage\">服务器端的less版本</a>，在服务器上安装Less的最简单的办法就是使用<a href=\"https://github.com/npm/npm\">Node Package</a>Messager (NPM 一看 就知道是基于NodeJS的)</p>\n<h2 id=\"相同和不同\"><a href=\"#相同和不同\" class=\"headerlink\" title=\"相同和不同\"></a>相同和不同</h2><h3 id=\"变量\"><a href=\"#变量\" class=\"headerlink\" title=\"变量\"></a>变量</h3><pre><code>If you are developer,variables will be your best friend\n</code></pre><p>我们可以将能重复使用到的值（本案例里是color）设置成变量，这样就可以避免重复的定义，减少很大的工作量</p>\n<figure class=\"highlight less\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">@blue :</span> <span class=\"number\">#00c</span>;</span><br><span class=\"line\"><span class=\"variable\">@light_blue :</span> <span class=\"variable\">@blue</span> + <span class=\"number\">#333</span>;</span><br><span class=\"line\"><span class=\"variable\">@dark_blue :</span> <span class=\"variable\">@blue</span> - <span class=\"number\">333</span>;</span><br></pre></td></tr></table></figure>\n<p>他们看起来：</p>\n<p>关于变量 Less和Sass的唯一区别就是 Less使用<code>@</code> 而 Sass 使用<code>$</code>.同时还有一些作用域上的差别，我们之后会提到</p>\n<h3 id=\"混入-mixin\"><a href=\"#混入-mixin\" class=\"headerlink\" title=\"混入(mixin)\"></a>混入(mixin)</h3><p>有些时候我们会创建一些在样式表中重复使用的样式规则，通常会使用<br><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"border article\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>这种方式引用多种样式，但是有了less 我们可以</p>\n<figure class=\"highlight less\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.border</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">border-top </span>: <span class=\"number\">1px</span> dotted <span class=\"number\">#333</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">article</span><span class=\"selector-class\">.post</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>:<span class=\"number\">#333</span>;</span><br><span class=\"line\">  <span class=\"selector-class\">.border</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">ul</span><span class=\"selector-class\">.menu</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>:<span class=\"number\">#ccc</span>;</span><br><span class=\"line\">  <span class=\"selector-class\">.border</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>下面是在两个元素中分别添加<code>.border</code> 同样的效果，而且仅仅在样式变中就完成了</p>\n<p>在Sass中，我们需要在样式规则前添加<code>@minxin</code>声明,然后通过<code>@include</code>来调用它</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">@mixin border &#123;</span><br><span class=\"line\">  border-top:1px dotted #333;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">article.post &#123;</span><br><span class=\"line\">  background : #eee;</span><br><span class=\"line\">  @include border;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">ui.menu &#123;</span><br><span class=\"line\">  background:#ccc;</span><br><span class=\"line\">  @include border;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"参数混入\"><a href=\"#参数混入\" class=\"headerlink\" title=\"参数混入\"></a>参数混入</h3><p>使用Less或Sass，我们可以使用函数处理Css中多余的工作。最好的例子就是我们正在经历的从Css2到css3的过渡过程中很多浏览器的私有前缀。Nettuts+有一篇Jeffrey Way写的<a href=\"http://code.tutsplus.com/tutorials/quick-tip-never-type-a-vendor-prefix-again--net-17589\">文章</a><br>内容是包含参数的文件，他们可以附带大多数浏览器私有前缀Css3属性</p>\n<figure class=\"highlight less\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.border-radius</span>( <span class=\"variable\">@radius</span>:<span class=\"number\">3px</span> )&#123;</span><br><span class=\"line\">  <span class=\"attribute\">-webkit-border-radius </span>: <span class=\"variable\">@radius</span>;</span><br><span class=\"line\">  <span class=\"attribute\">-moz-border-radius </span>: <span class=\"variable\">@radius</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border-radius </span>: <span class=\"variable\">@radius</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Sess的语法很像Less，只是只用$声明变量，然后使用前面提到的<code>@minxin</code> 和 <code>@include</code>来调用</p>\n<h3 id=\"选择器继承\"><a href=\"#选择器继承\" class=\"headerlink\" title=\"选择器继承\"></a>选择器继承</h3><p>  Less并没有提供这个功能，通过这个功能，你可以讲一个选择器附加到已经预先定义的选择器上，而无需在使用逗号<br>  将两者分开:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">.menu &#123;</span><br><span class=\"line\">  border:1px solid #ddd;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">.footer &#123;</span><br><span class=\"line\">  @extend .menu;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">/* 上面的写法等同于 */</span><br><span class=\"line\">.menu,.footer &#123;</span><br><span class=\"line\">  border:1px solid #ddd;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"嵌套规则\"><a href=\"#嵌套规则\" class=\"headerlink\" title=\"嵌套规则\"></a>嵌套规则</h3><p>在Css中嵌套Class和ID是避免你的样式干扰或者被别的样式干扰的唯一方法，但这样会非常凌乱。使用一个类似于<code>#site-body.post.postheader h2</code>的选择器毫无吸引力，使用Less，你可以嵌套Id、class及标签:</p>\n<figure class=\"highlight less\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-id\">#site-body</span>&#123;</span><br><span class=\"line\">  <span class=\"selector-class\">.post</span> &#123;</span><br><span class=\"line\">    <span class=\"selector-class\">.post-header</span> &#123;</span><br><span class=\"line\">      <span class=\"selector-tag\">h2</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"selector-tag\">a</span> &#123;</span><br><span class=\"line\">        <span class=\"selector-tag\">&amp;</span><span class=\"selector-tag\">amp</span>;<span class=\"selector-pseudo\">:visited</span> &#123; ... &#125;</span><br><span class=\"line\">        <span class=\"selector-tag\">&amp;</span><span class=\"selector-tag\">amp</span>;<span class=\"selector-pseudo\">:hover</span> &#123; ... &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面的代码最终和上面的例子（长长的选择器）的效果一样，但是更容易阅读和理解</p>\n<h3 id=\"运算\"><a href=\"#运算\" class=\"headerlink\" title=\"运算\"></a>运算</h3><p>在css中使用数字或变量来实现数学之美</p>\n<figure class=\"highlight less\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">@base_margin:</span> <span class=\"number\">10px</span>;</span><br><span class=\"line\"><span class=\"variable\">@double_margin:</span> <span class=\"variable\">@base_margin</span> * <span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"variable\">@full_page:</span> <span class=\"number\">960px</span>;</span><br><span class=\"line\"><span class=\"variable\">@half_page:</span> <span class=\"variable\">@full_page</span> / <span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"variable\">@quarter_page:</span> (<span class=\"variable\">@full_page</span> / <span class=\"number\">2</span>) / <span class=\"number\">2</span>;</span><br></pre></td></tr></table></figure>\n<p>Sass 在对数字的处理上更加专业，让已经可以换算单位了，Sass可以处理无法识别的度量单位并将其输出，这个特性明显是一个对未来的尝试 —— 证明W3C做出的一些改变</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">/* Sass */</span><br><span class=\"line\">2in + 3cm + 2pc = 3.514in</span><br><span class=\"line\"></span><br><span class=\"line\">/* Less */</span><br><span class=\"line\">2in + 3cm + 2pc = ERROR!</span><br></pre></td></tr></table></figure>\n<h3 id=\"Color-函数\"><a href=\"#Color-函数\" class=\"headerlink\" title=\"Color 函数\"></a>Color 函数</h3><p>在文章开头的时候我们提到了调色板，对此贡献最大的一部分就是颜色函数。加入你用一个标准的蓝色贯穿到你的样式中，然后你想在表单中用这个蓝色来做一个渐变的按钮。你可以打开PS或者其他编辑器来获取一个比蓝色浅的或者比较暗的HFX色值来作为渐变色，或者，你可以使用Less中的颜色函数</p>\n<figure class=\"highlight less\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">@blue:</span> <span class=\"number\">#369</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.submit</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">padding</span>:<span class=\"number\">5px</span> <span class=\"number\">10px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border</span>:<span class=\"number\">1px</span> solid <span class=\"variable\">@blue</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: -moz-linear-gradient(top, lighten(<span class=\"variable\">@blue</span>, <span class=\"number\">10%</span>), <span class=\"variable\">@blue</span> <span class=\"number\">100%</span>); <span class=\"comment\">/*Moz*/</span></span><br><span class=\"line\">\t<span class=\"attribute\">background</span>: -webkit-gradient(linear, center top, center bottom, from(lighten(<span class=\"variable\">@blue</span>, <span class=\"number\">10%</span>)), color-stop(<span class=\"number\">100%</span>, <span class=\"variable\">@blue</span>)); <span class=\"comment\">/*Webkit*/</span></span><br><span class=\"line\">\t<span class=\"attribute\">background</span>: -o-linear-gradient(top, lighten(<span class=\"variable\">@blue</span>, <span class=\"number\">10%</span>) <span class=\"number\">0%</span>, <span class=\"variable\">@blue</span> <span class=\"number\">100%</span>); <span class=\"comment\">/*Opera*/</span></span><br><span class=\"line\">\t<span class=\"attribute\">background</span>: -ms-linear-gradient(top, lighten(<span class=\"variable\">@blue</span>, <span class=\"number\">10%</span>) <span class=\"number\">0%</span>, <span class=\"variable\">@blue</span> <span class=\"number\">100%</span>); <span class=\"comment\">/*IE 10+*/</span></span><br><span class=\"line\">\t<span class=\"attribute\">background</span>: linear-gradient(top, lighten(<span class=\"variable\">@blue</span>, <span class=\"number\">10%</span>) <span class=\"number\">0%</span>, <span class=\"variable\">@blue</span> <span class=\"number\">100%</span>); <span class=\"comment\">/*W3C*/</span></span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#fff</span>;</span><br><span class=\"line\">  <span class=\"attribute\">text-shadow</span>: <span class=\"number\">0</span> -<span class=\"number\">1px</span> <span class=\"number\">1px</span> rgba(<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0.4</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>lighten函数明显就是用百分比值来减轻颜色，在这个例子中，他将减轻这个基础的蓝色的10%。这种方法可以让我们变阿华的元素或者其他任何元素的颜色值 —— 只是简单的改变基础颜色而已，这对于主题（模板）来说非常有用。而且，如果你使用参数功能，像上面提到的，你还可以更简单的应用到一些浏览器的私有前缀的生命中，如：<br><figure class=\"highlight less\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.linear-gradient</span>(lighten(<span class=\"variable\">@blue</span>),<span class=\"variable\">@blue</span>,<span class=\"number\">100%</span>)</span><br></pre></td></tr></table></figure></p>\n<p>最终效果的确很赞</p>\n<p>Sass 貌似与更多的选项，如果你想了解更多，可以看一些<a href=\"http://nex-3.com/posts/89-powerful-color-manipulation-with-Sass\">这篇很详细的介绍</a></p>\n<h3 id=\"条件语句与控制\"><a href=\"#条件语句与控制\" class=\"headerlink\" title=\"条件语句与控制\"></a>条件语句与控制</h3><p>这的确是一个很好用的功能，也是另一个Less不支持的功能，你可以使用if {} else {} 条件语句，for {} 循环。他甚至支持and、or和not，以及&lt; , &gt; , &gt;= , &lt;= 和 == 等操作符</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">/* Sample Sass &quot;if&quot; statement */</span><br><span class=\"line\">@if lightness($color) &amp;gt; 30% &#123;</span><br><span class=\"line\">    backgroung-color: #000;</span><br><span class=\"line\">&#125; @else &#123;</span><br><span class=\"line\">    background-color: #fff;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">/* Sample Sass &quot;for&quot; loop */</span><br><span class=\"line\">@for $i from 1px to 10px &#123;</span><br><span class=\"line\">    .border-#&#123;i&#125; &#123;</span><br><span class=\"line\">        border: $i solid blue;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"命名空间\"><a href=\"#命名空间\" class=\"headerlink\" title=\"命名空间\"></a>命名空间</h3><p>命名空间可以有效的组织我们的Css，我们可以将一些公用的样式分组，然后在用的时候直接使用。例如，我们创建了一个名为default的样式分组，那我们就可以在用到的时候直接从该组中调用。</p>\n<figure class=\"highlight less\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.nav_list</span>() &#123;</span><br><span class=\"line\">  <span class=\"attribute\">list-style </span>: none;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">padding</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.button</span>()&#123; ... &#125;</span><br><span class=\"line\"><span class=\"selector-class\">.quote</span>()&#123; ... &#125;</span><br></pre></td></tr></table></figure>\n<p>然后，在我们的代码中，如果我们正好在一个nav元素中使用了ul元素，那么我们就会想到我们需要default的样式，然后我们就可以简单的调用它，他就会被直接使用</p>\n<p>nav ul {</p>\n<p>  #defaults &gt; .nav_list;<br>}</p>\n<h3 id=\"作用域\"><a href=\"#作用域\" class=\"headerlink\" title=\"作用域\"></a>作用域</h3><p>作用域是编程中的标配，LESS中也是。如果你在你的样式表的root级声明一个变量，他在整个文档中都是可以使用的。然而，如果你在一个选择器，比如ID或者CLASS中，重新定义了这个变量，那么，他就只能在这个选择器中可用了。</p>\n<figure class=\"highlight less\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">@color:</span> <span class=\"number\">#00c</span>; <span class=\"comment\">/* 蓝色 */</span></span><br><span class=\"line\"><span class=\"selector-id\">#header</span> &#123;</span><br><span class=\"line\">  <span class=\"variable\">@color:</span> <span class=\"number\">#c00</span>; <span class=\"comment\">/* 红色 */</span></span><br><span class=\"line\">  <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid <span class=\"variable\">@color</span>; <span class=\"comment\">/* 红色边框 */</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-id\">#footer</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid <span class=\"variable\">@color</span>; <span class=\"comment\">/* 蓝色边框 */</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"注释\"><a href=\"#注释\" class=\"headerlink\" title=\"注释\"></a>注释</h3><p>这一部分比较基础，Less允许两种注释的写法<code>//注释</code>和 <code>/* 注释 */</code></p>\n<h3 id=\"导入\"><a href=\"#导入\" class=\"headerlink\" title=\"导入\"></a>导入</h3><p>标准的<code>@import: &#39;classes.less&#39;</code> 如果你想要引入其他的LESS文件，那么文件的拓展名是可选的，所以@import ‘classes’ ;也是可行的。如果你想要导入一些无需less处理的内容，你可以使用.css后缀</p>\n<h3 id=\"字符串插入\"><a href=\"#字符串插入\" class=\"headerlink\" title=\"字符串插入\"></a>字符串插入</h3><p>字符串也是可以用于变量中的，然后通过 <code>@{name}</code> 来调用</p>\n<figure class=\"highlight less\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">@base_url:</span> <span class=\"string\">'http://www.ddd.com'</span></span><br><span class=\"line\"><span class=\"attribute\">background-image</span>: url(<span class=\"string\">\"@&#123;base_url&#125;/images/background.png\"</span>);</span><br></pre></td></tr></table></figure>\n<h3 id=\"转义-Escaping\"><a href=\"#转义-Escaping\" class=\"headerlink\" title=\"转义(Escaping)\"></a>转义(Escaping)</h3><p>我们通常需要引入一个css中非法或者less无法识别的值，通常一些IE的hack，要避免抛出异常并破坏Less，你需要避开他们</p>\n<figure class=\"highlight less\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.class</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">filter</span>: <span class=\"string\">~\"progid:DXImageTransform.Microsoft.Alpha(opacity=20)\"</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/* 实际上将会输出下面的代码 */</span></span><br><span class=\"line\"><span class=\"selector-class\">.class</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">filter</span>:<span class=\"attribute\">progid</span>:DXImageTransform.Microft.Alpha(opacity=<span class=\"number\">20</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Javascript-赋值\"><a href=\"#Javascript-赋值\" class=\"headerlink\" title=\"Javascript 赋值\"></a>Javascript 赋值</h3><p>在样式表中使用Javascript：</p>\n<figure class=\"highlight less\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">@string:</span> <span class=\"built_in\">`'howdy'.toUpperCase()`</span>; <span class=\"comment\">/* @string 变成 HOWDY */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 你也可以使用前面提到的值 */</span></span><br><span class=\"line\"><span class=\"variable\">@string:</span> <span class=\"string\">'howdy'</span>;</span><br><span class=\"line\"><span class=\"variable\">@var:</span> <span class=\"built_in\">~`'@&#123;string&#125;'.toUpperCase()`</span>; <span class=\"comment\">/* 变为 HOWDY */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 获取文档的信息 */</span></span><br><span class=\"line\"><span class=\"variable\">@heigh</span> = <span class=\"built_in\">`document.body.clientHeight`</span>;</span><br></pre></td></tr></table></figure>\n<h3 id=\"输出格式\"><a href=\"#输出格式\" class=\"headerlink\" title=\"输出格式\"></a>输出格式</h3><p>然而Less并没有输出设置，而Sass中提供四种选项：nested，compact，compressed 和 expanded</p>\n<p><a href=\"http://blog.jobbole.com/24671/\">http://blog.jobbole.com/24671/</a></p>\n"},{"layout":"keynote","title":"MQTT Agreement Basics","subtitle":"Keynote: MQTT Agreement Basics","iframe":null,"date":"2016-06-16T16:00:00.000Z","author":"","header-img":"post-bg-js-version.jpg","_content":"# MQTT 协议 理论篇\n\nMQTT(Message Queuing Telemetry Transport,消息队列遥测传输) 是IBM开发的一个及时通讯协议，有可能成为物联网的重要组成部分。该协议支持所有平台，几乎可以把所有联网物品和外部链接起来，被用来当做传感器和制动器\n\n## MQTT 特点\n\nMQTT 协议是为了大量计算能力有限，且工作在低带宽、不可靠订单网络的远程传感器和控制设备通讯而设计的协议，它具有以下主要特征：\n\n1.使用发布/订阅消息模式，提供一对多的消息发布，解除应用程序耦合（这一点类似XMPP，但是MQTT的信息冗余远小于XMPP，因为XMPP使用的是XML这种格式来传输数据）\n\n2.对负载内容屏蔽的消息传输\n\n3.使用 TCP/IP 提供网络连接，主流的MQTT是基于TCP连接进行数据推送的，但是同样有基于UDP的版本，叫做MQTT-SN。这两种版本由于基于不同的链接方式，优缺点自然也就各有不同了。\n\n4.有三种消息发布服务质量：\n\n#### “至多一次”\n\n消息发布完全依赖底层 TCP/IP 网络，会发生消息流失或重复。这一级别可用于如下情况，环境传感器数据，丢失一次读记录无所谓，因为不久后还会有二次发送\n\n#### 至少一次\n\n确保消息到达，但是消息重复可能会发生\n\n#### 只有一次\n\n确保消息到达一次。这一级别可用于如下情况，在计费系统中，消息重复或丢失会导致不正确的结果。这种高质量的消息发布服务还可以用于即时通讯类的APP的推送，确保用户收到且只收到一次。\n\n5.小型传输，开销很小（固定长度的头部是2字节）协议交换最小化，以降低网络流量。\n\n6.使用 Last Will 和 Testament 特性通知有关各方客户端异常中断的机制\n\nLast Will：即遗言机制，用于通知同一主题下的其他的设备发送遗言的设备以及断开了链接\n\nTestament：遗嘱机制，功能类似 Last Will\n\n# MQTT 连接 心跳 确认 断开\n\n## CONNECT\n\n正如前面说，MQTT有关字符串部分采用的修改版UTF-8编码，CONNECT可变头部中协议名称、消息体都是采用修改版的UTF-8编码。前面基本上可变头部内容不多。\n","source":"_posts/MQTT Agreement Basics.markdown","raw":"---\nlayout:     keynote\ntitle:      \"MQTT Agreement Basics\"\nsubtitle:   \"Keynote: MQTT Agreement Basics\"\niframe:     \ndate:       2016-06-17\nauthor:     \"\"\nheader-img: \"post-bg-js-version.jpg\"\ntags:\n    - Java\n    - 推送\n---\n# MQTT 协议 理论篇\n\nMQTT(Message Queuing Telemetry Transport,消息队列遥测传输) 是IBM开发的一个及时通讯协议，有可能成为物联网的重要组成部分。该协议支持所有平台，几乎可以把所有联网物品和外部链接起来，被用来当做传感器和制动器\n\n## MQTT 特点\n\nMQTT 协议是为了大量计算能力有限，且工作在低带宽、不可靠订单网络的远程传感器和控制设备通讯而设计的协议，它具有以下主要特征：\n\n1.使用发布/订阅消息模式，提供一对多的消息发布，解除应用程序耦合（这一点类似XMPP，但是MQTT的信息冗余远小于XMPP，因为XMPP使用的是XML这种格式来传输数据）\n\n2.对负载内容屏蔽的消息传输\n\n3.使用 TCP/IP 提供网络连接，主流的MQTT是基于TCP连接进行数据推送的，但是同样有基于UDP的版本，叫做MQTT-SN。这两种版本由于基于不同的链接方式，优缺点自然也就各有不同了。\n\n4.有三种消息发布服务质量：\n\n#### “至多一次”\n\n消息发布完全依赖底层 TCP/IP 网络，会发生消息流失或重复。这一级别可用于如下情况，环境传感器数据，丢失一次读记录无所谓，因为不久后还会有二次发送\n\n#### 至少一次\n\n确保消息到达，但是消息重复可能会发生\n\n#### 只有一次\n\n确保消息到达一次。这一级别可用于如下情况，在计费系统中，消息重复或丢失会导致不正确的结果。这种高质量的消息发布服务还可以用于即时通讯类的APP的推送，确保用户收到且只收到一次。\n\n5.小型传输，开销很小（固定长度的头部是2字节）协议交换最小化，以降低网络流量。\n\n6.使用 Last Will 和 Testament 特性通知有关各方客户端异常中断的机制\n\nLast Will：即遗言机制，用于通知同一主题下的其他的设备发送遗言的设备以及断开了链接\n\nTestament：遗嘱机制，功能类似 Last Will\n\n# MQTT 连接 心跳 确认 断开\n\n## CONNECT\n\n正如前面说，MQTT有关字符串部分采用的修改版UTF-8编码，CONNECT可变头部中协议名称、消息体都是采用修改版的UTF-8编码。前面基本上可变头部内容不多。\n","slug":"MQTT Agreement Basics","published":1,"updated":"2016-06-20T01:50:53.197Z","comments":1,"photos":[],"link":"","_id":"cipnd971c000cyww74lw9yr5c","content":"<h1 id=\"MQTT-协议-理论篇\"><a href=\"#MQTT-协议-理论篇\" class=\"headerlink\" title=\"MQTT 协议 理论篇\"></a>MQTT 协议 理论篇</h1><p>MQTT(Message Queuing Telemetry Transport,消息队列遥测传输) 是IBM开发的一个及时通讯协议，有可能成为物联网的重要组成部分。该协议支持所有平台，几乎可以把所有联网物品和外部链接起来，被用来当做传感器和制动器</p>\n<h2 id=\"MQTT-特点\"><a href=\"#MQTT-特点\" class=\"headerlink\" title=\"MQTT 特点\"></a>MQTT 特点</h2><p>MQTT 协议是为了大量计算能力有限，且工作在低带宽、不可靠订单网络的远程传感器和控制设备通讯而设计的协议，它具有以下主要特征：</p>\n<p>1.使用发布/订阅消息模式，提供一对多的消息发布，解除应用程序耦合（这一点类似XMPP，但是MQTT的信息冗余远小于XMPP，因为XMPP使用的是XML这种格式来传输数据）</p>\n<p>2.对负载内容屏蔽的消息传输</p>\n<p>3.使用 TCP/IP 提供网络连接，主流的MQTT是基于TCP连接进行数据推送的，但是同样有基于UDP的版本，叫做MQTT-SN。这两种版本由于基于不同的链接方式，优缺点自然也就各有不同了。</p>\n<p>4.有三种消息发布服务质量：</p>\n<h4 id=\"“至多一次”\"><a href=\"#“至多一次”\" class=\"headerlink\" title=\"“至多一次”\"></a>“至多一次”</h4><p>消息发布完全依赖底层 TCP/IP 网络，会发生消息流失或重复。这一级别可用于如下情况，环境传感器数据，丢失一次读记录无所谓，因为不久后还会有二次发送</p>\n<h4 id=\"至少一次\"><a href=\"#至少一次\" class=\"headerlink\" title=\"至少一次\"></a>至少一次</h4><p>确保消息到达，但是消息重复可能会发生</p>\n<h4 id=\"只有一次\"><a href=\"#只有一次\" class=\"headerlink\" title=\"只有一次\"></a>只有一次</h4><p>确保消息到达一次。这一级别可用于如下情况，在计费系统中，消息重复或丢失会导致不正确的结果。这种高质量的消息发布服务还可以用于即时通讯类的APP的推送，确保用户收到且只收到一次。</p>\n<p>5.小型传输，开销很小（固定长度的头部是2字节）协议交换最小化，以降低网络流量。</p>\n<p>6.使用 Last Will 和 Testament 特性通知有关各方客户端异常中断的机制</p>\n<p>Last Will：即遗言机制，用于通知同一主题下的其他的设备发送遗言的设备以及断开了链接</p>\n<p>Testament：遗嘱机制，功能类似 Last Will</p>\n<h1 id=\"MQTT-连接-心跳-确认-断开\"><a href=\"#MQTT-连接-心跳-确认-断开\" class=\"headerlink\" title=\"MQTT 连接 心跳 确认 断开\"></a>MQTT 连接 心跳 确认 断开</h1><h2 id=\"CONNECT\"><a href=\"#CONNECT\" class=\"headerlink\" title=\"CONNECT\"></a>CONNECT</h2><p>正如前面说，MQTT有关字符串部分采用的修改版UTF-8编码，CONNECT可变头部中协议名称、消息体都是采用修改版的UTF-8编码。前面基本上可变头部内容不多。</p>\n","excerpt":"","more":"<h1 id=\"MQTT-协议-理论篇\"><a href=\"#MQTT-协议-理论篇\" class=\"headerlink\" title=\"MQTT 协议 理论篇\"></a>MQTT 协议 理论篇</h1><p>MQTT(Message Queuing Telemetry Transport,消息队列遥测传输) 是IBM开发的一个及时通讯协议，有可能成为物联网的重要组成部分。该协议支持所有平台，几乎可以把所有联网物品和外部链接起来，被用来当做传感器和制动器</p>\n<h2 id=\"MQTT-特点\"><a href=\"#MQTT-特点\" class=\"headerlink\" title=\"MQTT 特点\"></a>MQTT 特点</h2><p>MQTT 协议是为了大量计算能力有限，且工作在低带宽、不可靠订单网络的远程传感器和控制设备通讯而设计的协议，它具有以下主要特征：</p>\n<p>1.使用发布/订阅消息模式，提供一对多的消息发布，解除应用程序耦合（这一点类似XMPP，但是MQTT的信息冗余远小于XMPP，因为XMPP使用的是XML这种格式来传输数据）</p>\n<p>2.对负载内容屏蔽的消息传输</p>\n<p>3.使用 TCP/IP 提供网络连接，主流的MQTT是基于TCP连接进行数据推送的，但是同样有基于UDP的版本，叫做MQTT-SN。这两种版本由于基于不同的链接方式，优缺点自然也就各有不同了。</p>\n<p>4.有三种消息发布服务质量：</p>\n<h4 id=\"“至多一次”\"><a href=\"#“至多一次”\" class=\"headerlink\" title=\"“至多一次”\"></a>“至多一次”</h4><p>消息发布完全依赖底层 TCP/IP 网络，会发生消息流失或重复。这一级别可用于如下情况，环境传感器数据，丢失一次读记录无所谓，因为不久后还会有二次发送</p>\n<h4 id=\"至少一次\"><a href=\"#至少一次\" class=\"headerlink\" title=\"至少一次\"></a>至少一次</h4><p>确保消息到达，但是消息重复可能会发生</p>\n<h4 id=\"只有一次\"><a href=\"#只有一次\" class=\"headerlink\" title=\"只有一次\"></a>只有一次</h4><p>确保消息到达一次。这一级别可用于如下情况，在计费系统中，消息重复或丢失会导致不正确的结果。这种高质量的消息发布服务还可以用于即时通讯类的APP的推送，确保用户收到且只收到一次。</p>\n<p>5.小型传输，开销很小（固定长度的头部是2字节）协议交换最小化，以降低网络流量。</p>\n<p>6.使用 Last Will 和 Testament 特性通知有关各方客户端异常中断的机制</p>\n<p>Last Will：即遗言机制，用于通知同一主题下的其他的设备发送遗言的设备以及断开了链接</p>\n<p>Testament：遗嘱机制，功能类似 Last Will</p>\n<h1 id=\"MQTT-连接-心跳-确认-断开\"><a href=\"#MQTT-连接-心跳-确认-断开\" class=\"headerlink\" title=\"MQTT 连接 心跳 确认 断开\"></a>MQTT 连接 心跳 确认 断开</h1><h2 id=\"CONNECT\"><a href=\"#CONNECT\" class=\"headerlink\" title=\"CONNECT\"></a>CONNECT</h2><p>正如前面说，MQTT有关字符串部分采用的修改版UTF-8编码，CONNECT可变头部中协议名称、消息体都是采用修改版的UTF-8编码。前面基本上可变头部内容不多。</p>\n"},{"layout":"keynote","title":"Transitioning from Server to Client Side Web Development with Angular 2","subtitle":"Keynote: JavaScript Modularization Journey","iframe":null,"date":"2016-06-16T16:00:00.000Z","author":"","header-img":"post-bg-js-version.jpg","_content":"# Transitioning from Server to Client Side Web Development with Angular 2\n\nOriginal:   http://angularshowcase.github.io/ng2-bootstrap-sbadmin/slides/20151110/assets/player/KeynoteDHTMLPlayer.html#0\n\n## Part 1:History\n\n### Brief history of Dynamic Web\n\n  - 1993 : Someone somewhere uses C to customize the HTML devlivered to a brower.Yahoo is born .Perl,ColdFusion,PHP(all via CGL) follow.\n\n  - 1996 : Iframes allow partial page to be loaded via parameterized URL.\n\n  - 1998 : HTML4/DHTML - JS manipulating DOM and dynamic style\n\n  - 2002 : XHR/Ajax opens door from \"single page apps\".\n\n  - 2006 : JS & CSS frameworks emerge,large apps become hard to maintain.\n\n  - 2010 : MVC(ExtJS,Angular) addresses separation of concerns.Unit testing and TDD emerges and grows.\n\n  - 2013 : Asm/WebAsm-based languages address JS shortcomings.\n\n  - 2015 : First frameworks written in type safe languages\n\n### Net Effect\n\n  - Web finally \"Just another native environment\".\n\n  - Server does not differentiate by client - Same REST everywhere,server not responsible for view.\n\n  - Web developers avoid politics of fragile server builds,work with tooling and workflows tuned to their productivity instead of some other team's\n\n  - Faster,more reliable web development due to build process and type safety.\n\n### Evolution to GUI\n\n\n\n\n## Part2: Generic Architecture\n\n---------------- Thin vs. Fat Client --------------------\n\n### Thin\n\n  - A thin client wholly relies on the server for client view management.\n\n  - A server session forms the context by which views progress\n\n  - Consider a six-page wizard:each view sequenced and sent by server.\n\n  - Network transaction boundary on every view change.\n\n  - Scaling is difficult with server-based sessions since a cluster node reboot drops the session and in-flight user work.Requires session replication,rerouting requests on the fly,etc.\n\n  - Fat(Standalone) client is one which only communicates changes to model.\n\n  - In out wizard example,user has expectation of losing data if their device reboots.Data that is submitted at end of wizard is data from every page.\n\n  - Network transaction boundary is on reads or writes to model.\n\n  - REST models CRUD via POST,PUT,GET,DELETE.Simple\n\n  - Scaling is simple,any server endpoint can accept transactional requests without reference to previous transactions.\n\n## Authentication (身份认证)\n\n - Transactional systems are always based on the credentials of a requesting principal.One can't unlock or start a vehicle without a key.The key is the credentials\n\n - Computers systems are not different.A credential identifies a transactional counterparty.\n\n - For a human,a credential might be a username and password.For inter-computer communication,we might use a public/private key pair.\n\n - In any case,we have to decide who is presenting a command before deciding what they can do.\n\n## Authorization (授权)\n\n - In the example of a vehicle,the key generally grants complete operational access to the vehicle.Some vehicles have \"valet keys\" with downgraded access\n\n - Such access levels delineate authorizations or permissions.\n\n - Now scale permissions to the level of 100k people in a large organization.Example:All members may be granted office access,but each to certain campuses.Only a few members may have access ti payroll,etc.There can easily be hundreds of thousands of permissions once CRUD aspects of each one are captured.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ns\n","source":"_posts/Transitioning from server to client side web development with angular2.markdown","raw":"---\nlayout:     keynote\ntitle:      \"Transitioning from Server to Client Side Web Development with Angular 2\"\nsubtitle:   \"Keynote: JavaScript Modularization Journey\"\niframe:     \ndate:       2016-06-17\nauthor:     \"\"\nheader-img: \"post-bg-js-version.jpg\"\ntags:\n    - 前端开发\n    - Angular2\n---\n# Transitioning from Server to Client Side Web Development with Angular 2\n\nOriginal:   http://angularshowcase.github.io/ng2-bootstrap-sbadmin/slides/20151110/assets/player/KeynoteDHTMLPlayer.html#0\n\n## Part 1:History\n\n### Brief history of Dynamic Web\n\n  - 1993 : Someone somewhere uses C to customize the HTML devlivered to a brower.Yahoo is born .Perl,ColdFusion,PHP(all via CGL) follow.\n\n  - 1996 : Iframes allow partial page to be loaded via parameterized URL.\n\n  - 1998 : HTML4/DHTML - JS manipulating DOM and dynamic style\n\n  - 2002 : XHR/Ajax opens door from \"single page apps\".\n\n  - 2006 : JS & CSS frameworks emerge,large apps become hard to maintain.\n\n  - 2010 : MVC(ExtJS,Angular) addresses separation of concerns.Unit testing and TDD emerges and grows.\n\n  - 2013 : Asm/WebAsm-based languages address JS shortcomings.\n\n  - 2015 : First frameworks written in type safe languages\n\n### Net Effect\n\n  - Web finally \"Just another native environment\".\n\n  - Server does not differentiate by client - Same REST everywhere,server not responsible for view.\n\n  - Web developers avoid politics of fragile server builds,work with tooling and workflows tuned to their productivity instead of some other team's\n\n  - Faster,more reliable web development due to build process and type safety.\n\n### Evolution to GUI\n\n\n\n\n## Part2: Generic Architecture\n\n---------------- Thin vs. Fat Client --------------------\n\n### Thin\n\n  - A thin client wholly relies on the server for client view management.\n\n  - A server session forms the context by which views progress\n\n  - Consider a six-page wizard:each view sequenced and sent by server.\n\n  - Network transaction boundary on every view change.\n\n  - Scaling is difficult with server-based sessions since a cluster node reboot drops the session and in-flight user work.Requires session replication,rerouting requests on the fly,etc.\n\n  - Fat(Standalone) client is one which only communicates changes to model.\n\n  - In out wizard example,user has expectation of losing data if their device reboots.Data that is submitted at end of wizard is data from every page.\n\n  - Network transaction boundary is on reads or writes to model.\n\n  - REST models CRUD via POST,PUT,GET,DELETE.Simple\n\n  - Scaling is simple,any server endpoint can accept transactional requests without reference to previous transactions.\n\n## Authentication (身份认证)\n\n - Transactional systems are always based on the credentials of a requesting principal.One can't unlock or start a vehicle without a key.The key is the credentials\n\n - Computers systems are not different.A credential identifies a transactional counterparty.\n\n - For a human,a credential might be a username and password.For inter-computer communication,we might use a public/private key pair.\n\n - In any case,we have to decide who is presenting a command before deciding what they can do.\n\n## Authorization (授权)\n\n - In the example of a vehicle,the key generally grants complete operational access to the vehicle.Some vehicles have \"valet keys\" with downgraded access\n\n - Such access levels delineate authorizations or permissions.\n\n - Now scale permissions to the level of 100k people in a large organization.Example:All members may be granted office access,but each to certain campuses.Only a few members may have access ti payroll,etc.There can easily be hundreds of thousands of permissions once CRUD aspects of each one are captured.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ns\n","slug":"Transitioning from server to client side web development with angular2","published":1,"updated":"2016-06-17T07:45:46.737Z","comments":1,"photos":[],"link":"","_id":"cipnd971c000dyww7sp0khxug","content":"<h1 id=\"Transitioning-from-Server-to-Client-Side-Web-Development-with-Angular-2\"><a href=\"#Transitioning-from-Server-to-Client-Side-Web-Development-with-Angular-2\" class=\"headerlink\" title=\"Transitioning from Server to Client Side Web Development with Angular 2\"></a>Transitioning from Server to Client Side Web Development with Angular 2</h1><p>Original:   <a href=\"http://angularshowcase.github.io/ng2-bootstrap-sbadmin/slides/20151110/assets/player/KeynoteDHTMLPlayer.html#0\" target=\"_blank\" rel=\"external\">http://angularshowcase.github.io/ng2-bootstrap-sbadmin/slides/20151110/assets/player/KeynoteDHTMLPlayer.html#0</a></p>\n<h2 id=\"Part-1-History\"><a href=\"#Part-1-History\" class=\"headerlink\" title=\"Part 1:History\"></a>Part 1:History</h2><h3 id=\"Brief-history-of-Dynamic-Web\"><a href=\"#Brief-history-of-Dynamic-Web\" class=\"headerlink\" title=\"Brief history of Dynamic Web\"></a>Brief history of Dynamic Web</h3><ul>\n<li><p>1993 : Someone somewhere uses C to customize the HTML devlivered to a brower.Yahoo is born .Perl,ColdFusion,PHP(all via CGL) follow.</p>\n</li>\n<li><p>1996 : Iframes allow partial page to be loaded via parameterized URL.</p>\n</li>\n<li><p>1998 : HTML4/DHTML - JS manipulating DOM and dynamic style</p>\n</li>\n<li><p>2002 : XHR/Ajax opens door from “single page apps”.</p>\n</li>\n<li><p>2006 : JS &amp; CSS frameworks emerge,large apps become hard to maintain.</p>\n</li>\n<li><p>2010 : MVC(ExtJS,Angular) addresses separation of concerns.Unit testing and TDD emerges and grows.</p>\n</li>\n<li><p>2013 : Asm/WebAsm-based languages address JS shortcomings.</p>\n</li>\n<li><p>2015 : First frameworks written in type safe languages</p>\n</li>\n</ul>\n<h3 id=\"Net-Effect\"><a href=\"#Net-Effect\" class=\"headerlink\" title=\"Net Effect\"></a>Net Effect</h3><ul>\n<li><p>Web finally “Just another native environment”.</p>\n</li>\n<li><p>Server does not differentiate by client - Same REST everywhere,server not responsible for view.</p>\n</li>\n<li><p>Web developers avoid politics of fragile server builds,work with tooling and workflows tuned to their productivity instead of some other team’s</p>\n</li>\n<li><p>Faster,more reliable web development due to build process and type safety.</p>\n</li>\n</ul>\n<h3 id=\"Evolution-to-GUI\"><a href=\"#Evolution-to-GUI\" class=\"headerlink\" title=\"Evolution to GUI\"></a>Evolution to GUI</h3><h2 id=\"Part2-Generic-Architecture\"><a href=\"#Part2-Generic-Architecture\" class=\"headerlink\" title=\"Part2: Generic Architecture\"></a>Part2: Generic Architecture</h2><p>—————- Thin vs. Fat Client ——————–</p>\n<h3 id=\"Thin\"><a href=\"#Thin\" class=\"headerlink\" title=\"Thin\"></a>Thin</h3><ul>\n<li><p>A thin client wholly relies on the server for client view management.</p>\n</li>\n<li><p>A server session forms the context by which views progress</p>\n</li>\n<li><p>Consider a six-page wizard:each view sequenced and sent by server.</p>\n</li>\n<li><p>Network transaction boundary on every view change.</p>\n</li>\n<li><p>Scaling is difficult with server-based sessions since a cluster node reboot drops the session and in-flight user work.Requires session replication,rerouting requests on the fly,etc.</p>\n</li>\n<li><p>Fat(Standalone) client is one which only communicates changes to model.</p>\n</li>\n<li><p>In out wizard example,user has expectation of losing data if their device reboots.Data that is submitted at end of wizard is data from every page.</p>\n</li>\n<li><p>Network transaction boundary is on reads or writes to model.</p>\n</li>\n<li><p>REST models CRUD via POST,PUT,GET,DELETE.Simple</p>\n</li>\n<li><p>Scaling is simple,any server endpoint can accept transactional requests without reference to previous transactions.</p>\n</li>\n</ul>\n<h2 id=\"Authentication-身份认证\"><a href=\"#Authentication-身份认证\" class=\"headerlink\" title=\"Authentication (身份认证)\"></a>Authentication (身份认证)</h2><ul>\n<li><p>Transactional systems are always based on the credentials of a requesting principal.One can’t unlock or start a vehicle without a key.The key is the credentials</p>\n</li>\n<li><p>Computers systems are not different.A credential identifies a transactional counterparty.</p>\n</li>\n<li><p>For a human,a credential might be a username and password.For inter-computer communication,we might use a public/private key pair.</p>\n</li>\n<li><p>In any case,we have to decide who is presenting a command before deciding what they can do.</p>\n</li>\n</ul>\n<h2 id=\"Authorization-授权\"><a href=\"#Authorization-授权\" class=\"headerlink\" title=\"Authorization (授权)\"></a>Authorization (授权)</h2><ul>\n<li><p>In the example of a vehicle,the key generally grants complete operational access to the vehicle.Some vehicles have “valet keys” with downgraded access</p>\n</li>\n<li><p>Such access levels delineate authorizations or permissions.</p>\n</li>\n<li><p>Now scale permissions to the level of 100k people in a large organization.Example:All members may be granted office access,but each to certain campuses.Only a few members may have access ti payroll,etc.There can easily be hundreds of thousands of permissions once CRUD aspects of each one are captured.</p>\n</li>\n</ul>\n<p>s</p>\n","excerpt":"","more":"<h1 id=\"Transitioning-from-Server-to-Client-Side-Web-Development-with-Angular-2\"><a href=\"#Transitioning-from-Server-to-Client-Side-Web-Development-with-Angular-2\" class=\"headerlink\" title=\"Transitioning from Server to Client Side Web Development with Angular 2\"></a>Transitioning from Server to Client Side Web Development with Angular 2</h1><p>Original:   <a href=\"http://angularshowcase.github.io/ng2-bootstrap-sbadmin/slides/20151110/assets/player/KeynoteDHTMLPlayer.html#0\">http://angularshowcase.github.io/ng2-bootstrap-sbadmin/slides/20151110/assets/player/KeynoteDHTMLPlayer.html#0</a></p>\n<h2 id=\"Part-1-History\"><a href=\"#Part-1-History\" class=\"headerlink\" title=\"Part 1:History\"></a>Part 1:History</h2><h3 id=\"Brief-history-of-Dynamic-Web\"><a href=\"#Brief-history-of-Dynamic-Web\" class=\"headerlink\" title=\"Brief history of Dynamic Web\"></a>Brief history of Dynamic Web</h3><ul>\n<li><p>1993 : Someone somewhere uses C to customize the HTML devlivered to a brower.Yahoo is born .Perl,ColdFusion,PHP(all via CGL) follow.</p>\n</li>\n<li><p>1996 : Iframes allow partial page to be loaded via parameterized URL.</p>\n</li>\n<li><p>1998 : HTML4/DHTML - JS manipulating DOM and dynamic style</p>\n</li>\n<li><p>2002 : XHR/Ajax opens door from “single page apps”.</p>\n</li>\n<li><p>2006 : JS &amp; CSS frameworks emerge,large apps become hard to maintain.</p>\n</li>\n<li><p>2010 : MVC(ExtJS,Angular) addresses separation of concerns.Unit testing and TDD emerges and grows.</p>\n</li>\n<li><p>2013 : Asm/WebAsm-based languages address JS shortcomings.</p>\n</li>\n<li><p>2015 : First frameworks written in type safe languages</p>\n</li>\n</ul>\n<h3 id=\"Net-Effect\"><a href=\"#Net-Effect\" class=\"headerlink\" title=\"Net Effect\"></a>Net Effect</h3><ul>\n<li><p>Web finally “Just another native environment”.</p>\n</li>\n<li><p>Server does not differentiate by client - Same REST everywhere,server not responsible for view.</p>\n</li>\n<li><p>Web developers avoid politics of fragile server builds,work with tooling and workflows tuned to their productivity instead of some other team’s</p>\n</li>\n<li><p>Faster,more reliable web development due to build process and type safety.</p>\n</li>\n</ul>\n<h3 id=\"Evolution-to-GUI\"><a href=\"#Evolution-to-GUI\" class=\"headerlink\" title=\"Evolution to GUI\"></a>Evolution to GUI</h3><h2 id=\"Part2-Generic-Architecture\"><a href=\"#Part2-Generic-Architecture\" class=\"headerlink\" title=\"Part2: Generic Architecture\"></a>Part2: Generic Architecture</h2><p>—————- Thin vs. Fat Client ——————–</p>\n<h3 id=\"Thin\"><a href=\"#Thin\" class=\"headerlink\" title=\"Thin\"></a>Thin</h3><ul>\n<li><p>A thin client wholly relies on the server for client view management.</p>\n</li>\n<li><p>A server session forms the context by which views progress</p>\n</li>\n<li><p>Consider a six-page wizard:each view sequenced and sent by server.</p>\n</li>\n<li><p>Network transaction boundary on every view change.</p>\n</li>\n<li><p>Scaling is difficult with server-based sessions since a cluster node reboot drops the session and in-flight user work.Requires session replication,rerouting requests on the fly,etc.</p>\n</li>\n<li><p>Fat(Standalone) client is one which only communicates changes to model.</p>\n</li>\n<li><p>In out wizard example,user has expectation of losing data if their device reboots.Data that is submitted at end of wizard is data from every page.</p>\n</li>\n<li><p>Network transaction boundary is on reads or writes to model.</p>\n</li>\n<li><p>REST models CRUD via POST,PUT,GET,DELETE.Simple</p>\n</li>\n<li><p>Scaling is simple,any server endpoint can accept transactional requests without reference to previous transactions.</p>\n</li>\n</ul>\n<h2 id=\"Authentication-身份认证\"><a href=\"#Authentication-身份认证\" class=\"headerlink\" title=\"Authentication (身份认证)\"></a>Authentication (身份认证)</h2><ul>\n<li><p>Transactional systems are always based on the credentials of a requesting principal.One can’t unlock or start a vehicle without a key.The key is the credentials</p>\n</li>\n<li><p>Computers systems are not different.A credential identifies a transactional counterparty.</p>\n</li>\n<li><p>For a human,a credential might be a username and password.For inter-computer communication,we might use a public/private key pair.</p>\n</li>\n<li><p>In any case,we have to decide who is presenting a command before deciding what they can do.</p>\n</li>\n</ul>\n<h2 id=\"Authorization-授权\"><a href=\"#Authorization-授权\" class=\"headerlink\" title=\"Authorization (授权)\"></a>Authorization (授权)</h2><ul>\n<li><p>In the example of a vehicle,the key generally grants complete operational access to the vehicle.Some vehicles have “valet keys” with downgraded access</p>\n</li>\n<li><p>Such access levels delineate authorizations or permissions.</p>\n</li>\n<li><p>Now scale permissions to the level of 100k people in a large organization.Example:All members may be granted office access,but each to certain campuses.Only a few members may have access ti payroll,etc.There can easily be hundreds of thousands of permissions once CRUD aspects of each one are captured.</p>\n</li>\n</ul>\n<p>s</p>\n"},{"layout":"keynote","title":"Python Crawler","subtitle":"Keynote: Python Crawler","iframe":null,"date":"2016-06-16T16:00:00.000Z","author":"","header-img":"post-bg-js-version.jpg","_content":"# Python 爬虫实战\n\n###\n","source":"_posts/Python Crawler.markdown","raw":"---\nlayout:     keynote\ntitle:      \"Python Crawler\"\nsubtitle:   \"Keynote: Python Crawler\"\niframe:     \ndate:       2016-06-17\nauthor:     \"\"\nheader-img: \"post-bg-js-version.jpg\"\ntags:\n    - 数据\n    - Python\n---\n# Python 爬虫实战\n\n###\n","slug":"Python Crawler","published":1,"updated":"2016-06-20T01:51:18.559Z","comments":1,"photos":[],"link":"","_id":"cipnd971f000fyww7wey4s0lf","content":"<h1 id=\"Python-爬虫实战\"><a href=\"#Python-爬虫实战\" class=\"headerlink\" title=\"Python 爬虫实战\"></a>Python 爬虫实战</h1><p>###</p>\n","excerpt":"","more":"<h1 id=\"Python-爬虫实战\"><a href=\"#Python-爬虫实战\" class=\"headerlink\" title=\"Python 爬虫实战\"></a>Python 爬虫实战</h1><p>###</p>\n"},{"layout":"keynote","title":"JQuery-Sortable","subtitle":"Keynote: JQuery-Sortable","iframe":null,"date":"2016-06-16T16:00:00.000Z","author":"","header-img":"post-bg-js-version.jpg","_content":"# JQuery UI Sortable\n\n## 默认功能\n\n  在任意的DOM元素上启用sortable功能，通过鼠标点击并拖拽元素到列表中的一个新的位置其他的条目会自动调整。默认情况下，sortable各个条目共享draggable属性\n\n· main.js\n\n```javascript\n\n$(function() {\n  $( \"#sortable\" ).sortable();\n  $( \"#sortable\" ).disableSelection();\n});\n\n```\n\n· index.html\n\n```html\n  ...\n\n  <ul id=\"sortable\">\n    <li class=\"ui-state-default\"><span class=\"ui-icon ui-icon-arrowthick-2-n-s\"></span>Item 1</li>\n    <li class=\"ui-state-default\"><span class=\"ui-icon ui-icon-arrowthick-2-n-s\"></span>Item 2</li>\n    <li class=\"ui-state-default\"><span class=\"ui-icon ui-icon-arrowthick-2-n-s\"></span>Item 3</li>\n    <li class=\"ui-state-default\"><span class=\"ui-icon ui-icon-arrowthick-2-n-s\"></span>Item 4</li>\n    <li class=\"ui-state-default\"><span class=\"ui-icon ui-icon-arrowthick-2-n-s\"></span>Item 5</li>\n    <li class=\"ui-state-default\"><span class=\"ui-icon ui-icon-arrowthick-2-n-s\"></span>Item 6</li>\n    <li class=\"ui-state-default\"><span class=\"ui-icon ui-icon-arrowthick-2-n-s\"></span>Item 7</li>\n  </ul>\n\n  ...\n```\n\n## 连接列表\n\n  通过向connectWith 选项传递一个选择器，并把一个列表中的元素排序到两一个列表中，反之亦然。\n\n```javascript\n\n$(function() {\n  $( \"#sortable1, #sortable2\" ).sortable({\n    connectWith: \".connectedSortable\"\n  }).disableSelection();\n});\n\n```\n\n## 显示为网格\n\n当拖拽一个sortable条目到一个新的位置时，其他条目为该条目腾出空间。想placeholder选项传递一个class来定义可视化的空白的样式。使用布尔值的forcePlaceholderSize选项来设置占位符的尺寸\n","source":"_posts/JQuery-Sortable.markdown","raw":"---\nlayout:     keynote\ntitle:      \"JQuery-Sortable\"\nsubtitle:   \"Keynote: JQuery-Sortable\"\niframe:     \ndate:       2016-06-17\nauthor:     \"\"\nheader-img: \"post-bg-js-version.jpg\"\ntags:\n    - JQuery 插件\n---\n# JQuery UI Sortable\n\n## 默认功能\n\n  在任意的DOM元素上启用sortable功能，通过鼠标点击并拖拽元素到列表中的一个新的位置其他的条目会自动调整。默认情况下，sortable各个条目共享draggable属性\n\n· main.js\n\n```javascript\n\n$(function() {\n  $( \"#sortable\" ).sortable();\n  $( \"#sortable\" ).disableSelection();\n});\n\n```\n\n· index.html\n\n```html\n  ...\n\n  <ul id=\"sortable\">\n    <li class=\"ui-state-default\"><span class=\"ui-icon ui-icon-arrowthick-2-n-s\"></span>Item 1</li>\n    <li class=\"ui-state-default\"><span class=\"ui-icon ui-icon-arrowthick-2-n-s\"></span>Item 2</li>\n    <li class=\"ui-state-default\"><span class=\"ui-icon ui-icon-arrowthick-2-n-s\"></span>Item 3</li>\n    <li class=\"ui-state-default\"><span class=\"ui-icon ui-icon-arrowthick-2-n-s\"></span>Item 4</li>\n    <li class=\"ui-state-default\"><span class=\"ui-icon ui-icon-arrowthick-2-n-s\"></span>Item 5</li>\n    <li class=\"ui-state-default\"><span class=\"ui-icon ui-icon-arrowthick-2-n-s\"></span>Item 6</li>\n    <li class=\"ui-state-default\"><span class=\"ui-icon ui-icon-arrowthick-2-n-s\"></span>Item 7</li>\n  </ul>\n\n  ...\n```\n\n## 连接列表\n\n  通过向connectWith 选项传递一个选择器，并把一个列表中的元素排序到两一个列表中，反之亦然。\n\n```javascript\n\n$(function() {\n  $( \"#sortable1, #sortable2\" ).sortable({\n    connectWith: \".connectedSortable\"\n  }).disableSelection();\n});\n\n```\n\n## 显示为网格\n\n当拖拽一个sortable条目到一个新的位置时，其他条目为该条目腾出空间。想placeholder选项传递一个class来定义可视化的空白的样式。使用布尔值的forcePlaceholderSize选项来设置占位符的尺寸\n","slug":"JQuery-Sortable","published":1,"updated":"2016-06-20T01:49:56.852Z","comments":1,"photos":[],"link":"","_id":"cipnd971g000hyww709wikuoa","content":"<h1 id=\"JQuery-UI-Sortable\"><a href=\"#JQuery-UI-Sortable\" class=\"headerlink\" title=\"JQuery UI Sortable\"></a>JQuery UI Sortable</h1><h2 id=\"默认功能\"><a href=\"#默认功能\" class=\"headerlink\" title=\"默认功能\"></a>默认功能</h2><p>  在任意的DOM元素上启用sortable功能，通过鼠标点击并拖拽元素到列表中的一个新的位置其他的条目会自动调整。默认情况下，sortable各个条目共享draggable属性</p>\n<p>· main.js</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">$(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  $( <span class=\"string\">\"#sortable\"</span> ).sortable();</span><br><span class=\"line\">  $( <span class=\"string\">\"#sortable\"</span> ).disableSelection();</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>· index.html</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">id</span>=<span class=\"string\">\"sortable\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ui-state-default\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ui-icon ui-icon-arrowthick-2-n-s\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span>Item 1<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ui-state-default\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ui-icon ui-icon-arrowthick-2-n-s\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span>Item 2<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ui-state-default\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ui-icon ui-icon-arrowthick-2-n-s\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span>Item 3<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ui-state-default\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ui-icon ui-icon-arrowthick-2-n-s\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span>Item 4<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ui-state-default\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ui-icon ui-icon-arrowthick-2-n-s\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span>Item 5<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ui-state-default\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ui-icon ui-icon-arrowthick-2-n-s\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span>Item 6<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ui-state-default\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ui-icon ui-icon-arrowthick-2-n-s\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span>Item 7<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<h2 id=\"连接列表\"><a href=\"#连接列表\" class=\"headerlink\" title=\"连接列表\"></a>连接列表</h2><p>  通过向connectWith 选项传递一个选择器，并把一个列表中的元素排序到两一个列表中，反之亦然。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">$(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  $( <span class=\"string\">\"#sortable1, #sortable2\"</span> ).sortable(&#123;</span><br><span class=\"line\">    connectWith: <span class=\"string\">\".connectedSortable\"</span></span><br><span class=\"line\">  &#125;).disableSelection();</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"显示为网格\"><a href=\"#显示为网格\" class=\"headerlink\" title=\"显示为网格\"></a>显示为网格</h2><p>当拖拽一个sortable条目到一个新的位置时，其他条目为该条目腾出空间。想placeholder选项传递一个class来定义可视化的空白的样式。使用布尔值的forcePlaceholderSize选项来设置占位符的尺寸</p>\n","excerpt":"","more":"<h1 id=\"JQuery-UI-Sortable\"><a href=\"#JQuery-UI-Sortable\" class=\"headerlink\" title=\"JQuery UI Sortable\"></a>JQuery UI Sortable</h1><h2 id=\"默认功能\"><a href=\"#默认功能\" class=\"headerlink\" title=\"默认功能\"></a>默认功能</h2><p>  在任意的DOM元素上启用sortable功能，通过鼠标点击并拖拽元素到列表中的一个新的位置其他的条目会自动调整。默认情况下，sortable各个条目共享draggable属性</p>\n<p>· main.js</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">$(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  $( <span class=\"string\">\"#sortable\"</span> ).sortable();</span><br><span class=\"line\">  $( <span class=\"string\">\"#sortable\"</span> ).disableSelection();</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>· index.html</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">id</span>=<span class=\"string\">\"sortable\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ui-state-default\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ui-icon ui-icon-arrowthick-2-n-s\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span>Item 1<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ui-state-default\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ui-icon ui-icon-arrowthick-2-n-s\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span>Item 2<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ui-state-default\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ui-icon ui-icon-arrowthick-2-n-s\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span>Item 3<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ui-state-default\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ui-icon ui-icon-arrowthick-2-n-s\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span>Item 4<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ui-state-default\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ui-icon ui-icon-arrowthick-2-n-s\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span>Item 5<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ui-state-default\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ui-icon ui-icon-arrowthick-2-n-s\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span>Item 6<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ui-state-default\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ui-icon ui-icon-arrowthick-2-n-s\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span>Item 7<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<h2 id=\"连接列表\"><a href=\"#连接列表\" class=\"headerlink\" title=\"连接列表\"></a>连接列表</h2><p>  通过向connectWith 选项传递一个选择器，并把一个列表中的元素排序到两一个列表中，反之亦然。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">$(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  $( <span class=\"string\">\"#sortable1, #sortable2\"</span> ).sortable(&#123;</span><br><span class=\"line\">    connectWith: <span class=\"string\">\".connectedSortable\"</span></span><br><span class=\"line\">  &#125;).disableSelection();</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"显示为网格\"><a href=\"#显示为网格\" class=\"headerlink\" title=\"显示为网格\"></a>显示为网格</h2><p>当拖拽一个sortable条目到一个新的位置时，其他条目为该条目腾出空间。想placeholder选项传递一个class来定义可视化的空白的样式。使用布尔值的forcePlaceholderSize选项来设置占位符的尺寸</p>\n"},{"layout":"keynote","title":"MQTT Agreement Pushlet","subtitle":"Keynote: MQTT Agreement Pushlet","iframe":null,"date":"2016-06-16T16:00:00.000Z","author":"","header-img":"post-bg-js-version.jpg","_content":"# MQTT协议2 - 推送\n\n## 主流的推送方案\n\nAPNS(Apple Push Notification Service)\nGCM(Google Cloud Messaging)\n\nAPNS 和 GCM 是 IOS 和 Android 两大阵营退出的官方推送方案，两者技术架构较为相似，都是由系统来统一的维护一个长连接，所有 APP 统一发送心跳和接收推送。\n\nAPNS 使用的方便性毋庸置疑，但是GCM却在国内举步维艰，主要原因有三个：\n\n1.GFW\n2.由于国内2G和移动3G的NAT超时时间都小于GCM心跳时间（28min），TCP长连接必然无法保活，每次都要等28分钟心跳失败重连后才能接收到PUSH。\n3.某些运营商可能限制了5228端口，移动3G/2G下，发现几乎无法连接上GCM服务器，也就无法获得GCM通知，WhatsApp放后台十分钟后，经常很长时间都收不到PUSH消息。\n","source":"_posts/MQTT Agreement Pushlet.markdown","raw":"---\nlayout:     keynote\ntitle:      \"MQTT Agreement Pushlet\"\nsubtitle:   \"Keynote: MQTT Agreement Pushlet\"\niframe:     \ndate:       2016-06-17\nauthor:     \"\"\nheader-img: \"post-bg-js-version.jpg\"\ntags:\n    - Java\n    - 推送\n---\n# MQTT协议2 - 推送\n\n## 主流的推送方案\n\nAPNS(Apple Push Notification Service)\nGCM(Google Cloud Messaging)\n\nAPNS 和 GCM 是 IOS 和 Android 两大阵营退出的官方推送方案，两者技术架构较为相似，都是由系统来统一的维护一个长连接，所有 APP 统一发送心跳和接收推送。\n\nAPNS 使用的方便性毋庸置疑，但是GCM却在国内举步维艰，主要原因有三个：\n\n1.GFW\n2.由于国内2G和移动3G的NAT超时时间都小于GCM心跳时间（28min），TCP长连接必然无法保活，每次都要等28分钟心跳失败重连后才能接收到PUSH。\n3.某些运营商可能限制了5228端口，移动3G/2G下，发现几乎无法连接上GCM服务器，也就无法获得GCM通知，WhatsApp放后台十分钟后，经常很长时间都收不到PUSH消息。\n","slug":"MQTT Agreement Pushlet","published":1,"updated":"2016-06-20T01:51:05.018Z","comments":1,"photos":[],"link":"","_id":"cipnd971i000kyww7laj1umq0","content":"<h1 id=\"MQTT协议2-推送\"><a href=\"#MQTT协议2-推送\" class=\"headerlink\" title=\"MQTT协议2 - 推送\"></a>MQTT协议2 - 推送</h1><h2 id=\"主流的推送方案\"><a href=\"#主流的推送方案\" class=\"headerlink\" title=\"主流的推送方案\"></a>主流的推送方案</h2><p>APNS(Apple Push Notification Service)<br>GCM(Google Cloud Messaging)</p>\n<p>APNS 和 GCM 是 IOS 和 Android 两大阵营退出的官方推送方案，两者技术架构较为相似，都是由系统来统一的维护一个长连接，所有 APP 统一发送心跳和接收推送。</p>\n<p>APNS 使用的方便性毋庸置疑，但是GCM却在国内举步维艰，主要原因有三个：</p>\n<p>1.GFW<br>2.由于国内2G和移动3G的NAT超时时间都小于GCM心跳时间（28min），TCP长连接必然无法保活，每次都要等28分钟心跳失败重连后才能接收到PUSH。<br>3.某些运营商可能限制了5228端口，移动3G/2G下，发现几乎无法连接上GCM服务器，也就无法获得GCM通知，WhatsApp放后台十分钟后，经常很长时间都收不到PUSH消息。</p>\n","excerpt":"","more":"<h1 id=\"MQTT协议2-推送\"><a href=\"#MQTT协议2-推送\" class=\"headerlink\" title=\"MQTT协议2 - 推送\"></a>MQTT协议2 - 推送</h1><h2 id=\"主流的推送方案\"><a href=\"#主流的推送方案\" class=\"headerlink\" title=\"主流的推送方案\"></a>主流的推送方案</h2><p>APNS(Apple Push Notification Service)<br>GCM(Google Cloud Messaging)</p>\n<p>APNS 和 GCM 是 IOS 和 Android 两大阵营退出的官方推送方案，两者技术架构较为相似，都是由系统来统一的维护一个长连接，所有 APP 统一发送心跳和接收推送。</p>\n<p>APNS 使用的方便性毋庸置疑，但是GCM却在国内举步维艰，主要原因有三个：</p>\n<p>1.GFW<br>2.由于国内2G和移动3G的NAT超时时间都小于GCM心跳时间（28min），TCP长连接必然无法保活，每次都要等28分钟心跳失败重连后才能接收到PUSH。<br>3.某些运营商可能限制了5228端口，移动3G/2G下，发现几乎无法连接上GCM服务器，也就无法获得GCM通知，WhatsApp放后台十分钟后，经常很长时间都收不到PUSH消息。</p>\n"},{"layout":"keynote","title":"Example Post using Keynote Layout","subtitle":"Keynote: JavaScript Modularization Journey","iframe":"http://huangxuan.me/js-module-7day/","date":"2015-07-08T16:00:00.000Z","author":"Hux","header-img":"post-bg-js-version.jpg","_content":"\n\n> 下滑这里查看更多内容\n\n7月9日，我在公司内部进行了名为「JavaScript 模块化七日谈」分享，并将该 Slides 分享到了微博上。出乎意料地，这篇微博先后被 @JS小组 @尤小右 @寸志 等近 200 人转发，阅读达到 10w，获得了还不错的评价。\n\n于是，我决定将它重新发到我的博客上，并为它专门制作了适用于 Keynote 展示文稿的新布局。它能自动根据屏幕大小/旋转以一定比例填充屏幕，你也可以直接点击下方链接在新页面打开，来获得更好的、沉浸式的全屏体验\n\n\n### [Watch Slides →](http://huangxuan.me/js-module-7day)\n\n<img src=\"http://huangxuan.me/js-module-7day/attach/qrcode.png\" width=\"350\" height=\"350\"/>\n\n<small class=\"img-hint\">你也可以通过扫描二维码在手机上观看</small>\n\n\n这个 Web Slides 开源在[我的 Github 上](https://github.com/Huxpro/js-module-7day)，欢迎你帮助我完善这个展示文稿，你可以给我提 issue，可以 fork & pull request。如果它能帮助到你了，希望你还能不吝啬 star 一下这个项目\n\n\n### Catalog\n\n- 第一日 上古时期 ***Module?*** 从设计模式说起\n- 第二日 石器时代 ***Script Loader*** 只有封装性可不够，我们还需要加载\n- 第三日 蒸汽朋克 ***Module Loader*** 模块化架构的工业革命\n- 第四日 号角吹响 ***CommonJS*** 征服世界的第一步是跳出浏览器\n- 第五日 双塔奇兵 ***AMD/CMD*** 浏览器环境模块化方案\n- 第六日 精灵宝钻 ***Browserify/Webpack*** 大势所趋，去掉这层包裹！\n- 第七日 王者归来 ***ES6 Module*** 最后的战役\n\n### Thanks\n\n[Reveal.js](http://lab.hakim.se/reveal-js)\n","source":"_posts/js-module-7day.markdown","raw":"---\nlayout:     keynote\ntitle:      \"Example Post using Keynote Layout\"\nsubtitle:   \"Keynote: JavaScript Modularization Journey\"\niframe:     \"http://huangxuan.me/js-module-7day/\"\ndate:       2015-07-09\nauthor:     \"Hux\"\nheader-img: \"post-bg-js-version.jpg\"\ntags:\n    - 前端开发\n    - JavaScript\n---\n\n\n> 下滑这里查看更多内容\n\n7月9日，我在公司内部进行了名为「JavaScript 模块化七日谈」分享，并将该 Slides 分享到了微博上。出乎意料地，这篇微博先后被 @JS小组 @尤小右 @寸志 等近 200 人转发，阅读达到 10w，获得了还不错的评价。\n\n于是，我决定将它重新发到我的博客上，并为它专门制作了适用于 Keynote 展示文稿的新布局。它能自动根据屏幕大小/旋转以一定比例填充屏幕，你也可以直接点击下方链接在新页面打开，来获得更好的、沉浸式的全屏体验\n\n\n### [Watch Slides →](http://huangxuan.me/js-module-7day)\n\n<img src=\"http://huangxuan.me/js-module-7day/attach/qrcode.png\" width=\"350\" height=\"350\"/>\n\n<small class=\"img-hint\">你也可以通过扫描二维码在手机上观看</small>\n\n\n这个 Web Slides 开源在[我的 Github 上](https://github.com/Huxpro/js-module-7day)，欢迎你帮助我完善这个展示文稿，你可以给我提 issue，可以 fork & pull request。如果它能帮助到你了，希望你还能不吝啬 star 一下这个项目\n\n\n### Catalog\n\n- 第一日 上古时期 ***Module?*** 从设计模式说起\n- 第二日 石器时代 ***Script Loader*** 只有封装性可不够，我们还需要加载\n- 第三日 蒸汽朋克 ***Module Loader*** 模块化架构的工业革命\n- 第四日 号角吹响 ***CommonJS*** 征服世界的第一步是跳出浏览器\n- 第五日 双塔奇兵 ***AMD/CMD*** 浏览器环境模块化方案\n- 第六日 精灵宝钻 ***Browserify/Webpack*** 大势所趋，去掉这层包裹！\n- 第七日 王者归来 ***ES6 Module*** 最后的战役\n\n### Thanks\n\n[Reveal.js](http://lab.hakim.se/reveal-js)\n","slug":"js-module-7day","published":1,"updated":"2016-06-17T06:01:10.462Z","comments":1,"photos":[],"link":"","_id":"cipnd9726001fyww71oef9mwj","content":"<blockquote>\n<p>下滑这里查看更多内容</p>\n</blockquote>\n<p>7月9日，我在公司内部进行了名为「JavaScript 模块化七日谈」分享，并将该 Slides 分享到了微博上。出乎意料地，这篇微博先后被 @JS小组 @尤小右 @寸志 等近 200 人转发，阅读达到 10w，获得了还不错的评价。</p>\n<p>于是，我决定将它重新发到我的博客上，并为它专门制作了适用于 Keynote 展示文稿的新布局。它能自动根据屏幕大小/旋转以一定比例填充屏幕，你也可以直接点击下方链接在新页面打开，来获得更好的、沉浸式的全屏体验</p>\n<h3 id=\"Watch-Slides-→\"><a href=\"#Watch-Slides-→\" class=\"headerlink\" title=\"Watch Slides →\"></a><a href=\"http://huangxuan.me/js-module-7day\" target=\"_blank\" rel=\"external\">Watch Slides →</a></h3><p><img src=\"http://huangxuan.me/js-module-7day/attach/qrcode.png\" width=\"350\" height=\"350\"></p>\n<p><small class=\"img-hint\">你也可以通过扫描二维码在手机上观看</small></p>\n<p>这个 Web Slides 开源在<a href=\"https://github.com/Huxpro/js-module-7day\" target=\"_blank\" rel=\"external\">我的 Github 上</a>，欢迎你帮助我完善这个展示文稿，你可以给我提 issue，可以 fork &amp; pull request。如果它能帮助到你了，希望你还能不吝啬 star 一下这个项目</p>\n<h3 id=\"Catalog\"><a href=\"#Catalog\" class=\"headerlink\" title=\"Catalog\"></a>Catalog</h3><ul>\n<li>第一日 上古时期 <strong><em>Module?</em></strong> 从设计模式说起</li>\n<li>第二日 石器时代 <strong><em>Script Loader</em></strong> 只有封装性可不够，我们还需要加载</li>\n<li>第三日 蒸汽朋克 <strong><em>Module Loader</em></strong> 模块化架构的工业革命</li>\n<li>第四日 号角吹响 <strong><em>CommonJS</em></strong> 征服世界的第一步是跳出浏览器</li>\n<li>第五日 双塔奇兵 <strong><em>AMD/CMD</em></strong> 浏览器环境模块化方案</li>\n<li>第六日 精灵宝钻 <strong><em>Browserify/Webpack</em></strong> 大势所趋，去掉这层包裹！</li>\n<li>第七日 王者归来 <strong><em>ES6 Module</em></strong> 最后的战役</li>\n</ul>\n<h3 id=\"Thanks\"><a href=\"#Thanks\" class=\"headerlink\" title=\"Thanks\"></a>Thanks</h3><p><a href=\"http://lab.hakim.se/reveal-js\" target=\"_blank\" rel=\"external\">Reveal.js</a></p>\n","excerpt":"","more":"<blockquote>\n<p>下滑这里查看更多内容</p>\n</blockquote>\n<p>7月9日，我在公司内部进行了名为「JavaScript 模块化七日谈」分享，并将该 Slides 分享到了微博上。出乎意料地，这篇微博先后被 @JS小组 @尤小右 @寸志 等近 200 人转发，阅读达到 10w，获得了还不错的评价。</p>\n<p>于是，我决定将它重新发到我的博客上，并为它专门制作了适用于 Keynote 展示文稿的新布局。它能自动根据屏幕大小/旋转以一定比例填充屏幕，你也可以直接点击下方链接在新页面打开，来获得更好的、沉浸式的全屏体验</p>\n<h3 id=\"Watch-Slides-→\"><a href=\"#Watch-Slides-→\" class=\"headerlink\" title=\"Watch Slides →\"></a><a href=\"http://huangxuan.me/js-module-7day\">Watch Slides →</a></h3><p><img src=\"http://huangxuan.me/js-module-7day/attach/qrcode.png\" width=\"350\" height=\"350\"/></p>\n<p><small class=\"img-hint\">你也可以通过扫描二维码在手机上观看</small></p>\n<p>这个 Web Slides 开源在<a href=\"https://github.com/Huxpro/js-module-7day\">我的 Github 上</a>，欢迎你帮助我完善这个展示文稿，你可以给我提 issue，可以 fork &amp; pull request。如果它能帮助到你了，希望你还能不吝啬 star 一下这个项目</p>\n<h3 id=\"Catalog\"><a href=\"#Catalog\" class=\"headerlink\" title=\"Catalog\"></a>Catalog</h3><ul>\n<li>第一日 上古时期 <strong><em>Module?</em></strong> 从设计模式说起</li>\n<li>第二日 石器时代 <strong><em>Script Loader</em></strong> 只有封装性可不够，我们还需要加载</li>\n<li>第三日 蒸汽朋克 <strong><em>Module Loader</em></strong> 模块化架构的工业革命</li>\n<li>第四日 号角吹响 <strong><em>CommonJS</em></strong> 征服世界的第一步是跳出浏览器</li>\n<li>第五日 双塔奇兵 <strong><em>AMD/CMD</em></strong> 浏览器环境模块化方案</li>\n<li>第六日 精灵宝钻 <strong><em>Browserify/Webpack</em></strong> 大势所趋，去掉这层包裹！</li>\n<li>第七日 王者归来 <strong><em>ES6 Module</em></strong> 最后的战役</li>\n</ul>\n<h3 id=\"Thanks\"><a href=\"#Thanks\" class=\"headerlink\" title=\"Thanks\"></a>Thanks</h3><p><a href=\"http://lab.hakim.se/reveal-js\">Reveal.js</a></p>\n"},{"layout":"post","title":"Example Post with Code Highlight","subtitle":"CommonJS，RequireJS，SeaJS 归纳笔记","date":"2015-05-24T16:00:00.000Z","author":"Hux","catalog":true,"header-img":"post-bg-js-module.jpg","_content":"\n\n\n## Foreword\n\n> Here comes Module!\n\n随着网站逐渐变成「互联网应用程序」，嵌入网页的 JavaScript 代码越来越庞大，越来越复杂。网页越来越像桌面程序，需要一个团队分工协作、进度管理、单元测试……我们不得不使用软件工程的方法，来管理网页的业务逻辑。\n\n于是，JavaScript 的模块化成为迫切需求。在 ES6 Module 来临之前，JavaScript 社区提供了强大支持，尝试在现有的运行环境下，实现模块的效果。\n\n\n---\n\n## Catalog\n\n\n1.  [CommonJS & Node](#commonjs--node)\n3.  [History](#history)\n4.  [RequireJS & AMD](#requirejs--amd)\n5.  [SeaJS & CMD](#seajs--cmd)\n6.  [AMD vs CMD](#amd-vs-cmd)\n7.  [WebPack](#webpack)\n\n\n\n## CommonJS & Node\n\n> Javascript: not just for browsers any more! —— CommonJS Slogen\n\n前端模块化的事实标准之一，2009 年 8 月，[CommonJS](http://wiki.commonjs.org/wiki/CommonJS) 诞生。\n\nCommonJS 本质上只是一套规范（API 定义），而 Node.js 采用并实现了部分规范，CommonJS Module 的写法也因此广泛流行。\n\n\n让我们看看 Node 中的实现：\n{% codeblock lang:js %}\n// 由于 Node 原生支持模块的作用域，并不需要额外的 wrapper\n// \"as though the module was wrapped in a function\"\n\nvar a = require('./a')  // 加载模块（同步加载）\na.doSomething()         // 等上一句执行完才会执行\n\nexports.b = function(){ // 暴露 b 函数接口\n  // do something\n}\n{% endcodeblock %}\n\n\n`exports`是一个内置对象，就像`require`是一个内置加载函数一样。如果你希望直接赋值一个完整的对象或者构造函数，覆写`module.exports`就可以了。\n\nCommonJS 前身叫 ServerJS ，**后来希望能更加 COMMON，成为通吃各种环境的模块规范，改名为 CommonJS** 。CommonJS 最初只专注于 Server-side 而非浏览器环境，因此它采用了同步加载的机制，这对服务器环境（硬盘 I/O 速度）不是问题，而对浏览器环境（网速）来说并不合适。\n\n\n因此，各种适用于浏览器环境的模块框架与标准逐个诞生，他们的共同点是：\n\n* 采用异步加载（预先加载所有依赖的模块后回调执行，符合浏览器的网络环境）\n* 虽然代码风格不同，但其实都可以看作 CommonJS Modules 语法的变体。\n* 都在向着 **COMMON** 的方向进化：**兼容不同风格，兼容浏览器和服务器两种环境**\n\n本文接下来要讨论的典例是：\n\n* RequireJS & AMD（异步加载，预执行，依赖前置。默认推荐 AMD 写法）\n* SeaJS & CMD（异步加载，懒执行，依赖就近，默认推荐 CommonJS 写法）\n\n\n\n\n\n## History\n\n<!--<h2 id=\"history\"> History </h2>-->\n\n> 此段落参考自玉伯的 [前端模块化开发那点历史](https://github.com/seajs/seajs/issues/588)\n\n09-10 年间，CommonJS（那时还叫 ServerJS） 社区推出 [Modules/1.0](http://wiki.commonjs.org/wiki/Modules) 规范，并且在 Node.js 等环境下取得了很不错的实践。\n\n09年下半年这帮充满干劲的小伙子们想把 ServerJS 的成功经验进一步推广到浏览器端，于是将社区改名叫 CommonJS，同时激烈争论 Modules 的下一版规范。分歧和冲突由此诞生，逐步形成了三大流派：\n\n\n1. **Modules/1.x** 流派。这个观点觉得 1.x 规范已经够用，只要移植到浏览器端就好。要做的是新增 [Modules/Transport](http://wiki.commonjs.org/wiki/Modules/Transport) 规范，即在浏览器上运行前，先通过转换工具将模块转换为符合 Transport 规范的代码。主流代表是服务端的开发人员。现在值得关注的有两个实现：越来越火的 component 和走在前沿的 es6 module transpiler。\n2. **Modules/Async** 流派。这个观点觉得浏览器有自身的特征，不应该直接用 Modules/1.x 规范。这个观点下的典型代表是 [AMD](http://wiki.commonjs.org/wiki/Modules/AsynchronousDefinition) 规范及其实现 [RequireJS](http://requirejs.org/)。这个稍后再细说。\n3. **Modules/2.0** 流派。这个观点觉得浏览器有自身的特征，不应该直接用 Modules/1.x 规范，但应该尽可能与 Modules/1.x 规范保持一致。这个观点下的典型代表是 BravoJS 和 FlyScript 的作者。BravoJS 作者对 CommonJS 的社区的贡献很大，这份 Modules/2.0-draft 规范花了很多心思。FlyScript 的作者提出了 Modules/Wrappings 规范，这规范是 CMD 规范的前身。可惜的是 BravoJS 太学院派，FlyScript 后来做了自我阉割，将整个网站（flyscript.org）下线了。这个观点在本文中的典型代表就是 SeaJS 和 CMD 了\n\n\n补一嘴：阿里 KISSY 的 KMD 其实跟 AMD 非常类似，只是用 `add`和`use` 两个源自于 YUI Modules 的函数名替换了 `define` 和 `require` ，但其原理更接近 RequireJS ，与 YUI Modules 的 `Y` 沙箱 Attach 机制并不相同\n\n\n## RequireJS & AMD\n\n[AMD (Async Module Definition)](http://wiki.commonjs.org/wiki/Modules/AsynchronousDefinition) 是 RequireJS 在推广过程中对模块定义的规范化产出。\n\n> RequireJS is a JavaScript file and module loader. It is optimized for in-browser use, but it can be used in other JavaScript environments\n\nRequireJS 主要解决的还是 CommonJS 同步加载脚本不适合浏览器 这个问题：\n\n{% gist 65481dbbf6d16e831a6cc89c3e37e6e5 display-emails-from-database.php %}\n\n\n> As the comment indicates above, if require() is async, this code will not work. However, loading scripts synchronously in the browser kills performance. So, what to do?\n\n所以我们需要 **Function Wrapping** 来获取依赖并且提前通过 script tag 提前加载进来\n\n\n{% jsfiddle shorttag [tabs] [skin] [width] [height] %}\n\n\n当依赖模块非常多时，这种**依赖前置**的写法会显得有点奇怪，所以 AMD 给了一个语法糖， **simplified CommonJS wrapping**，借鉴了 CommonJS 的 require 就近风格，也更方便对 CommonJS 模块的兼容：\n\n```js\ndefine(function (require) {\n    var dependency1 = require('dependency1'),\n        dependency2 = require('dependency2');\n\n    return function () {};\n});\n```\nThe AMD loader will parse out the `require('')` calls by using `Function.prototype.toString()`, then internally convert the above define call into this:\n\n```js\ndefine(['require', 'dependency1', 'dependency2'], function (require) {\n    var dependency1 = require('dependency1'),\n        dependency2 = require('dependency2');\n\n    return function () {};\n});\n```\n\n出于`Function.prototype.toString()`兼容性和性能的考虑，最好的做法还是做一次 **optimized build**\n\n\n\nAMD 和 CommonJS 的核心争议如下：\n\n### 1. **执行时机**\n\nModules/1.0:\n\n```js\nvar a = require(\"./a\") // 执行到此时，a.js 才同步下载并执行\n```\n\nAMD: （使用 require 的语法糖时）\n\n```js\ndefine([\"require\"],function(require)){\n    // 在这里，a.js 已经下载并且执行好了\n    // 使用 require() 并不是 AMD 的推荐写法\n    var a = require(\"./a\") // 此处仅仅是取模块 a 的 exports\n})\n```\n\nAMD 里提前下载 a.js 是出于对浏览器环境的考虑，只能采取异步下载，这个社区都认可（Sea.js 也是这么做的）\n\n但是 AMD 的执行是 Early Executing，而 Modules/1.0 是第一次 require 时才执行。这个差异很多人不能接受，包括持 Modules/2.0 观点的人也不能接受。\n\n### 2. **书写风格**\n\nAMD 推荐的风格并不使用`require`，而是通过参数传入，破坏了**依赖就近**：\n\n```js\ndefine([\"a\", \"b\", \"c\"],function(a, b, c){\n    // 提前申明了并初始化了所有模块\n\n    true || b.foo(); //即便根本没用到模块 b，但 b 还是提前执行了。\n})\n```\n\n不过，在笔者看来，风格喜好因人而异，主要还是**预执行**和**懒执行**的差异。\n\n另外，require 2.0 也开始思考异步处理**软依赖**（区别于一定需要的**硬依赖**）的问题，提出了这样的方案：\n\n```js\n// 函数体内：\nif(status){\n    async(['a'],function(a){\n        a.doSomething()\n    })\n}\n```\n\n## SeaJS & CMD\n\nCMD (Common Module Definition) 是 [SeaJS](http://seajs.org/docs/) 在推广过程中对模块定义的规范化产出，是 Modules/2.0 流派的支持者，因此 SeaJS 的模块写法尽可能与 Modules/1.x 规范保持一致。\n\n不过目前国外的该流派都死得差不多了，RequireJS 目前成为浏览器端模块的事实标准，国内最有名气的就是玉伯的 Sea.js ，不过对国际的推广力度不够。\n\n* CMD Specification\n    * [English (CMDJS-repo)](https://github.com/cmdjs/specification/blob/master/draft/module.md)\n    * [Chinese (SeaJS-repo)](https://github.com/seajs/seajs/issues/242)\n\n\nCMD 主要有 define, factory, require, export 这么几个东西\n\n * define `define(id?, deps?, factory)`\n * factory `factory(require, exports, module)`\n * require `require(id)`\n * exports `Object`\n\n\nCMD 推荐的 Code Style 是使用 CommonJS 风格的 `require`：\n\n* 这个 require 实际上是一个全局函数，用于加载模块，这里实际就是传入而已\n\n```js\ndefine(function(require, exports) {\n\n    // 获取模块 a 的接口\n    var a = require('./a');\n    // 调用模块 a 的方法\n    a.doSomething();\n\n    // 对外提供 foo 属性\n    exports.foo = 'bar';\n    // 对外提供 doSomething 方法\n    exports.doSomething = function() {};\n\n});\n```\n\n但是你也可以使用 AMD 风格，或者使用 return 来进行模块暴露\n\n```js\ndefine('hello', ['jquery'], function(require, exports, module) {\n\n    // 模块代码...\n\n    // 直接通过 return 暴露接口\n    return {\n        foo: 'bar',\n        doSomething: function() {}\n    };\n\n});\n```\n\n\n\nSea.js 借鉴了 RequireJS 的不少东西，比如将 FlyScript 中的 module.declare 改名为 define 等。Sea.js 更多地来自 Modules/2.0 的观点，但尽可能去掉了学院派的东西，加入了不少实战派的理念。\n\n\n\n## AMD vs CMD\n\n**虽然两者目前都兼容各种风格，但其底层原理并不相同，从其分别推荐的写法就可以看出两者背后原理的不同：**\n\n1. 对于依赖的模块，AMD 是**提前执行**，CMD 是**懒执行**。（都是先加载）\n*  CMD 推崇**依赖就近**，AMD 推崇**依赖前置**。   \n\n看代码：\n\n```js\n// AMD 默认推荐\n\ndefine(['./a', './b'], function(a, b) {  // 依赖前置，提前执行\n\n    a.doSomething()\n    b.doSomething()\n\n})\n\n```\n\n```js\n// CMD\n\ndefine(function(require, exports, module) {\n\n    var a = require('./a')\n    a.doSomething()\n\n    var b = require('./b') // 依赖就近，延迟执行\n    b.doSomething()\n})\n```\n\n\n\n\n\n\n## WebPack\n\n> working...\n","source":"_posts/js-module-loader.markdown","raw":"---\nlayout:     post\ntitle:      \"Example Post with Code Highlight\"\nsubtitle:   \"CommonJS，RequireJS，SeaJS 归纳笔记\"\ndate:       2015-05-25\nauthor:     \"Hux\"\ncatalog:    true\nheader-img: \"post-bg-js-module.jpg\"\ntags:\n    - 前端开发\n    - JavaScript\n---\n\n\n\n## Foreword\n\n> Here comes Module!\n\n随着网站逐渐变成「互联网应用程序」，嵌入网页的 JavaScript 代码越来越庞大，越来越复杂。网页越来越像桌面程序，需要一个团队分工协作、进度管理、单元测试……我们不得不使用软件工程的方法，来管理网页的业务逻辑。\n\n于是，JavaScript 的模块化成为迫切需求。在 ES6 Module 来临之前，JavaScript 社区提供了强大支持，尝试在现有的运行环境下，实现模块的效果。\n\n\n---\n\n## Catalog\n\n\n1.  [CommonJS & Node](#commonjs--node)\n3.  [History](#history)\n4.  [RequireJS & AMD](#requirejs--amd)\n5.  [SeaJS & CMD](#seajs--cmd)\n6.  [AMD vs CMD](#amd-vs-cmd)\n7.  [WebPack](#webpack)\n\n\n\n## CommonJS & Node\n\n> Javascript: not just for browsers any more! —— CommonJS Slogen\n\n前端模块化的事实标准之一，2009 年 8 月，[CommonJS](http://wiki.commonjs.org/wiki/CommonJS) 诞生。\n\nCommonJS 本质上只是一套规范（API 定义），而 Node.js 采用并实现了部分规范，CommonJS Module 的写法也因此广泛流行。\n\n\n让我们看看 Node 中的实现：\n{% codeblock lang:js %}\n// 由于 Node 原生支持模块的作用域，并不需要额外的 wrapper\n// \"as though the module was wrapped in a function\"\n\nvar a = require('./a')  // 加载模块（同步加载）\na.doSomething()         // 等上一句执行完才会执行\n\nexports.b = function(){ // 暴露 b 函数接口\n  // do something\n}\n{% endcodeblock %}\n\n\n`exports`是一个内置对象，就像`require`是一个内置加载函数一样。如果你希望直接赋值一个完整的对象或者构造函数，覆写`module.exports`就可以了。\n\nCommonJS 前身叫 ServerJS ，**后来希望能更加 COMMON，成为通吃各种环境的模块规范，改名为 CommonJS** 。CommonJS 最初只专注于 Server-side 而非浏览器环境，因此它采用了同步加载的机制，这对服务器环境（硬盘 I/O 速度）不是问题，而对浏览器环境（网速）来说并不合适。\n\n\n因此，各种适用于浏览器环境的模块框架与标准逐个诞生，他们的共同点是：\n\n* 采用异步加载（预先加载所有依赖的模块后回调执行，符合浏览器的网络环境）\n* 虽然代码风格不同，但其实都可以看作 CommonJS Modules 语法的变体。\n* 都在向着 **COMMON** 的方向进化：**兼容不同风格，兼容浏览器和服务器两种环境**\n\n本文接下来要讨论的典例是：\n\n* RequireJS & AMD（异步加载，预执行，依赖前置。默认推荐 AMD 写法）\n* SeaJS & CMD（异步加载，懒执行，依赖就近，默认推荐 CommonJS 写法）\n\n\n\n\n\n## History\n\n<!--<h2 id=\"history\"> History </h2>-->\n\n> 此段落参考自玉伯的 [前端模块化开发那点历史](https://github.com/seajs/seajs/issues/588)\n\n09-10 年间，CommonJS（那时还叫 ServerJS） 社区推出 [Modules/1.0](http://wiki.commonjs.org/wiki/Modules) 规范，并且在 Node.js 等环境下取得了很不错的实践。\n\n09年下半年这帮充满干劲的小伙子们想把 ServerJS 的成功经验进一步推广到浏览器端，于是将社区改名叫 CommonJS，同时激烈争论 Modules 的下一版规范。分歧和冲突由此诞生，逐步形成了三大流派：\n\n\n1. **Modules/1.x** 流派。这个观点觉得 1.x 规范已经够用，只要移植到浏览器端就好。要做的是新增 [Modules/Transport](http://wiki.commonjs.org/wiki/Modules/Transport) 规范，即在浏览器上运行前，先通过转换工具将模块转换为符合 Transport 规范的代码。主流代表是服务端的开发人员。现在值得关注的有两个实现：越来越火的 component 和走在前沿的 es6 module transpiler。\n2. **Modules/Async** 流派。这个观点觉得浏览器有自身的特征，不应该直接用 Modules/1.x 规范。这个观点下的典型代表是 [AMD](http://wiki.commonjs.org/wiki/Modules/AsynchronousDefinition) 规范及其实现 [RequireJS](http://requirejs.org/)。这个稍后再细说。\n3. **Modules/2.0** 流派。这个观点觉得浏览器有自身的特征，不应该直接用 Modules/1.x 规范，但应该尽可能与 Modules/1.x 规范保持一致。这个观点下的典型代表是 BravoJS 和 FlyScript 的作者。BravoJS 作者对 CommonJS 的社区的贡献很大，这份 Modules/2.0-draft 规范花了很多心思。FlyScript 的作者提出了 Modules/Wrappings 规范，这规范是 CMD 规范的前身。可惜的是 BravoJS 太学院派，FlyScript 后来做了自我阉割，将整个网站（flyscript.org）下线了。这个观点在本文中的典型代表就是 SeaJS 和 CMD 了\n\n\n补一嘴：阿里 KISSY 的 KMD 其实跟 AMD 非常类似，只是用 `add`和`use` 两个源自于 YUI Modules 的函数名替换了 `define` 和 `require` ，但其原理更接近 RequireJS ，与 YUI Modules 的 `Y` 沙箱 Attach 机制并不相同\n\n\n## RequireJS & AMD\n\n[AMD (Async Module Definition)](http://wiki.commonjs.org/wiki/Modules/AsynchronousDefinition) 是 RequireJS 在推广过程中对模块定义的规范化产出。\n\n> RequireJS is a JavaScript file and module loader. It is optimized for in-browser use, but it can be used in other JavaScript environments\n\nRequireJS 主要解决的还是 CommonJS 同步加载脚本不适合浏览器 这个问题：\n\n{% gist 65481dbbf6d16e831a6cc89c3e37e6e5 display-emails-from-database.php %}\n\n\n> As the comment indicates above, if require() is async, this code will not work. However, loading scripts synchronously in the browser kills performance. So, what to do?\n\n所以我们需要 **Function Wrapping** 来获取依赖并且提前通过 script tag 提前加载进来\n\n\n{% jsfiddle shorttag [tabs] [skin] [width] [height] %}\n\n\n当依赖模块非常多时，这种**依赖前置**的写法会显得有点奇怪，所以 AMD 给了一个语法糖， **simplified CommonJS wrapping**，借鉴了 CommonJS 的 require 就近风格，也更方便对 CommonJS 模块的兼容：\n\n```js\ndefine(function (require) {\n    var dependency1 = require('dependency1'),\n        dependency2 = require('dependency2');\n\n    return function () {};\n});\n```\nThe AMD loader will parse out the `require('')` calls by using `Function.prototype.toString()`, then internally convert the above define call into this:\n\n```js\ndefine(['require', 'dependency1', 'dependency2'], function (require) {\n    var dependency1 = require('dependency1'),\n        dependency2 = require('dependency2');\n\n    return function () {};\n});\n```\n\n出于`Function.prototype.toString()`兼容性和性能的考虑，最好的做法还是做一次 **optimized build**\n\n\n\nAMD 和 CommonJS 的核心争议如下：\n\n### 1. **执行时机**\n\nModules/1.0:\n\n```js\nvar a = require(\"./a\") // 执行到此时，a.js 才同步下载并执行\n```\n\nAMD: （使用 require 的语法糖时）\n\n```js\ndefine([\"require\"],function(require)){\n    // 在这里，a.js 已经下载并且执行好了\n    // 使用 require() 并不是 AMD 的推荐写法\n    var a = require(\"./a\") // 此处仅仅是取模块 a 的 exports\n})\n```\n\nAMD 里提前下载 a.js 是出于对浏览器环境的考虑，只能采取异步下载，这个社区都认可（Sea.js 也是这么做的）\n\n但是 AMD 的执行是 Early Executing，而 Modules/1.0 是第一次 require 时才执行。这个差异很多人不能接受，包括持 Modules/2.0 观点的人也不能接受。\n\n### 2. **书写风格**\n\nAMD 推荐的风格并不使用`require`，而是通过参数传入，破坏了**依赖就近**：\n\n```js\ndefine([\"a\", \"b\", \"c\"],function(a, b, c){\n    // 提前申明了并初始化了所有模块\n\n    true || b.foo(); //即便根本没用到模块 b，但 b 还是提前执行了。\n})\n```\n\n不过，在笔者看来，风格喜好因人而异，主要还是**预执行**和**懒执行**的差异。\n\n另外，require 2.0 也开始思考异步处理**软依赖**（区别于一定需要的**硬依赖**）的问题，提出了这样的方案：\n\n```js\n// 函数体内：\nif(status){\n    async(['a'],function(a){\n        a.doSomething()\n    })\n}\n```\n\n## SeaJS & CMD\n\nCMD (Common Module Definition) 是 [SeaJS](http://seajs.org/docs/) 在推广过程中对模块定义的规范化产出，是 Modules/2.0 流派的支持者，因此 SeaJS 的模块写法尽可能与 Modules/1.x 规范保持一致。\n\n不过目前国外的该流派都死得差不多了，RequireJS 目前成为浏览器端模块的事实标准，国内最有名气的就是玉伯的 Sea.js ，不过对国际的推广力度不够。\n\n* CMD Specification\n    * [English (CMDJS-repo)](https://github.com/cmdjs/specification/blob/master/draft/module.md)\n    * [Chinese (SeaJS-repo)](https://github.com/seajs/seajs/issues/242)\n\n\nCMD 主要有 define, factory, require, export 这么几个东西\n\n * define `define(id?, deps?, factory)`\n * factory `factory(require, exports, module)`\n * require `require(id)`\n * exports `Object`\n\n\nCMD 推荐的 Code Style 是使用 CommonJS 风格的 `require`：\n\n* 这个 require 实际上是一个全局函数，用于加载模块，这里实际就是传入而已\n\n```js\ndefine(function(require, exports) {\n\n    // 获取模块 a 的接口\n    var a = require('./a');\n    // 调用模块 a 的方法\n    a.doSomething();\n\n    // 对外提供 foo 属性\n    exports.foo = 'bar';\n    // 对外提供 doSomething 方法\n    exports.doSomething = function() {};\n\n});\n```\n\n但是你也可以使用 AMD 风格，或者使用 return 来进行模块暴露\n\n```js\ndefine('hello', ['jquery'], function(require, exports, module) {\n\n    // 模块代码...\n\n    // 直接通过 return 暴露接口\n    return {\n        foo: 'bar',\n        doSomething: function() {}\n    };\n\n});\n```\n\n\n\nSea.js 借鉴了 RequireJS 的不少东西，比如将 FlyScript 中的 module.declare 改名为 define 等。Sea.js 更多地来自 Modules/2.0 的观点，但尽可能去掉了学院派的东西，加入了不少实战派的理念。\n\n\n\n## AMD vs CMD\n\n**虽然两者目前都兼容各种风格，但其底层原理并不相同，从其分别推荐的写法就可以看出两者背后原理的不同：**\n\n1. 对于依赖的模块，AMD 是**提前执行**，CMD 是**懒执行**。（都是先加载）\n*  CMD 推崇**依赖就近**，AMD 推崇**依赖前置**。   \n\n看代码：\n\n```js\n// AMD 默认推荐\n\ndefine(['./a', './b'], function(a, b) {  // 依赖前置，提前执行\n\n    a.doSomething()\n    b.doSomething()\n\n})\n\n```\n\n```js\n// CMD\n\ndefine(function(require, exports, module) {\n\n    var a = require('./a')\n    a.doSomething()\n\n    var b = require('./b') // 依赖就近，延迟执行\n    b.doSomething()\n})\n```\n\n\n\n\n\n\n## WebPack\n\n> working...\n","slug":"js-module-loader","published":1,"updated":"2016-06-17T06:01:10.477Z","comments":1,"photos":[],"link":"","_id":"cipnd9728001hyww73sey00zd","content":"<h2 id=\"Foreword\"><a href=\"#Foreword\" class=\"headerlink\" title=\"Foreword\"></a>Foreword</h2><blockquote>\n<p>Here comes Module!</p>\n</blockquote>\n<p>随着网站逐渐变成「互联网应用程序」，嵌入网页的 JavaScript 代码越来越庞大，越来越复杂。网页越来越像桌面程序，需要一个团队分工协作、进度管理、单元测试……我们不得不使用软件工程的方法，来管理网页的业务逻辑。</p>\n<p>于是，JavaScript 的模块化成为迫切需求。在 ES6 Module 来临之前，JavaScript 社区提供了强大支持，尝试在现有的运行环境下，实现模块的效果。</p>\n<hr>\n<h2 id=\"Catalog\"><a href=\"#Catalog\" class=\"headerlink\" title=\"Catalog\"></a>Catalog</h2><ol>\n<li><a href=\"#commonjs--node\">CommonJS &amp; Node</a></li>\n<li><a href=\"#history\">History</a></li>\n<li><a href=\"#requirejs--amd\">RequireJS &amp; AMD</a></li>\n<li><a href=\"#seajs--cmd\">SeaJS &amp; CMD</a></li>\n<li><a href=\"#amd-vs-cmd\">AMD vs CMD</a></li>\n<li><a href=\"#webpack\">WebPack</a></li>\n</ol>\n<h2 id=\"CommonJS-amp-Node\"><a href=\"#CommonJS-amp-Node\" class=\"headerlink\" title=\"CommonJS &amp; Node\"></a>CommonJS &amp; Node</h2><blockquote>\n<p>Javascript: not just for browsers any more! —— CommonJS Slogen</p>\n</blockquote>\n<p>前端模块化的事实标准之一，2009 年 8 月，<a href=\"http://wiki.commonjs.org/wiki/CommonJS\" target=\"_blank\" rel=\"external\">CommonJS</a> 诞生。</p>\n<p>CommonJS 本质上只是一套规范（API 定义），而 Node.js 采用并实现了部分规范，CommonJS Module 的写法也因此广泛流行。</p>\n<p>让我们看看 Node 中的实现：<br><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 由于 Node 原生支持模块的作用域，并不需要额外的 wrapper</span></span><br><span class=\"line\"><span class=\"comment\">// \"as though the module was wrapped in a function\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"built_in\">require</span>(<span class=\"string\">'./a'</span>)  <span class=\"comment\">// 加载模块（同步加载）</span></span><br><span class=\"line\">a.doSomething()         <span class=\"comment\">// 等上一句执行完才会执行</span></span><br><span class=\"line\"></span><br><span class=\"line\">exports.b = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123; <span class=\"comment\">// 暴露 b 函数接口</span></span><br><span class=\"line\">  <span class=\"comment\">// do something</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><code>exports</code>是一个内置对象，就像<code>require</code>是一个内置加载函数一样。如果你希望直接赋值一个完整的对象或者构造函数，覆写<code>module.exports</code>就可以了。</p>\n<p>CommonJS 前身叫 ServerJS ，<strong>后来希望能更加 COMMON，成为通吃各种环境的模块规范，改名为 CommonJS</strong> 。CommonJS 最初只专注于 Server-side 而非浏览器环境，因此它采用了同步加载的机制，这对服务器环境（硬盘 I/O 速度）不是问题，而对浏览器环境（网速）来说并不合适。</p>\n<p>因此，各种适用于浏览器环境的模块框架与标准逐个诞生，他们的共同点是：</p>\n<ul>\n<li>采用异步加载（预先加载所有依赖的模块后回调执行，符合浏览器的网络环境）</li>\n<li>虽然代码风格不同，但其实都可以看作 CommonJS Modules 语法的变体。</li>\n<li>都在向着 <strong>COMMON</strong> 的方向进化：<strong>兼容不同风格，兼容浏览器和服务器两种环境</strong></li>\n</ul>\n<p>本文接下来要讨论的典例是：</p>\n<ul>\n<li>RequireJS &amp; AMD（异步加载，预执行，依赖前置。默认推荐 AMD 写法）</li>\n<li>SeaJS &amp; CMD（异步加载，懒执行，依赖就近，默认推荐 CommonJS 写法）</li>\n</ul>\n<h2 id=\"History\"><a href=\"#History\" class=\"headerlink\" title=\"History\"></a>History</h2><!--<h2 id=\"history\"> History </h2>-->\n<blockquote>\n<p>此段落参考自玉伯的 <a href=\"https://github.com/seajs/seajs/issues/588\" target=\"_blank\" rel=\"external\">前端模块化开发那点历史</a></p>\n</blockquote>\n<p>09-10 年间，CommonJS（那时还叫 ServerJS） 社区推出 <a href=\"http://wiki.commonjs.org/wiki/Modules\" target=\"_blank\" rel=\"external\">Modules/1.0</a> 规范，并且在 Node.js 等环境下取得了很不错的实践。</p>\n<p>09年下半年这帮充满干劲的小伙子们想把 ServerJS 的成功经验进一步推广到浏览器端，于是将社区改名叫 CommonJS，同时激烈争论 Modules 的下一版规范。分歧和冲突由此诞生，逐步形成了三大流派：</p>\n<ol>\n<li><strong>Modules/1.x</strong> 流派。这个观点觉得 1.x 规范已经够用，只要移植到浏览器端就好。要做的是新增 <a href=\"http://wiki.commonjs.org/wiki/Modules/Transport\" target=\"_blank\" rel=\"external\">Modules/Transport</a> 规范，即在浏览器上运行前，先通过转换工具将模块转换为符合 Transport 规范的代码。主流代表是服务端的开发人员。现在值得关注的有两个实现：越来越火的 component 和走在前沿的 es6 module transpiler。</li>\n<li><strong>Modules/Async</strong> 流派。这个观点觉得浏览器有自身的特征，不应该直接用 Modules/1.x 规范。这个观点下的典型代表是 <a href=\"http://wiki.commonjs.org/wiki/Modules/AsynchronousDefinition\" target=\"_blank\" rel=\"external\">AMD</a> 规范及其实现 <a href=\"http://requirejs.org/\" target=\"_blank\" rel=\"external\">RequireJS</a>。这个稍后再细说。</li>\n<li><strong>Modules/2.0</strong> 流派。这个观点觉得浏览器有自身的特征，不应该直接用 Modules/1.x 规范，但应该尽可能与 Modules/1.x 规范保持一致。这个观点下的典型代表是 BravoJS 和 FlyScript 的作者。BravoJS 作者对 CommonJS 的社区的贡献很大，这份 Modules/2.0-draft 规范花了很多心思。FlyScript 的作者提出了 Modules/Wrappings 规范，这规范是 CMD 规范的前身。可惜的是 BravoJS 太学院派，FlyScript 后来做了自我阉割，将整个网站（flyscript.org）下线了。这个观点在本文中的典型代表就是 SeaJS 和 CMD 了</li>\n</ol>\n<p>补一嘴：阿里 KISSY 的 KMD 其实跟 AMD 非常类似，只是用 <code>add</code>和<code>use</code> 两个源自于 YUI Modules 的函数名替换了 <code>define</code> 和 <code>require</code> ，但其原理更接近 RequireJS ，与 YUI Modules 的 <code>Y</code> 沙箱 Attach 机制并不相同</p>\n<h2 id=\"RequireJS-amp-AMD\"><a href=\"#RequireJS-amp-AMD\" class=\"headerlink\" title=\"RequireJS &amp; AMD\"></a>RequireJS &amp; AMD</h2><p><a href=\"http://wiki.commonjs.org/wiki/Modules/AsynchronousDefinition\" target=\"_blank\" rel=\"external\">AMD (Async Module Definition)</a> 是 RequireJS 在推广过程中对模块定义的规范化产出。</p>\n<blockquote>\n<p>RequireJS is a JavaScript file and module loader. It is optimized for in-browser use, but it can be used in other JavaScript environments</p>\n</blockquote>\n<p>RequireJS 主要解决的还是 CommonJS 同步加载脚本不适合浏览器 这个问题：</p>\n<script src=\"//gist.github.com/65481dbbf6d16e831a6cc89c3e37e6e5.js?file=display-emails-from-database.php\"></script>\n<blockquote>\n<p>As the comment indicates above, if require() is async, this code will not work. However, loading scripts synchronously in the browser kills performance. So, what to do?</p>\n</blockquote>\n<p>所以我们需要 <strong>Function Wrapping</strong> 来获取依赖并且提前通过 script tag 提前加载进来</p>\n<iframe scrolling=\"no\" width=\"[width]\" height=\"[height]\" src=\"http://jsfiddle.net/shorttag/embedded/[tabs]/[skin]\" frameborder=\"0\" allowfullscreen></iframe>\n<p>当依赖模块非常多时，这种<strong>依赖前置</strong>的写法会显得有点奇怪，所以 AMD 给了一个语法糖， <strong>simplified CommonJS wrapping</strong>，借鉴了 CommonJS 的 require 就近风格，也更方便对 CommonJS 模块的兼容：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">define(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">require</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> dependency1 = <span class=\"built_in\">require</span>(<span class=\"string\">'dependency1'</span>),</span><br><span class=\"line\">        dependency2 = <span class=\"built_in\">require</span>(<span class=\"string\">'dependency2'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;&#125;;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>The AMD loader will parse out the <code>require(&#39;&#39;)</code> calls by using <code>Function.prototype.toString()</code>, then internally convert the above define call into this:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">define([<span class=\"string\">'require'</span>, <span class=\"string\">'dependency1'</span>, <span class=\"string\">'dependency2'</span>], <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">require</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> dependency1 = <span class=\"built_in\">require</span>(<span class=\"string\">'dependency1'</span>),</span><br><span class=\"line\">        dependency2 = <span class=\"built_in\">require</span>(<span class=\"string\">'dependency2'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;&#125;;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>出于<code>Function.prototype.toString()</code>兼容性和性能的考虑，最好的做法还是做一次 <strong>optimized build</strong></p>\n<p>AMD 和 CommonJS 的核心争议如下：</p>\n<h3 id=\"1-执行时机\"><a href=\"#1-执行时机\" class=\"headerlink\" title=\"1. 执行时机\"></a>1. <strong>执行时机</strong></h3><p>Modules/1.0:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"built_in\">require</span>(<span class=\"string\">\"./a\"</span>) <span class=\"comment\">// 执行到此时，a.js 才同步下载并执行</span></span><br></pre></td></tr></table></figure>\n<p>AMD: （使用 require 的语法糖时）</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">define([<span class=\"string\">\"require\"</span>],<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">require</span>))</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 在这里，a.js 已经下载并且执行好了</span></span><br><span class=\"line\">    <span class=\"comment\">// 使用 require() 并不是 AMD 的推荐写法</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> a = <span class=\"built_in\">require</span>(<span class=\"string\">\"./a\"</span>) <span class=\"comment\">// 此处仅仅是取模块 a 的 exports</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>AMD 里提前下载 a.js 是出于对浏览器环境的考虑，只能采取异步下载，这个社区都认可（Sea.js 也是这么做的）</p>\n<p>但是 AMD 的执行是 Early Executing，而 Modules/1.0 是第一次 require 时才执行。这个差异很多人不能接受，包括持 Modules/2.0 观点的人也不能接受。</p>\n<h3 id=\"2-书写风格\"><a href=\"#2-书写风格\" class=\"headerlink\" title=\"2. 书写风格\"></a>2. <strong>书写风格</strong></h3><p>AMD 推荐的风格并不使用<code>require</code>，而是通过参数传入，破坏了<strong>依赖就近</strong>：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">define([<span class=\"string\">\"a\"</span>, <span class=\"string\">\"b\"</span>, <span class=\"string\">\"c\"</span>],<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a, b, c</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 提前申明了并初始化了所有模块</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"literal\">true</span> || b.foo(); <span class=\"comment\">//即便根本没用到模块 b，但 b 还是提前执行了。</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>不过，在笔者看来，风格喜好因人而异，主要还是<strong>预执行</strong>和<strong>懒执行</strong>的差异。</p>\n<p>另外，require 2.0 也开始思考异步处理<strong>软依赖</strong>（区别于一定需要的<strong>硬依赖</strong>）的问题，提出了这样的方案：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 函数体内：</span></span><br><span class=\"line\"><span class=\"keyword\">if</span>(status)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">async</span>([<span class=\"string\">'a'</span>],<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a</span>)</span>&#123;</span><br><span class=\"line\">        a.doSomething()</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"SeaJS-amp-CMD\"><a href=\"#SeaJS-amp-CMD\" class=\"headerlink\" title=\"SeaJS &amp; CMD\"></a>SeaJS &amp; CMD</h2><p>CMD (Common Module Definition) 是 <a href=\"http://seajs.org/docs/\" target=\"_blank\" rel=\"external\">SeaJS</a> 在推广过程中对模块定义的规范化产出，是 Modules/2.0 流派的支持者，因此 SeaJS 的模块写法尽可能与 Modules/1.x 规范保持一致。</p>\n<p>不过目前国外的该流派都死得差不多了，RequireJS 目前成为浏览器端模块的事实标准，国内最有名气的就是玉伯的 Sea.js ，不过对国际的推广力度不够。</p>\n<ul>\n<li>CMD Specification<ul>\n<li><a href=\"https://github.com/cmdjs/specification/blob/master/draft/module.md\" target=\"_blank\" rel=\"external\">English (CMDJS-repo)</a></li>\n<li><a href=\"https://github.com/seajs/seajs/issues/242\" target=\"_blank\" rel=\"external\">Chinese (SeaJS-repo)</a></li>\n</ul>\n</li>\n</ul>\n<p>CMD 主要有 define, factory, require, export 这么几个东西</p>\n<ul>\n<li>define <code>define(id?, deps?, factory)</code></li>\n<li>factory <code>factory(require, exports, module)</code></li>\n<li>require <code>require(id)</code></li>\n<li>exports <code>Object</code></li>\n</ul>\n<p>CMD 推荐的 Code Style 是使用 CommonJS 风格的 <code>require</code>：</p>\n<ul>\n<li>这个 require 实际上是一个全局函数，用于加载模块，这里实际就是传入而已</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">define(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">require, exports</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 获取模块 a 的接口</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> a = <span class=\"built_in\">require</span>(<span class=\"string\">'./a'</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 调用模块 a 的方法</span></span><br><span class=\"line\">    a.doSomething();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 对外提供 foo 属性</span></span><br><span class=\"line\">    exports.foo = <span class=\"string\">'bar'</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 对外提供 doSomething 方法</span></span><br><span class=\"line\">    exports.doSomething = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>但是你也可以使用 AMD 风格，或者使用 return 来进行模块暴露</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">define(<span class=\"string\">'hello'</span>, [<span class=\"string\">'jquery'</span>], <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">require, exports, module</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 模块代码...</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 直接通过 return 暴露接口</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        foo: <span class=\"string\">'bar'</span>,</span><br><span class=\"line\">        doSomething: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>Sea.js 借鉴了 RequireJS 的不少东西，比如将 FlyScript 中的 module.declare 改名为 define 等。Sea.js 更多地来自 Modules/2.0 的观点，但尽可能去掉了学院派的东西，加入了不少实战派的理念。</p>\n<h2 id=\"AMD-vs-CMD\"><a href=\"#AMD-vs-CMD\" class=\"headerlink\" title=\"AMD vs CMD\"></a>AMD vs CMD</h2><p><strong>虽然两者目前都兼容各种风格，但其底层原理并不相同，从其分别推荐的写法就可以看出两者背后原理的不同：</strong></p>\n<ol>\n<li>对于依赖的模块，AMD 是<strong>提前执行</strong>，CMD 是<strong>懒执行</strong>。（都是先加载）</li>\n</ol>\n<ul>\n<li>CMD 推崇<strong>依赖就近</strong>，AMD 推崇<strong>依赖前置</strong>。   </li>\n</ul>\n<p>看代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// AMD 默认推荐</span></span><br><span class=\"line\"></span><br><span class=\"line\">define([<span class=\"string\">'./a'</span>, <span class=\"string\">'./b'</span>], <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a, b</span>) </span>&#123;  <span class=\"comment\">// 依赖前置，提前执行</span></span><br><span class=\"line\"></span><br><span class=\"line\">    a.doSomething()</span><br><span class=\"line\">    b.doSomething()</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// CMD</span></span><br><span class=\"line\"></span><br><span class=\"line\">define(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">require, exports, module</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> a = <span class=\"built_in\">require</span>(<span class=\"string\">'./a'</span>)</span><br><span class=\"line\">    a.doSomething()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> b = <span class=\"built_in\">require</span>(<span class=\"string\">'./b'</span>) <span class=\"comment\">// 依赖就近，延迟执行</span></span><br><span class=\"line\">    b.doSomething()</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h2 id=\"WebPack\"><a href=\"#WebPack\" class=\"headerlink\" title=\"WebPack\"></a>WebPack</h2><blockquote>\n<p>working…</p>\n</blockquote>\n","excerpt":"","more":"<h2 id=\"Foreword\"><a href=\"#Foreword\" class=\"headerlink\" title=\"Foreword\"></a>Foreword</h2><blockquote>\n<p>Here comes Module!</p>\n</blockquote>\n<p>随着网站逐渐变成「互联网应用程序」，嵌入网页的 JavaScript 代码越来越庞大，越来越复杂。网页越来越像桌面程序，需要一个团队分工协作、进度管理、单元测试……我们不得不使用软件工程的方法，来管理网页的业务逻辑。</p>\n<p>于是，JavaScript 的模块化成为迫切需求。在 ES6 Module 来临之前，JavaScript 社区提供了强大支持，尝试在现有的运行环境下，实现模块的效果。</p>\n<hr>\n<h2 id=\"Catalog\"><a href=\"#Catalog\" class=\"headerlink\" title=\"Catalog\"></a>Catalog</h2><ol>\n<li><a href=\"#commonjs--node\">CommonJS &amp; Node</a></li>\n<li><a href=\"#history\">History</a></li>\n<li><a href=\"#requirejs--amd\">RequireJS &amp; AMD</a></li>\n<li><a href=\"#seajs--cmd\">SeaJS &amp; CMD</a></li>\n<li><a href=\"#amd-vs-cmd\">AMD vs CMD</a></li>\n<li><a href=\"#webpack\">WebPack</a></li>\n</ol>\n<h2 id=\"CommonJS-amp-Node\"><a href=\"#CommonJS-amp-Node\" class=\"headerlink\" title=\"CommonJS &amp; Node\"></a>CommonJS &amp; Node</h2><blockquote>\n<p>Javascript: not just for browsers any more! —— CommonJS Slogen</p>\n</blockquote>\n<p>前端模块化的事实标准之一，2009 年 8 月，<a href=\"http://wiki.commonjs.org/wiki/CommonJS\">CommonJS</a> 诞生。</p>\n<p>CommonJS 本质上只是一套规范（API 定义），而 Node.js 采用并实现了部分规范，CommonJS Module 的写法也因此广泛流行。</p>\n<p>让我们看看 Node 中的实现：<br><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 由于 Node 原生支持模块的作用域，并不需要额外的 wrapper</span></span><br><span class=\"line\"><span class=\"comment\">// \"as though the module was wrapped in a function\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"built_in\">require</span>(<span class=\"string\">'./a'</span>)  <span class=\"comment\">// 加载模块（同步加载）</span></span><br><span class=\"line\">a.doSomething()         <span class=\"comment\">// 等上一句执行完才会执行</span></span><br><span class=\"line\"></span><br><span class=\"line\">exports.b = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123; <span class=\"comment\">// 暴露 b 函数接口</span></span><br><span class=\"line\">  <span class=\"comment\">// do something</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><code>exports</code>是一个内置对象，就像<code>require</code>是一个内置加载函数一样。如果你希望直接赋值一个完整的对象或者构造函数，覆写<code>module.exports</code>就可以了。</p>\n<p>CommonJS 前身叫 ServerJS ，<strong>后来希望能更加 COMMON，成为通吃各种环境的模块规范，改名为 CommonJS</strong> 。CommonJS 最初只专注于 Server-side 而非浏览器环境，因此它采用了同步加载的机制，这对服务器环境（硬盘 I/O 速度）不是问题，而对浏览器环境（网速）来说并不合适。</p>\n<p>因此，各种适用于浏览器环境的模块框架与标准逐个诞生，他们的共同点是：</p>\n<ul>\n<li>采用异步加载（预先加载所有依赖的模块后回调执行，符合浏览器的网络环境）</li>\n<li>虽然代码风格不同，但其实都可以看作 CommonJS Modules 语法的变体。</li>\n<li>都在向着 <strong>COMMON</strong> 的方向进化：<strong>兼容不同风格，兼容浏览器和服务器两种环境</strong></li>\n</ul>\n<p>本文接下来要讨论的典例是：</p>\n<ul>\n<li>RequireJS &amp; AMD（异步加载，预执行，依赖前置。默认推荐 AMD 写法）</li>\n<li>SeaJS &amp; CMD（异步加载，懒执行，依赖就近，默认推荐 CommonJS 写法）</li>\n</ul>\n<h2 id=\"History\"><a href=\"#History\" class=\"headerlink\" title=\"History\"></a>History</h2><!--<h2 id=\"history\"> History </h2>-->\n<blockquote>\n<p>此段落参考自玉伯的 <a href=\"https://github.com/seajs/seajs/issues/588\">前端模块化开发那点历史</a></p>\n</blockquote>\n<p>09-10 年间，CommonJS（那时还叫 ServerJS） 社区推出 <a href=\"http://wiki.commonjs.org/wiki/Modules\">Modules/1.0</a> 规范，并且在 Node.js 等环境下取得了很不错的实践。</p>\n<p>09年下半年这帮充满干劲的小伙子们想把 ServerJS 的成功经验进一步推广到浏览器端，于是将社区改名叫 CommonJS，同时激烈争论 Modules 的下一版规范。分歧和冲突由此诞生，逐步形成了三大流派：</p>\n<ol>\n<li><strong>Modules/1.x</strong> 流派。这个观点觉得 1.x 规范已经够用，只要移植到浏览器端就好。要做的是新增 <a href=\"http://wiki.commonjs.org/wiki/Modules/Transport\">Modules/Transport</a> 规范，即在浏览器上运行前，先通过转换工具将模块转换为符合 Transport 规范的代码。主流代表是服务端的开发人员。现在值得关注的有两个实现：越来越火的 component 和走在前沿的 es6 module transpiler。</li>\n<li><strong>Modules/Async</strong> 流派。这个观点觉得浏览器有自身的特征，不应该直接用 Modules/1.x 规范。这个观点下的典型代表是 <a href=\"http://wiki.commonjs.org/wiki/Modules/AsynchronousDefinition\">AMD</a> 规范及其实现 <a href=\"http://requirejs.org/\">RequireJS</a>。这个稍后再细说。</li>\n<li><strong>Modules/2.0</strong> 流派。这个观点觉得浏览器有自身的特征，不应该直接用 Modules/1.x 规范，但应该尽可能与 Modules/1.x 规范保持一致。这个观点下的典型代表是 BravoJS 和 FlyScript 的作者。BravoJS 作者对 CommonJS 的社区的贡献很大，这份 Modules/2.0-draft 规范花了很多心思。FlyScript 的作者提出了 Modules/Wrappings 规范，这规范是 CMD 规范的前身。可惜的是 BravoJS 太学院派，FlyScript 后来做了自我阉割，将整个网站（flyscript.org）下线了。这个观点在本文中的典型代表就是 SeaJS 和 CMD 了</li>\n</ol>\n<p>补一嘴：阿里 KISSY 的 KMD 其实跟 AMD 非常类似，只是用 <code>add</code>和<code>use</code> 两个源自于 YUI Modules 的函数名替换了 <code>define</code> 和 <code>require</code> ，但其原理更接近 RequireJS ，与 YUI Modules 的 <code>Y</code> 沙箱 Attach 机制并不相同</p>\n<h2 id=\"RequireJS-amp-AMD\"><a href=\"#RequireJS-amp-AMD\" class=\"headerlink\" title=\"RequireJS &amp; AMD\"></a>RequireJS &amp; AMD</h2><p><a href=\"http://wiki.commonjs.org/wiki/Modules/AsynchronousDefinition\">AMD (Async Module Definition)</a> 是 RequireJS 在推广过程中对模块定义的规范化产出。</p>\n<blockquote>\n<p>RequireJS is a JavaScript file and module loader. It is optimized for in-browser use, but it can be used in other JavaScript environments</p>\n</blockquote>\n<p>RequireJS 主要解决的还是 CommonJS 同步加载脚本不适合浏览器 这个问题：</p>\n<script src=\"//gist.github.com/65481dbbf6d16e831a6cc89c3e37e6e5.js?file=display-emails-from-database.php\"></script>\n<blockquote>\n<p>As the comment indicates above, if require() is async, this code will not work. However, loading scripts synchronously in the browser kills performance. So, what to do?</p>\n</blockquote>\n<p>所以我们需要 <strong>Function Wrapping</strong> 来获取依赖并且提前通过 script tag 提前加载进来</p>\n<iframe scrolling=\"no\" width=\"[width]\" height=\"[height]\" src=\"http://jsfiddle.net/shorttag/embedded/[tabs]/[skin]\" frameborder=\"0\" allowfullscreen></iframe>\n<p>当依赖模块非常多时，这种<strong>依赖前置</strong>的写法会显得有点奇怪，所以 AMD 给了一个语法糖， <strong>simplified CommonJS wrapping</strong>，借鉴了 CommonJS 的 require 就近风格，也更方便对 CommonJS 模块的兼容：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">define(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">require</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> dependency1 = <span class=\"built_in\">require</span>(<span class=\"string\">'dependency1'</span>),</span><br><span class=\"line\">        dependency2 = <span class=\"built_in\">require</span>(<span class=\"string\">'dependency2'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;&#125;;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>The AMD loader will parse out the <code>require(&#39;&#39;)</code> calls by using <code>Function.prototype.toString()</code>, then internally convert the above define call into this:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">define([<span class=\"string\">'require'</span>, <span class=\"string\">'dependency1'</span>, <span class=\"string\">'dependency2'</span>], <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">require</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> dependency1 = <span class=\"built_in\">require</span>(<span class=\"string\">'dependency1'</span>),</span><br><span class=\"line\">        dependency2 = <span class=\"built_in\">require</span>(<span class=\"string\">'dependency2'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;&#125;;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>出于<code>Function.prototype.toString()</code>兼容性和性能的考虑，最好的做法还是做一次 <strong>optimized build</strong></p>\n<p>AMD 和 CommonJS 的核心争议如下：</p>\n<h3 id=\"1-执行时机\"><a href=\"#1-执行时机\" class=\"headerlink\" title=\"1. 执行时机\"></a>1. <strong>执行时机</strong></h3><p>Modules/1.0:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"built_in\">require</span>(<span class=\"string\">\"./a\"</span>) <span class=\"comment\">// 执行到此时，a.js 才同步下载并执行</span></span><br></pre></td></tr></table></figure>\n<p>AMD: （使用 require 的语法糖时）</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">define([<span class=\"string\">\"require\"</span>],<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">require</span>))</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 在这里，a.js 已经下载并且执行好了</span></span><br><span class=\"line\">    <span class=\"comment\">// 使用 require() 并不是 AMD 的推荐写法</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> a = <span class=\"built_in\">require</span>(<span class=\"string\">\"./a\"</span>) <span class=\"comment\">// 此处仅仅是取模块 a 的 exports</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>AMD 里提前下载 a.js 是出于对浏览器环境的考虑，只能采取异步下载，这个社区都认可（Sea.js 也是这么做的）</p>\n<p>但是 AMD 的执行是 Early Executing，而 Modules/1.0 是第一次 require 时才执行。这个差异很多人不能接受，包括持 Modules/2.0 观点的人也不能接受。</p>\n<h3 id=\"2-书写风格\"><a href=\"#2-书写风格\" class=\"headerlink\" title=\"2. 书写风格\"></a>2. <strong>书写风格</strong></h3><p>AMD 推荐的风格并不使用<code>require</code>，而是通过参数传入，破坏了<strong>依赖就近</strong>：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">define([<span class=\"string\">\"a\"</span>, <span class=\"string\">\"b\"</span>, <span class=\"string\">\"c\"</span>],<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a, b, c</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 提前申明了并初始化了所有模块</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"literal\">true</span> || b.foo(); <span class=\"comment\">//即便根本没用到模块 b，但 b 还是提前执行了。</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>不过，在笔者看来，风格喜好因人而异，主要还是<strong>预执行</strong>和<strong>懒执行</strong>的差异。</p>\n<p>另外，require 2.0 也开始思考异步处理<strong>软依赖</strong>（区别于一定需要的<strong>硬依赖</strong>）的问题，提出了这样的方案：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 函数体内：</span></span><br><span class=\"line\"><span class=\"keyword\">if</span>(status)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">async</span>([<span class=\"string\">'a'</span>],<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a</span>)</span>&#123;</span><br><span class=\"line\">        a.doSomething()</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"SeaJS-amp-CMD\"><a href=\"#SeaJS-amp-CMD\" class=\"headerlink\" title=\"SeaJS &amp; CMD\"></a>SeaJS &amp; CMD</h2><p>CMD (Common Module Definition) 是 <a href=\"http://seajs.org/docs/\">SeaJS</a> 在推广过程中对模块定义的规范化产出，是 Modules/2.0 流派的支持者，因此 SeaJS 的模块写法尽可能与 Modules/1.x 规范保持一致。</p>\n<p>不过目前国外的该流派都死得差不多了，RequireJS 目前成为浏览器端模块的事实标准，国内最有名气的就是玉伯的 Sea.js ，不过对国际的推广力度不够。</p>\n<ul>\n<li>CMD Specification<ul>\n<li><a href=\"https://github.com/cmdjs/specification/blob/master/draft/module.md\">English (CMDJS-repo)</a></li>\n<li><a href=\"https://github.com/seajs/seajs/issues/242\">Chinese (SeaJS-repo)</a></li>\n</ul>\n</li>\n</ul>\n<p>CMD 主要有 define, factory, require, export 这么几个东西</p>\n<ul>\n<li>define <code>define(id?, deps?, factory)</code></li>\n<li>factory <code>factory(require, exports, module)</code></li>\n<li>require <code>require(id)</code></li>\n<li>exports <code>Object</code></li>\n</ul>\n<p>CMD 推荐的 Code Style 是使用 CommonJS 风格的 <code>require</code>：</p>\n<ul>\n<li>这个 require 实际上是一个全局函数，用于加载模块，这里实际就是传入而已</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">define(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">require, exports</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 获取模块 a 的接口</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> a = <span class=\"built_in\">require</span>(<span class=\"string\">'./a'</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 调用模块 a 的方法</span></span><br><span class=\"line\">    a.doSomething();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 对外提供 foo 属性</span></span><br><span class=\"line\">    exports.foo = <span class=\"string\">'bar'</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 对外提供 doSomething 方法</span></span><br><span class=\"line\">    exports.doSomething = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>但是你也可以使用 AMD 风格，或者使用 return 来进行模块暴露</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">define(<span class=\"string\">'hello'</span>, [<span class=\"string\">'jquery'</span>], <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">require, exports, module</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 模块代码...</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 直接通过 return 暴露接口</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        foo: <span class=\"string\">'bar'</span>,</span><br><span class=\"line\">        doSomething: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>Sea.js 借鉴了 RequireJS 的不少东西，比如将 FlyScript 中的 module.declare 改名为 define 等。Sea.js 更多地来自 Modules/2.0 的观点，但尽可能去掉了学院派的东西，加入了不少实战派的理念。</p>\n<h2 id=\"AMD-vs-CMD\"><a href=\"#AMD-vs-CMD\" class=\"headerlink\" title=\"AMD vs CMD\"></a>AMD vs CMD</h2><p><strong>虽然两者目前都兼容各种风格，但其底层原理并不相同，从其分别推荐的写法就可以看出两者背后原理的不同：</strong></p>\n<ol>\n<li>对于依赖的模块，AMD 是<strong>提前执行</strong>，CMD 是<strong>懒执行</strong>。（都是先加载）</li>\n</ol>\n<ul>\n<li>CMD 推崇<strong>依赖就近</strong>，AMD 推崇<strong>依赖前置</strong>。   </li>\n</ul>\n<p>看代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// AMD 默认推荐</span></span><br><span class=\"line\"></span><br><span class=\"line\">define([<span class=\"string\">'./a'</span>, <span class=\"string\">'./b'</span>], <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a, b</span>) </span>&#123;  <span class=\"comment\">// 依赖前置，提前执行</span></span><br><span class=\"line\"></span><br><span class=\"line\">    a.doSomething()</span><br><span class=\"line\">    b.doSomething()</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// CMD</span></span><br><span class=\"line\"></span><br><span class=\"line\">define(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">require, exports, module</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> a = <span class=\"built_in\">require</span>(<span class=\"string\">'./a'</span>)</span><br><span class=\"line\">    a.doSomething()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> b = <span class=\"built_in\">require</span>(<span class=\"string\">'./b'</span>) <span class=\"comment\">// 依赖就近，延迟执行</span></span><br><span class=\"line\">    b.doSomething()</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h2 id=\"WebPack\"><a href=\"#WebPack\" class=\"headerlink\" title=\"WebPack\"></a>WebPack</h2><blockquote>\n<p>working…</p>\n</blockquote>\n"},{"layout":"keynote","title":"AngularJS 1x Style Guide","subtitle":"Keynote: AngularJS 1x Style Guide","iframe":null,"date":"2016-06-16T16:00:00.000Z","author":"","header-img":"post-bg-js-version.jpg","_content":"#Angular 1.x 编码规则\n##Angular 团队支持\n<非常感谢Angular团队领导Igor Minar,检查审视，贡献必要的资料\n\n##目录\n\t1.[单一职责](#single-responsibility)\n\t1.[IIFE](#iife)\n\t1.[Modules](#modules)\n\t1.[Controllers](#controllers)\n\t1.[Services](#services)\n\t1.[Factories](#factories)\n\t1.[数据服务](#dataservices)\n\t1.[Directives](#directives)\n\t1.[Promises解决方案](#promises)\n\t1.[手动依赖注入](#manualdi)\n\t1.[压缩和注解](#minification-and-annotation)\n\t1.[异常处理](#exception-handling)\n\t1.[命名规则](#naming)\n\t1.[应用结构优化准则](#application-structure-lift-principle)\n\t1.[应用结构](#application-structure)\n\t1.[模块化](#modularity)\n\t1.[启动](#startup-logic)\n\t1.[Angular $服务包装](#angular-wrapper-services)\n\t1.[测试](#testing)\n\t1.[动画](#animations)\n\t1.[评论](#comments)\n\t1.[JSHint](#js-hint)\n\t1.[JSCS](#jscs)\n\t1.[常量](#constants)\n\t1.[文件模板和代码片段](#file-templates-and-snippets)\n\t1.[路由](#routing)\n\t1.[自动化任务](#task-automation)\n\t1.[Filter过滤器](#filter)\n\t1.[Angular 文档](#angular-docs)\n\n## 单一职责\n\n### 规则1\n##### [Style [Y001](#style-y001)]\n\n\t- 每个文件仅包含一个组件，并且使其少于400行代码，它的好处在于\n\t\t1.对于测试来说更加容易\n\t\t1.使得代码可读性更强，更好维护，避免团队在源代码控制方面的问题\n\t\t1.可以避免 多个组件在共享变量，创建不必要的闭包，或者不必要的耦合和依赖 时隐藏的错误\n\n```javascript\n/*不规范示例*/\nangular\n\t.module('app',['ngRoute'])\n\t.controller('SomController',SomeController)\n\t.factory('SomeFactory',SomeFactory);\n\n\tfunction SomeController(){}\n\n\tfunction SomeFactory(){}\n```\n\n```javascript\n/*推荐*/\n//app.module.js\nangular\n\t.module('app',['ngRoute']);\n```\n```javascript\n/*some.controller.js*/\nangular\n\t.module('app')\n\t.controller('SomeController',SomeController);\n\n\tfunction SomeController() { }\n```\n```javascript\n/* recommended */\n\n// some.factory.js\nangular\n\t\t.module('app')\n\t\t.factory('someFactory', someFactory);\n\nfunction someFactory() { }\n```\n**[返回顶部](table-of-contents)**\n\n## IIFE (立即执行方法 Immediately Invoked Function Expression(IIFE)).\n### Javascript Scopes\n###### [Style [Y010](#style-y010)]\n\t- 将Angular组件包含在IIFE代码块中，这样的优势在于\n\t1.一个IIFE将变量从全局作用域中移出，这会有效的方式变量和方法之间的命名冲突\n\t1.当你将你的代码从开发板 压缩和打包 到生产服务器上的时候，会有很多全局作用域下的变量发生冲突，\n\t这时IIFE就可以有效的隔离这些变量\n\n\t```javascript\n  /* 不规范 */\n  // logger.js\n  angular\n      .module('app')\n      .factory('logger', logger);\n\n  // logger 方法已经添加到了全局作用域中\n  function logger() { }\n\n  // storage.js\n  angular\n      .module('app')\n      .factory('storage', storage);\n\n  // storage 方法已经添加到了全局作用域中\n  function storage() { }\n  ```\n\n  ```javascript\n  /**\n   * 推荐\n   *\n   * 下面代码中没有全局作用域变量和方法\n   */\n\n  // logger.js\n  (function() {\n      'use strict';\n\n      angular\n          .module('app')\n          .factory('logger', logger);\n\n      function logger() { }\n  })();\n\n  // storage.js\n  (function() {\n      'use strict';\n\n      angular\n          .module('app')\n          .factory('storage', storage);\n\n      function storage() { }\n  })();\n  ```\n\t**[返回顶部](#table-of-contents)**\n## Modules\n\n### 避免命名冲突\n###### [Style [Y020](#style-y020)]\n\t- 使用统一的子模块命名规则可以帮助避免模块命名冲突。分隔符帮助定义模块和他们的子模块之间的层次结构\n\t例如`app`可以作为父模块名，`app.dashboard`和`app.users`模块作为依赖于`app`模块的子模块。\n\n### 定义(or 设置)\n###### [Style [Y021](#style-y021)]\n\n\t- 可以使用模块的setter语法定义模块，而不要使用变量定义模块。\n\t\t\t在单一组件文件中，使用到模块变量的情况会变得非常少。\n\t\t\t```javascript\n\t\t  /* 避免使用 */\n\t\t  var app = angular.module('app', [\n\t\t      'ngAnimate',\n\t\t      'ngRoute',\n\t\t      'app.shared',\n\t\t      'app.dashboard'\n\t\t  ]);\n\t\t  ```\n\n\t\t  ```javascript\n\t\t  /* 推荐方式 */\n\t\t  angular\n\t\t      .module('app', [\n\t\t          'ngAnimate',\n\t\t          'ngRoute',\n\t\t          'app.shared',\n\t\t          'app.dashboard'\n\t\t      ]);\n\t\t  ```\n\n### Getters\n###### [Style [Y022](#style-y022)]\n\t- 当使用一个模块的时候，可以使用getter链而非变量装载。\n\t\t这样可以使项目代码的可读性更高并且避免变量冲突\n\n\t\t```javascript\n\t  /* 避免使用 */\n\t  var app = angular.module('app');\n\t  app.controller('SomeController', SomeController);\n\n\t  function SomeController() { }\n\t  ```\n\n\t  ```javascript\n\t  /* 推荐使用 */\n\t  angular\n\t      .module('app')\n\t      .controller('SomeController', SomeController);\n\n\t  function SomeController() { }\n\t  ```\n### Getter 方法和Setter 方法之间的比较\n###### [Style [Y023](#style-y023)]\n\n```javascript\n/* recommended */\n\n// 创建一个模块\nangular.module('app', []);\n\n// 从模块集合中取出这个模块\nangular.module('app');\n```\n\n### 命名 与 匿名方法之间的比较\n###### [Style [Y024](#style-y024)]\n\n\t- 在回调函数中尽量使用命名方法代替匿名方法，这样会使得代码的可读性更高，并且提升代码可复用的程度\n\t```javascript\n  /* 避免使用 */\n  angular\n      .module('app')\n      .controller('DashboardController', function() { })\n      .factory('logger', function() { });\n  ```\n\n  ```javascript\n  /* 推荐使用 */\n\n  // dashboard.js\n  angular\n      .module('app')\n      .controller('DashboardController', DashboardController);\n\n  function DashboardController() { }\n  ```\n\n  ```javascript\n  // logger.js\n  angular\n      .module('app')\n      .factory('logger', logger);\n\n  function logger() { }\n  ```\n**[Back to top](#table-of-contents)**\n\n## 控制器Controllers\n\n### controllerAs View Syntax\n###### [Style [Y030](#style-y030)]\n\t-使用[`controllerAs`](http://www.johnpapa.net/do-you-like-your-angular-controllers-with-or-without-sugar/) 语句替代`经典控制器$scope`语句\n\t\t1.控制器构造、新建的时候回提供一个简单的实例，而`controllerAs`语句相比`传统$scope 语句`更接近Javascript原声方法\n\t\t1.它会在视图中使用一个虚拟的对象绑定（例如 使用`customer.name` 代替 `name`）,更加贴近上下文关系，\n\t\t增加刻度性，避免引用冲突问题\n\t\t1.帮助避免在视图嵌套控制器中使用`$parent`\n\n\t\t```html\n\t  <!-- avoid -->\n\t  <div ng-controller=\"CustomerController\">\n\t      {{ name }}\n\t  </div>\n\t  ```\n\n\t  ```html\n\t  <!-- recommended -->\n\t  <div ng-controller=\"CustomerController as customer\">\n\t      {{ customer.name }}\n\t  </div>\n\t  ```\n\n### controllerAs 控制器语句\n###### [Style [Y031](#style-y031)]\n\n\t- 使用`controllerAs`语句替代`传统controller中的$scope`\n\n\t- `controllerAs`语句在Controller内部使用`this`将数据绑定在`$scope`上\n\t`controllerAs` 是`$scope`语法糖。你依然可以使用`$scope`方法.\n\n\t*Why?*:`controllerAs`语句是`$scope`基础上的一种语法糖，你可以继续使用`$scope`绑定变量和方法。\n\n\t*Why?*:帮助避免在控制器中使用`$scope`方法，用其他的方式实现或者将他们移动到工厂方法中，并在控制器中引用.控制器应仅在需要的时候使用`$scope`，再实例中，当我们使用[`$emit`](https://docs.angularjs.org/api/ng/type/$rootScope.Scope#$emit), [`$broadcast`](https://docs.angularjs.org/api/ng/type/$rootScope.Scope#$broadcast) 或者 [`$on`](https://docs.angularjs.org/api/ng/type/$rootScope.Scope#$on). 一个变量或者声明一个事件\n\n\t```javascript\n/* 避免使用 */\nfunction CustomerController($scope){\n\t$scope.name = {};\n\t$scope.sendMessage = function(){};\n}\n\n/* 推荐 */\nfunction CustomerController(){\n\tthis.name = {};\n\tthis.sendMessage = function {};\n}\n\t```\n\n### controllerAs 和 VM\n###### [Style [Y032](#style-y032)]\n\n\t- 当使用`controllerAs`语法的时候，捕捉一个变量替代`this`，选择统一的变量名`vm`，代表 ViewModel。\n\n\t*Why?*：`this` 关键字是作为上下文对象，当使用控制器内部的方法有可能会改变它的作用域，捕捉上下文中的`this`避免遇到这种问题\n\n\t```javascript\n\t/* 错误的示例 */\n\tfunction CustomerController(){\n\t\t\tthis.name = {};\n\t\t\tthis.sendMessage = {};\n\t}\n\n\t/* 推荐的方式 */\n\tfunction CustomerController(){\n\t\t\tvar vm = this;\n\t\t\tvm.name = {};\n\t\t\tvm.sendMessage = function(){}\n\t}\n\t```\n\n注意:你通过在代码上添加注释避免任何的[jshint](http://jshint.com/)警告。但是，这不需要将方法使用大写命名，这只是个对于构造方法的惯例。\n\n```javascript\n/* jshint validthis : true */\nvar vm = this;\n```\n\n注意:当在控制器中使用`controller as`创建一个监听时，你可以监听`vm.*`\n(创建监听的时候需要小心监听导致的更多的负载)\n\n```html\n<input ng-model = \"vm.tite\"/>\n```\n\n```javascript\nfunction SomeController($scope,$log){\n\t\tvar vm = this;\n\t\tvm.title = 'Some Title';\n\n\t\t$scope.watch('vm.title',function(){\n\t\t\t\t$log.info('vm.title was %s',original);\n\t\t})\n}\n```\n\n注意:当基于一个庞大的代码库工作时，使用更多的描述性命名可以帮助简化的认知负荷和搜素，避免坑长的名字和繁琐的输入。\n\n```html\n<!-- 避免使用 -->\n<input ng-model=\"customerProductItemVm.title\">\n```\n\n```html\n<!-- 推荐 -->\n<input ng-model=\"productVm.title\">\n\n```\n\n### 将绑定成员提取到首位\n\n\t- 将需要绑定的成员按照字母顺序放在控制器的上方，并且不要扩散到控制器代码\n\n\t*Why?*:将需要绑定的成员防止在首位可以提升代码的可读性，并且帮你快速识别这个控制器需要绑定的成员都有哪些\n\n\t*Why?*:设置匿名行内函数当然可以使得代码简单，但是当哪些方法体多余一行代码的时候，他们会很大程序上降低代码可读性。将方法定义在绑定成员的下方（哪些方法会被提升）将实现细节移动到下方，保持绑定成员在上方，使代码可读性更好。\n\n```javascript\n/* 避免 */\nfunction SessionsController(){\n\tvar vm = this;\n\n\tvm.gotoSession = function(){\n\n\t};\n\n\tvm.refresh = function(){\n\n\t};\n}\n\n```\n\n```javascript\n/* 推荐 */\nfunction SessionsController(){\n\tvar vm = this;\n\n\tvm.gotoSession = gotoSession;\n\tvm.refresh = refresh;\n\tvm.search = search;\n\n\tfunction gotoSession(){}\n\n\tfunction refresh(){}\n\n\tfunction search(){}\n}\n\n```\n\n    ![Controller Using \"Above the Fold\"](https://raw.githubusercontent.com/johnpapa/angular-styleguide/master/a1/assets/above-the-fold-1.png)\n\n注意：如果这个方法的代码只有一行可以将它保持在上方，这样并不影响可读性。\n\n```javascript\n/* 避免 */\nfunction SessionController(data){\n\tvar vm = this;\n\n\tvm.gotoSession = gotoSession;\n\n\tvm.refresh = function(){\n\t\t/**\n\t\t * lines\n\t\t * of\n\t\t * code\n\t\t * affects\n\t\t * readabibity\n\t\t*/\n\t}\n\tvm.search = search;\n\tvm.sessions = [];\n\tvm.title = 'Sessions';\n}\n```\n\n```javascript\n/* 推荐方式 */\nfunction SessionsController(sessionDataService) {\n\t\tvar vm = this;\n\t\tvm.gotoSession = gotoSession;\n\t\tvm.refresh = sessionDataService.refresh; // 1 liner is OK\n\t\tvm.search = search;\n\t\tvm.sessions = [];\n\t\tvm.title = 'Sessions';\n}\n```\n\n### 通过方法定义隐藏实现\n###### [Style [Y034](#style-y034)]\n\n\t- 使用方法定义隐藏方法实现细节。保持你的邦定成员在上方，当你需要在一个控制器中绑定一个方法的时候，它指向出现在这个文件中的一个函数声明。这是直接绑定部分成员，更多细节详见[这篇文章](http://www.johnpapa.net/angular-function-declarations-function-expressions-and-readable-code/)\n\n```javascript\n/* 避免使用 */\nfunction AvengersController(avengersService,logger){\n\t\tvar vm = this;\n\t\tvm.avengers = [];\n\t\tvm.title = 'Avengers';\n\n\t\tvar activate = function(){\n\t\t\t\treturn getAvengers().then(function(){\n\t\t\t\t\t\tlogger.info('Activated Avengers View');\n\t\t\t\t})\n\t\t}\n\n\t\tvar getAvengers = function(){\n\t\t\t\treturn avengersService.getAvengers().then(function(data){\n\t\t\t\t\t\tvm.avengers = data;\n\t\t\t\t\t\treturn vm.avengers;\n\t\t\t\t});\n\t\t}\n\n\t\tvm.getAvengers = getAvengers;\n\n\t\tactivate();\n\n}\n\n注意:在上面的示例中重要的东西都很分散。下面的代码中，注意重要的东西都在上方\n\n```javascript\n/* 推荐\n使用方法定义，绑定成员定义在上方\n*/\n\nfunction AvengersController(avengerService,logger){\n\t\tvar vm = this;\n\t\tvm.avengers = [];\n\t\tvm.getAvengers = getAvengers;\n\t\tvm.title = '';\n\n\t\tactive();\n\n\t\tfunction activate(){\n\t\t\t\treturn getAvengers().then(function(){\n\t\t\t\t\t\tlogger.info('Activated Avengers View');\n\t\t\t\t})\n\t\t}\n\n\t\tfunction geetAvengers(){\n\t\t\t\treturn avengersService.getAvengers().then(function(data){\n\t\t\t\t\t\tvm.avengers = data;\n\t\t\t\t\t\treturn vm.avengers;\n\t\t\t\t});\n\t\t}\n}\n```\n\n### 将控制器移动到服务(Service)中\n###### [Style [Y035](#style-y035)]\n\n\t- 将控制器中的逻辑移动到服务器或者工厂方法中\n\n```javascript\n\n/* avoid */\nfunction OrderController($http, $q, config, userInfo) {\n\t var vm = this;\n\t vm.checkCredit = checkCredit;\n\t vm.isCreditOk;\n\t vm.total = 0;\n\n\t function checkCredit() {\n\t\t\t var settings = {};\n\t\t\t // Get the credit service base URL from config\n\t\t\t // Set credit service required headers\n\t\t\t // Prepare URL query string or data object with request data\n\t\t\t // Add user-identifying info so service gets the right credit limit for this user.\n\t\t\t // Use JSONP for this browser if it doesn't support CORS\n\t\t\t return $http.get(settings)\n\t\t\t\t\t .then(function(data) {\n\t\t\t\t\t\t// Unpack JSON data in the response object\n\t\t\t\t\t\t\t// to find maxRemainingAmount\n\t\t\t\t\t\t\tvm.isCreditOk = vm.total <= maxRemainingAmount\n\t\t\t\t\t })\n\t\t\t\t\t .catch(function(error) {\n\t\t\t\t\t\t\t// Interpret error\n\t\t\t\t\t\t\t// Cope w/ timeout? retry? try alternate service?\n\t\t\t\t\t\t\t// Re-reject with appropriate error for a user to see\n\t\t\t\t\t });\n\t };\n}\n```\n\n```javascript\n/* 推荐 */\nfunction OrderController(creditService){\n\t\tvar vm = this;\n\t\tvm.checkCredit = checkCredit;\n\t\tvm.isCreditOk;\n\t\tvm.total = 0;\n\n\t\tfunction checkCredit(){\n\t\t\t\treturn creditService.isOrderTotalOk(vm.total)\n\t\t\t\t\t.then(function(isOk){ vm.isCreditOk = ok; })\n\t\t\t\t\t.catch(showError);\n\t\t}\n}\n```\n### 使控制器更专注\n###### [Style [Y037](#style-y037)]\n\n\t- 为一个视图定义一个控制器，不要试图在其他视图中复用控制器，而是将可以复用的逻辑转移到工厂中，保持控制器的简单并专注与当前视图。\n\n\t*Why?*: 在很多的视图上复用控制器是脆弱的，端对端（end-to-end）测试需要保证访问一个复杂的应用时的稳定性\n\n### 分配控制器\n###### [Style [Y038](#style-y038)]\n\n\t- 当一个控制器必须搭配一个视图并且其他组件需要复用其他的控制器或视图，在它的路由中单独定义控制器。\n\n\t注意: 如果视图加载依赖其他视图，这意味着另外的一种途径，尝试使用`ng-controller=\"Avengers as vm\"` 语句.\n","source":"_posts/AngularJS 1x Style Guide.markdown","raw":"---\nlayout:     keynote\ntitle:      \"AngularJS 1x Style Guide\"\nsubtitle:   \"Keynote: AngularJS 1x Style Guide\"\niframe:     \ndate:       2016-06-17\nauthor:     \"\"\nheader-img: \"post-bg-js-version.jpg\"\ntags:\n    - Angular\n---\n#Angular 1.x 编码规则\n##Angular 团队支持\n<非常感谢Angular团队领导Igor Minar,检查审视，贡献必要的资料\n\n##目录\n\t1.[单一职责](#single-responsibility)\n\t1.[IIFE](#iife)\n\t1.[Modules](#modules)\n\t1.[Controllers](#controllers)\n\t1.[Services](#services)\n\t1.[Factories](#factories)\n\t1.[数据服务](#dataservices)\n\t1.[Directives](#directives)\n\t1.[Promises解决方案](#promises)\n\t1.[手动依赖注入](#manualdi)\n\t1.[压缩和注解](#minification-and-annotation)\n\t1.[异常处理](#exception-handling)\n\t1.[命名规则](#naming)\n\t1.[应用结构优化准则](#application-structure-lift-principle)\n\t1.[应用结构](#application-structure)\n\t1.[模块化](#modularity)\n\t1.[启动](#startup-logic)\n\t1.[Angular $服务包装](#angular-wrapper-services)\n\t1.[测试](#testing)\n\t1.[动画](#animations)\n\t1.[评论](#comments)\n\t1.[JSHint](#js-hint)\n\t1.[JSCS](#jscs)\n\t1.[常量](#constants)\n\t1.[文件模板和代码片段](#file-templates-and-snippets)\n\t1.[路由](#routing)\n\t1.[自动化任务](#task-automation)\n\t1.[Filter过滤器](#filter)\n\t1.[Angular 文档](#angular-docs)\n\n## 单一职责\n\n### 规则1\n##### [Style [Y001](#style-y001)]\n\n\t- 每个文件仅包含一个组件，并且使其少于400行代码，它的好处在于\n\t\t1.对于测试来说更加容易\n\t\t1.使得代码可读性更强，更好维护，避免团队在源代码控制方面的问题\n\t\t1.可以避免 多个组件在共享变量，创建不必要的闭包，或者不必要的耦合和依赖 时隐藏的错误\n\n```javascript\n/*不规范示例*/\nangular\n\t.module('app',['ngRoute'])\n\t.controller('SomController',SomeController)\n\t.factory('SomeFactory',SomeFactory);\n\n\tfunction SomeController(){}\n\n\tfunction SomeFactory(){}\n```\n\n```javascript\n/*推荐*/\n//app.module.js\nangular\n\t.module('app',['ngRoute']);\n```\n```javascript\n/*some.controller.js*/\nangular\n\t.module('app')\n\t.controller('SomeController',SomeController);\n\n\tfunction SomeController() { }\n```\n```javascript\n/* recommended */\n\n// some.factory.js\nangular\n\t\t.module('app')\n\t\t.factory('someFactory', someFactory);\n\nfunction someFactory() { }\n```\n**[返回顶部](table-of-contents)**\n\n## IIFE (立即执行方法 Immediately Invoked Function Expression(IIFE)).\n### Javascript Scopes\n###### [Style [Y010](#style-y010)]\n\t- 将Angular组件包含在IIFE代码块中，这样的优势在于\n\t1.一个IIFE将变量从全局作用域中移出，这会有效的方式变量和方法之间的命名冲突\n\t1.当你将你的代码从开发板 压缩和打包 到生产服务器上的时候，会有很多全局作用域下的变量发生冲突，\n\t这时IIFE就可以有效的隔离这些变量\n\n\t```javascript\n  /* 不规范 */\n  // logger.js\n  angular\n      .module('app')\n      .factory('logger', logger);\n\n  // logger 方法已经添加到了全局作用域中\n  function logger() { }\n\n  // storage.js\n  angular\n      .module('app')\n      .factory('storage', storage);\n\n  // storage 方法已经添加到了全局作用域中\n  function storage() { }\n  ```\n\n  ```javascript\n  /**\n   * 推荐\n   *\n   * 下面代码中没有全局作用域变量和方法\n   */\n\n  // logger.js\n  (function() {\n      'use strict';\n\n      angular\n          .module('app')\n          .factory('logger', logger);\n\n      function logger() { }\n  })();\n\n  // storage.js\n  (function() {\n      'use strict';\n\n      angular\n          .module('app')\n          .factory('storage', storage);\n\n      function storage() { }\n  })();\n  ```\n\t**[返回顶部](#table-of-contents)**\n## Modules\n\n### 避免命名冲突\n###### [Style [Y020](#style-y020)]\n\t- 使用统一的子模块命名规则可以帮助避免模块命名冲突。分隔符帮助定义模块和他们的子模块之间的层次结构\n\t例如`app`可以作为父模块名，`app.dashboard`和`app.users`模块作为依赖于`app`模块的子模块。\n\n### 定义(or 设置)\n###### [Style [Y021](#style-y021)]\n\n\t- 可以使用模块的setter语法定义模块，而不要使用变量定义模块。\n\t\t\t在单一组件文件中，使用到模块变量的情况会变得非常少。\n\t\t\t```javascript\n\t\t  /* 避免使用 */\n\t\t  var app = angular.module('app', [\n\t\t      'ngAnimate',\n\t\t      'ngRoute',\n\t\t      'app.shared',\n\t\t      'app.dashboard'\n\t\t  ]);\n\t\t  ```\n\n\t\t  ```javascript\n\t\t  /* 推荐方式 */\n\t\t  angular\n\t\t      .module('app', [\n\t\t          'ngAnimate',\n\t\t          'ngRoute',\n\t\t          'app.shared',\n\t\t          'app.dashboard'\n\t\t      ]);\n\t\t  ```\n\n### Getters\n###### [Style [Y022](#style-y022)]\n\t- 当使用一个模块的时候，可以使用getter链而非变量装载。\n\t\t这样可以使项目代码的可读性更高并且避免变量冲突\n\n\t\t```javascript\n\t  /* 避免使用 */\n\t  var app = angular.module('app');\n\t  app.controller('SomeController', SomeController);\n\n\t  function SomeController() { }\n\t  ```\n\n\t  ```javascript\n\t  /* 推荐使用 */\n\t  angular\n\t      .module('app')\n\t      .controller('SomeController', SomeController);\n\n\t  function SomeController() { }\n\t  ```\n### Getter 方法和Setter 方法之间的比较\n###### [Style [Y023](#style-y023)]\n\n```javascript\n/* recommended */\n\n// 创建一个模块\nangular.module('app', []);\n\n// 从模块集合中取出这个模块\nangular.module('app');\n```\n\n### 命名 与 匿名方法之间的比较\n###### [Style [Y024](#style-y024)]\n\n\t- 在回调函数中尽量使用命名方法代替匿名方法，这样会使得代码的可读性更高，并且提升代码可复用的程度\n\t```javascript\n  /* 避免使用 */\n  angular\n      .module('app')\n      .controller('DashboardController', function() { })\n      .factory('logger', function() { });\n  ```\n\n  ```javascript\n  /* 推荐使用 */\n\n  // dashboard.js\n  angular\n      .module('app')\n      .controller('DashboardController', DashboardController);\n\n  function DashboardController() { }\n  ```\n\n  ```javascript\n  // logger.js\n  angular\n      .module('app')\n      .factory('logger', logger);\n\n  function logger() { }\n  ```\n**[Back to top](#table-of-contents)**\n\n## 控制器Controllers\n\n### controllerAs View Syntax\n###### [Style [Y030](#style-y030)]\n\t-使用[`controllerAs`](http://www.johnpapa.net/do-you-like-your-angular-controllers-with-or-without-sugar/) 语句替代`经典控制器$scope`语句\n\t\t1.控制器构造、新建的时候回提供一个简单的实例，而`controllerAs`语句相比`传统$scope 语句`更接近Javascript原声方法\n\t\t1.它会在视图中使用一个虚拟的对象绑定（例如 使用`customer.name` 代替 `name`）,更加贴近上下文关系，\n\t\t增加刻度性，避免引用冲突问题\n\t\t1.帮助避免在视图嵌套控制器中使用`$parent`\n\n\t\t```html\n\t  <!-- avoid -->\n\t  <div ng-controller=\"CustomerController\">\n\t      {{ name }}\n\t  </div>\n\t  ```\n\n\t  ```html\n\t  <!-- recommended -->\n\t  <div ng-controller=\"CustomerController as customer\">\n\t      {{ customer.name }}\n\t  </div>\n\t  ```\n\n### controllerAs 控制器语句\n###### [Style [Y031](#style-y031)]\n\n\t- 使用`controllerAs`语句替代`传统controller中的$scope`\n\n\t- `controllerAs`语句在Controller内部使用`this`将数据绑定在`$scope`上\n\t`controllerAs` 是`$scope`语法糖。你依然可以使用`$scope`方法.\n\n\t*Why?*:`controllerAs`语句是`$scope`基础上的一种语法糖，你可以继续使用`$scope`绑定变量和方法。\n\n\t*Why?*:帮助避免在控制器中使用`$scope`方法，用其他的方式实现或者将他们移动到工厂方法中，并在控制器中引用.控制器应仅在需要的时候使用`$scope`，再实例中，当我们使用[`$emit`](https://docs.angularjs.org/api/ng/type/$rootScope.Scope#$emit), [`$broadcast`](https://docs.angularjs.org/api/ng/type/$rootScope.Scope#$broadcast) 或者 [`$on`](https://docs.angularjs.org/api/ng/type/$rootScope.Scope#$on). 一个变量或者声明一个事件\n\n\t```javascript\n/* 避免使用 */\nfunction CustomerController($scope){\n\t$scope.name = {};\n\t$scope.sendMessage = function(){};\n}\n\n/* 推荐 */\nfunction CustomerController(){\n\tthis.name = {};\n\tthis.sendMessage = function {};\n}\n\t```\n\n### controllerAs 和 VM\n###### [Style [Y032](#style-y032)]\n\n\t- 当使用`controllerAs`语法的时候，捕捉一个变量替代`this`，选择统一的变量名`vm`，代表 ViewModel。\n\n\t*Why?*：`this` 关键字是作为上下文对象，当使用控制器内部的方法有可能会改变它的作用域，捕捉上下文中的`this`避免遇到这种问题\n\n\t```javascript\n\t/* 错误的示例 */\n\tfunction CustomerController(){\n\t\t\tthis.name = {};\n\t\t\tthis.sendMessage = {};\n\t}\n\n\t/* 推荐的方式 */\n\tfunction CustomerController(){\n\t\t\tvar vm = this;\n\t\t\tvm.name = {};\n\t\t\tvm.sendMessage = function(){}\n\t}\n\t```\n\n注意:你通过在代码上添加注释避免任何的[jshint](http://jshint.com/)警告。但是，这不需要将方法使用大写命名，这只是个对于构造方法的惯例。\n\n```javascript\n/* jshint validthis : true */\nvar vm = this;\n```\n\n注意:当在控制器中使用`controller as`创建一个监听时，你可以监听`vm.*`\n(创建监听的时候需要小心监听导致的更多的负载)\n\n```html\n<input ng-model = \"vm.tite\"/>\n```\n\n```javascript\nfunction SomeController($scope,$log){\n\t\tvar vm = this;\n\t\tvm.title = 'Some Title';\n\n\t\t$scope.watch('vm.title',function(){\n\t\t\t\t$log.info('vm.title was %s',original);\n\t\t})\n}\n```\n\n注意:当基于一个庞大的代码库工作时，使用更多的描述性命名可以帮助简化的认知负荷和搜素，避免坑长的名字和繁琐的输入。\n\n```html\n<!-- 避免使用 -->\n<input ng-model=\"customerProductItemVm.title\">\n```\n\n```html\n<!-- 推荐 -->\n<input ng-model=\"productVm.title\">\n\n```\n\n### 将绑定成员提取到首位\n\n\t- 将需要绑定的成员按照字母顺序放在控制器的上方，并且不要扩散到控制器代码\n\n\t*Why?*:将需要绑定的成员防止在首位可以提升代码的可读性，并且帮你快速识别这个控制器需要绑定的成员都有哪些\n\n\t*Why?*:设置匿名行内函数当然可以使得代码简单，但是当哪些方法体多余一行代码的时候，他们会很大程序上降低代码可读性。将方法定义在绑定成员的下方（哪些方法会被提升）将实现细节移动到下方，保持绑定成员在上方，使代码可读性更好。\n\n```javascript\n/* 避免 */\nfunction SessionsController(){\n\tvar vm = this;\n\n\tvm.gotoSession = function(){\n\n\t};\n\n\tvm.refresh = function(){\n\n\t};\n}\n\n```\n\n```javascript\n/* 推荐 */\nfunction SessionsController(){\n\tvar vm = this;\n\n\tvm.gotoSession = gotoSession;\n\tvm.refresh = refresh;\n\tvm.search = search;\n\n\tfunction gotoSession(){}\n\n\tfunction refresh(){}\n\n\tfunction search(){}\n}\n\n```\n\n    ![Controller Using \"Above the Fold\"](https://raw.githubusercontent.com/johnpapa/angular-styleguide/master/a1/assets/above-the-fold-1.png)\n\n注意：如果这个方法的代码只有一行可以将它保持在上方，这样并不影响可读性。\n\n```javascript\n/* 避免 */\nfunction SessionController(data){\n\tvar vm = this;\n\n\tvm.gotoSession = gotoSession;\n\n\tvm.refresh = function(){\n\t\t/**\n\t\t * lines\n\t\t * of\n\t\t * code\n\t\t * affects\n\t\t * readabibity\n\t\t*/\n\t}\n\tvm.search = search;\n\tvm.sessions = [];\n\tvm.title = 'Sessions';\n}\n```\n\n```javascript\n/* 推荐方式 */\nfunction SessionsController(sessionDataService) {\n\t\tvar vm = this;\n\t\tvm.gotoSession = gotoSession;\n\t\tvm.refresh = sessionDataService.refresh; // 1 liner is OK\n\t\tvm.search = search;\n\t\tvm.sessions = [];\n\t\tvm.title = 'Sessions';\n}\n```\n\n### 通过方法定义隐藏实现\n###### [Style [Y034](#style-y034)]\n\n\t- 使用方法定义隐藏方法实现细节。保持你的邦定成员在上方，当你需要在一个控制器中绑定一个方法的时候，它指向出现在这个文件中的一个函数声明。这是直接绑定部分成员，更多细节详见[这篇文章](http://www.johnpapa.net/angular-function-declarations-function-expressions-and-readable-code/)\n\n```javascript\n/* 避免使用 */\nfunction AvengersController(avengersService,logger){\n\t\tvar vm = this;\n\t\tvm.avengers = [];\n\t\tvm.title = 'Avengers';\n\n\t\tvar activate = function(){\n\t\t\t\treturn getAvengers().then(function(){\n\t\t\t\t\t\tlogger.info('Activated Avengers View');\n\t\t\t\t})\n\t\t}\n\n\t\tvar getAvengers = function(){\n\t\t\t\treturn avengersService.getAvengers().then(function(data){\n\t\t\t\t\t\tvm.avengers = data;\n\t\t\t\t\t\treturn vm.avengers;\n\t\t\t\t});\n\t\t}\n\n\t\tvm.getAvengers = getAvengers;\n\n\t\tactivate();\n\n}\n\n注意:在上面的示例中重要的东西都很分散。下面的代码中，注意重要的东西都在上方\n\n```javascript\n/* 推荐\n使用方法定义，绑定成员定义在上方\n*/\n\nfunction AvengersController(avengerService,logger){\n\t\tvar vm = this;\n\t\tvm.avengers = [];\n\t\tvm.getAvengers = getAvengers;\n\t\tvm.title = '';\n\n\t\tactive();\n\n\t\tfunction activate(){\n\t\t\t\treturn getAvengers().then(function(){\n\t\t\t\t\t\tlogger.info('Activated Avengers View');\n\t\t\t\t})\n\t\t}\n\n\t\tfunction geetAvengers(){\n\t\t\t\treturn avengersService.getAvengers().then(function(data){\n\t\t\t\t\t\tvm.avengers = data;\n\t\t\t\t\t\treturn vm.avengers;\n\t\t\t\t});\n\t\t}\n}\n```\n\n### 将控制器移动到服务(Service)中\n###### [Style [Y035](#style-y035)]\n\n\t- 将控制器中的逻辑移动到服务器或者工厂方法中\n\n```javascript\n\n/* avoid */\nfunction OrderController($http, $q, config, userInfo) {\n\t var vm = this;\n\t vm.checkCredit = checkCredit;\n\t vm.isCreditOk;\n\t vm.total = 0;\n\n\t function checkCredit() {\n\t\t\t var settings = {};\n\t\t\t // Get the credit service base URL from config\n\t\t\t // Set credit service required headers\n\t\t\t // Prepare URL query string or data object with request data\n\t\t\t // Add user-identifying info so service gets the right credit limit for this user.\n\t\t\t // Use JSONP for this browser if it doesn't support CORS\n\t\t\t return $http.get(settings)\n\t\t\t\t\t .then(function(data) {\n\t\t\t\t\t\t// Unpack JSON data in the response object\n\t\t\t\t\t\t\t// to find maxRemainingAmount\n\t\t\t\t\t\t\tvm.isCreditOk = vm.total <= maxRemainingAmount\n\t\t\t\t\t })\n\t\t\t\t\t .catch(function(error) {\n\t\t\t\t\t\t\t// Interpret error\n\t\t\t\t\t\t\t// Cope w/ timeout? retry? try alternate service?\n\t\t\t\t\t\t\t// Re-reject with appropriate error for a user to see\n\t\t\t\t\t });\n\t };\n}\n```\n\n```javascript\n/* 推荐 */\nfunction OrderController(creditService){\n\t\tvar vm = this;\n\t\tvm.checkCredit = checkCredit;\n\t\tvm.isCreditOk;\n\t\tvm.total = 0;\n\n\t\tfunction checkCredit(){\n\t\t\t\treturn creditService.isOrderTotalOk(vm.total)\n\t\t\t\t\t.then(function(isOk){ vm.isCreditOk = ok; })\n\t\t\t\t\t.catch(showError);\n\t\t}\n}\n```\n### 使控制器更专注\n###### [Style [Y037](#style-y037)]\n\n\t- 为一个视图定义一个控制器，不要试图在其他视图中复用控制器，而是将可以复用的逻辑转移到工厂中，保持控制器的简单并专注与当前视图。\n\n\t*Why?*: 在很多的视图上复用控制器是脆弱的，端对端（end-to-end）测试需要保证访问一个复杂的应用时的稳定性\n\n### 分配控制器\n###### [Style [Y038](#style-y038)]\n\n\t- 当一个控制器必须搭配一个视图并且其他组件需要复用其他的控制器或视图，在它的路由中单独定义控制器。\n\n\t注意: 如果视图加载依赖其他视图，这意味着另外的一种途径，尝试使用`ng-controller=\"Avengers as vm\"` 语句.\n","slug":"AngularJS 1x Style Guide","published":1,"updated":"2016-06-20T01:53:00.604Z","_id":"cipndaymc001pyww7ytqc1902","comments":1,"photos":[],"link":"","content":"<p>#Angular 1.x 编码规则</p>\n<p>##Angular 团队支持<br>&lt;非常感谢Angular团队领导Igor Minar,检查审视，贡献必要的资料</p>\n<p>##目录<br>    1.<a href=\"#single-responsibility\">单一职责</a><br>    1.<a href=\"#iife\">IIFE</a><br>    1.<a href=\"#modules\">Modules</a><br>    1.<a href=\"#controllers\">Controllers</a><br>    1.<a href=\"#services\">Services</a><br>    1.<a href=\"#factories\">Factories</a><br>    1.<a href=\"#dataservices\">数据服务</a><br>    1.<a href=\"#directives\">Directives</a><br>    1.<a href=\"#promises\">Promises解决方案</a><br>    1.<a href=\"#manualdi\">手动依赖注入</a><br>    1.<a href=\"#minification-and-annotation\">压缩和注解</a><br>    1.<a href=\"#exception-handling\">异常处理</a><br>    1.<a href=\"#naming\">命名规则</a><br>    1.<a href=\"#application-structure-lift-principle\">应用结构优化准则</a><br>    1.<a href=\"#application-structure\">应用结构</a><br>    1.<a href=\"#modularity\">模块化</a><br>    1.<a href=\"#startup-logic\">启动</a><br>    1.<a href=\"#angular-wrapper-services\">Angular $服务包装</a><br>    1.<a href=\"#testing\">测试</a><br>    1.<a href=\"#animations\">动画</a><br>    1.<a href=\"#comments\">评论</a><br>    1.<a href=\"#js-hint\">JSHint</a><br>    1.<a href=\"#jscs\">JSCS</a><br>    1.<a href=\"#constants\">常量</a><br>    1.<a href=\"#file-templates-and-snippets\">文件模板和代码片段</a><br>    1.<a href=\"#routing\">路由</a><br>    1.<a href=\"#task-automation\">自动化任务</a><br>    1.<a href=\"#filter\">Filter过滤器</a><br>    1.<a href=\"#angular-docs\">Angular 文档</a></p>\n<h2 id=\"单一职责\"><a href=\"#单一职责\" class=\"headerlink\" title=\"单一职责\"></a>单一职责</h2><h3 id=\"规则1\"><a href=\"#规则1\" class=\"headerlink\" title=\"规则1\"></a>规则1</h3><h5 id=\"Style-Y001\"><a href=\"#Style-Y001\" class=\"headerlink\" title=\"[Style Y001]\"></a>[Style <a href=\"#style-y001\">Y001</a>]</h5><pre><code>- 每个文件仅包含一个组件，并且使其少于400行代码，它的好处在于\n    1.对于测试来说更加容易\n    1.使得代码可读性更强，更好维护，避免团队在源代码控制方面的问题\n    1.可以避免 多个组件在共享变量，创建不必要的闭包，或者不必要的耦合和依赖 时隐藏的错误\n</code></pre><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*不规范示例*/</span></span><br><span class=\"line\">angular</span><br><span class=\"line\">\t.module(<span class=\"string\">'app'</span>,[<span class=\"string\">'ngRoute'</span>])</span><br><span class=\"line\">\t.controller(<span class=\"string\">'SomController'</span>,SomeController)</span><br><span class=\"line\">\t.factory(<span class=\"string\">'SomeFactory'</span>,SomeFactory);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">SomeController</span>(<span class=\"params\"></span>)</span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">SomeFactory</span>(<span class=\"params\"></span>)</span>&#123;&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*推荐*/</span></span><br><span class=\"line\"><span class=\"comment\">//app.module.js</span></span><br><span class=\"line\">angular</span><br><span class=\"line\">\t.module(<span class=\"string\">'app'</span>,[<span class=\"string\">'ngRoute'</span>]);</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*some.controller.js*/</span></span><br><span class=\"line\">angular</span><br><span class=\"line\">\t.module(<span class=\"string\">'app'</span>)</span><br><span class=\"line\">\t.controller(<span class=\"string\">'SomeController'</span>,SomeController);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">SomeController</span>(<span class=\"params\"></span>) </span>&#123; &#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* recommended */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// some.factory.js</span></span><br><span class=\"line\">angular</span><br><span class=\"line\">\t\t.module(<span class=\"string\">'app'</span>)</span><br><span class=\"line\">\t\t.factory(<span class=\"string\">'someFactory'</span>, someFactory);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">someFactory</span>(<span class=\"params\"></span>) </span>&#123; &#125;</span><br></pre></td></tr></table></figure>\n<p><strong><a href=\"table-of-contents\">返回顶部</a></strong></p>\n<h2 id=\"IIFE-立即执行方法-Immediately-Invoked-Function-Expression-IIFE\"><a href=\"#IIFE-立即执行方法-Immediately-Invoked-Function-Expression-IIFE\" class=\"headerlink\" title=\"IIFE (立即执行方法 Immediately Invoked Function Expression(IIFE)).\"></a>IIFE (立即执行方法 Immediately Invoked Function Expression(IIFE)).</h2><h3 id=\"Javascript-Scopes\"><a href=\"#Javascript-Scopes\" class=\"headerlink\" title=\"Javascript Scopes\"></a>Javascript Scopes</h3><h6 id=\"Style-Y010\"><a href=\"#Style-Y010\" class=\"headerlink\" title=\"[Style Y010]\"></a>[Style <a href=\"#style-y010\">Y010</a>]</h6><pre><code>- 将Angular组件包含在IIFE代码块中，这样的优势在于\n1.一个IIFE将变量从全局作用域中移出，这会有效的方式变量和方法之间的命名冲突\n1.当你将你的代码从开发板 压缩和打包 到生产服务器上的时候，会有很多全局作用域下的变量发生冲突，\n这时IIFE就可以有效的隔离这些变量\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 不规范 */</span></span><br><span class=\"line\"><span class=\"comment\">// logger.js</span></span><br><span class=\"line\">angular</span><br><span class=\"line\">    .module(<span class=\"string\">'app'</span>)</span><br><span class=\"line\">    .factory(<span class=\"string\">'logger'</span>, logger);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// logger 方法已经添加到了全局作用域中</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">logger</span>(<span class=\"params\"></span>) </span>&#123; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// storage.js</span></span><br><span class=\"line\">angular</span><br><span class=\"line\">    .module(<span class=\"string\">'app'</span>)</span><br><span class=\"line\">    .factory(<span class=\"string\">'storage'</span>, storage);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// storage 方法已经添加到了全局作用域中</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">storage</span>(<span class=\"params\"></span>) </span>&#123; &#125;</span><br></pre></td></tr></table></figure>\n</code></pre>  <figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span><br><span class=\"line\"> * 推荐</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * 下面代码中没有全局作用域变量和方法</span><br><span class=\"line\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// logger.js</span></span><br><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"><span class=\"meta\">    'use strict'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    angular</span><br><span class=\"line\">        .module(<span class=\"string\">'app'</span>)</span><br><span class=\"line\">        .factory(<span class=\"string\">'logger'</span>, logger);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">logger</span>(<span class=\"params\"></span>) </span>&#123; &#125;</span><br><span class=\"line\">&#125;)();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// storage.js</span></span><br><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"><span class=\"meta\">    'use strict'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    angular</span><br><span class=\"line\">        .module(<span class=\"string\">'app'</span>)</span><br><span class=\"line\">        .factory(<span class=\"string\">'storage'</span>, storage);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">storage</span>(<span class=\"params\"></span>) </span>&#123; &#125;</span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure>\n<pre><code>**[返回顶部](#table-of-contents)**\n</code></pre><h2 id=\"Modules\"><a href=\"#Modules\" class=\"headerlink\" title=\"Modules\"></a>Modules</h2><h3 id=\"避免命名冲突\"><a href=\"#避免命名冲突\" class=\"headerlink\" title=\"避免命名冲突\"></a>避免命名冲突</h3><h6 id=\"Style-Y020\"><a href=\"#Style-Y020\" class=\"headerlink\" title=\"[Style Y020]\"></a>[Style <a href=\"#style-y020\">Y020</a>]</h6><pre><code>- 使用统一的子模块命名规则可以帮助避免模块命名冲突。分隔符帮助定义模块和他们的子模块之间的层次结构\n例如`app`可以作为父模块名，`app.dashboard`和`app.users`模块作为依赖于`app`模块的子模块。\n</code></pre><h3 id=\"定义-or-设置\"><a href=\"#定义-or-设置\" class=\"headerlink\" title=\"定义(or 设置)\"></a>定义(or 设置)</h3><h6 id=\"Style-Y021\"><a href=\"#Style-Y021\" class=\"headerlink\" title=\"[Style Y021]\"></a>[Style <a href=\"#style-y021\">Y021</a>]</h6><pre><code>- 可以使用模块的setter语法定义模块，而不要使用变量定义模块。\n        在单一组件文件中，使用到模块变量的情况会变得非常少。\n        <figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 避免使用 */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> app = angular.module(<span class=\"string\">'app'</span>, [</span><br><span class=\"line\">    <span class=\"string\">'ngAnimate'</span>,</span><br><span class=\"line\">    <span class=\"string\">'ngRoute'</span>,</span><br><span class=\"line\">    <span class=\"string\">'app.shared'</span>,</span><br><span class=\"line\">    <span class=\"string\">'app.dashboard'</span></span><br><span class=\"line\">]);</span><br></pre></td></tr></table></figure>\n\n      <figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 推荐方式 */</span></span><br><span class=\"line\">angular</span><br><span class=\"line\">    .module(<span class=\"string\">'app'</span>, [</span><br><span class=\"line\">        <span class=\"string\">'ngAnimate'</span>,</span><br><span class=\"line\">        <span class=\"string\">'ngRoute'</span>,</span><br><span class=\"line\">        <span class=\"string\">'app.shared'</span>,</span><br><span class=\"line\">        <span class=\"string\">'app.dashboard'</span></span><br><span class=\"line\">    ]);</span><br></pre></td></tr></table></figure>\n</code></pre><h3 id=\"Getters\"><a href=\"#Getters\" class=\"headerlink\" title=\"Getters\"></a>Getters</h3><h6 id=\"Style-Y022\"><a href=\"#Style-Y022\" class=\"headerlink\" title=\"[Style Y022]\"></a>[Style <a href=\"#style-y022\">Y022</a>]</h6><pre><code>- 当使用一个模块的时候，可以使用getter链而非变量装载。\n    这样可以使项目代码的可读性更高并且避免变量冲突\n\n    <figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 避免使用 */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> app = angular.module(<span class=\"string\">'app'</span>);</span><br><span class=\"line\">app.controller(<span class=\"string\">'SomeController'</span>, SomeController);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">SomeController</span>(<span class=\"params\"></span>) </span>&#123; &#125;</span><br></pre></td></tr></table></figure>\n\n  <figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 推荐使用 */</span></span><br><span class=\"line\">angular</span><br><span class=\"line\">    .module(<span class=\"string\">'app'</span>)</span><br><span class=\"line\">    .controller(<span class=\"string\">'SomeController'</span>, SomeController);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">SomeController</span>(<span class=\"params\"></span>) </span>&#123; &#125;</span><br></pre></td></tr></table></figure>\n</code></pre><h3 id=\"Getter-方法和Setter-方法之间的比较\"><a href=\"#Getter-方法和Setter-方法之间的比较\" class=\"headerlink\" title=\"Getter 方法和Setter 方法之间的比较\"></a>Getter 方法和Setter 方法之间的比较</h3><h6 id=\"Style-Y023\"><a href=\"#Style-Y023\" class=\"headerlink\" title=\"[Style Y023]\"></a>[Style <a href=\"#style-y023\">Y023</a>]</h6><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* recommended */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 创建一个模块</span></span><br><span class=\"line\">angular.module(<span class=\"string\">'app'</span>, []);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 从模块集合中取出这个模块</span></span><br><span class=\"line\">angular.module(<span class=\"string\">'app'</span>);</span><br></pre></td></tr></table></figure>\n<h3 id=\"命名-与-匿名方法之间的比较\"><a href=\"#命名-与-匿名方法之间的比较\" class=\"headerlink\" title=\"命名 与 匿名方法之间的比较\"></a>命名 与 匿名方法之间的比较</h3><h6 id=\"Style-Y024\"><a href=\"#Style-Y024\" class=\"headerlink\" title=\"[Style Y024]\"></a>[Style <a href=\"#style-y024\">Y024</a>]</h6><pre><code>- 在回调函数中尽量使用命名方法代替匿名方法，这样会使得代码的可读性更高，并且提升代码可复用的程度\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 避免使用 */</span></span><br><span class=\"line\">angular</span><br><span class=\"line\">    .module(<span class=\"string\">'app'</span>)</span><br><span class=\"line\">    .controller(<span class=\"string\">'DashboardController'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; &#125;)</span><br><span class=\"line\">    .factory(<span class=\"string\">'logger'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; &#125;);</span><br></pre></td></tr></table></figure>\n</code></pre>  <figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 推荐使用 */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// dashboard.js</span></span><br><span class=\"line\">angular</span><br><span class=\"line\">    .module(<span class=\"string\">'app'</span>)</span><br><span class=\"line\">    .controller(<span class=\"string\">'DashboardController'</span>, DashboardController);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">DashboardController</span>(<span class=\"params\"></span>) </span>&#123; &#125;</span><br></pre></td></tr></table></figure>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// logger.js</span></span><br><span class=\"line\">angular</span><br><span class=\"line\">    .module(<span class=\"string\">'app'</span>)</span><br><span class=\"line\">    .factory(<span class=\"string\">'logger'</span>, logger);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">logger</span>(<span class=\"params\"></span>) </span>&#123; &#125;</span><br></pre></td></tr></table></figure>\n<p><strong><a href=\"#table-of-contents\">Back to top</a></strong></p>\n<h2 id=\"控制器Controllers\"><a href=\"#控制器Controllers\" class=\"headerlink\" title=\"控制器Controllers\"></a>控制器Controllers</h2><h3 id=\"controllerAs-View-Syntax\"><a href=\"#controllerAs-View-Syntax\" class=\"headerlink\" title=\"controllerAs View Syntax\"></a>controllerAs View Syntax</h3><h6 id=\"Style-Y030\"><a href=\"#Style-Y030\" class=\"headerlink\" title=\"[Style Y030]\"></a>[Style <a href=\"#style-y030\">Y030</a>]</h6><pre><code>-使用[`controllerAs`](http://www.johnpapa.net/do-you-like-your-angular-controllers-with-or-without-sugar/) 语句替代`经典控制器$scope`语句\n    1.控制器构造、新建的时候回提供一个简单的实例，而`controllerAs`语句相比`传统$scope 语句`更接近Javascript原声方法\n    1.它会在视图中使用一个虚拟的对象绑定（例如 使用`customer.name` 代替 `name`）,更加贴近上下文关系，\n    增加刻度性，避免引用冲突问题\n    1.帮助避免在视图嵌套控制器中使用`$parent`\n\n    <figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- avoid --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">ng-controller</span>=<span class=\"string\">\"CustomerController\"</span>&gt;</span></span><br><span class=\"line\">    &#123;&#123; name &#125;&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n  <figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- recommended --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">ng-controller</span>=<span class=\"string\">\"CustomerController as customer\"</span>&gt;</span></span><br><span class=\"line\">    &#123;&#123; customer.name &#125;&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</code></pre><h3 id=\"controllerAs-控制器语句\"><a href=\"#controllerAs-控制器语句\" class=\"headerlink\" title=\"controllerAs 控制器语句\"></a>controllerAs 控制器语句</h3><h6 id=\"Style-Y031\"><a href=\"#Style-Y031\" class=\"headerlink\" title=\"[Style Y031]\"></a>[Style <a href=\"#style-y031\">Y031</a>]</h6><pre><code>- 使用`controllerAs`语句替代`传统controller中的$scope`\n\n- `controllerAs`语句在Controller内部使用`this`将数据绑定在`$scope`上\n`controllerAs` 是`$scope`语法糖。你依然可以使用`$scope`方法.\n\n*Why?*:`controllerAs`语句是`$scope`基础上的一种语法糖，你可以继续使用`$scope`绑定变量和方法。\n\n*Why?*:帮助避免在控制器中使用`$scope`方法，用其他的方式实现或者将他们移动到工厂方法中，并在控制器中引用.控制器应仅在需要的时候使用`$scope`，再实例中，当我们使用[`$emit`](https://docs.angularjs.org/api/ng/type/$rootScope.Scope#$emit), [`$broadcast`](https://docs.angularjs.org/api/ng/type/$rootScope.Scope#$broadcast) 或者 [`$on`](https://docs.angularjs.org/api/ng/type/$rootScope.Scope#$on). 一个变量或者声明一个事件\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 避免使用 */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">CustomerController</span>(<span class=\"params\">$scope</span>)</span>&#123;</span><br><span class=\"line\">\t$scope.name = &#123;&#125;;</span><br><span class=\"line\">\t$scope.sendMessage = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 推荐 */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">CustomerController</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.name = &#123;&#125;;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.sendMessage = <span class=\"function\"><span class=\"keyword\">function</span> </span>&#123;&#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</code></pre><h3 id=\"controllerAs-和-VM\"><a href=\"#controllerAs-和-VM\" class=\"headerlink\" title=\"controllerAs 和 VM\"></a>controllerAs 和 VM</h3><h6 id=\"Style-Y032\"><a href=\"#Style-Y032\" class=\"headerlink\" title=\"[Style Y032]\"></a>[Style <a href=\"#style-y032\">Y032</a>]</h6><pre><code>- 当使用`controllerAs`语法的时候，捕捉一个变量替代`this`，选择统一的变量名`vm`，代表 ViewModel。\n\n*Why?*：`this` 关键字是作为上下文对象，当使用控制器内部的方法有可能会改变它的作用域，捕捉上下文中的`this`避免遇到这种问题\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 错误的示例 */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">CustomerController</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.name = &#123;&#125;;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.sendMessage = &#123;&#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 推荐的方式 */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">CustomerController</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> vm = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">\t\tvm.name = &#123;&#125;;</span><br><span class=\"line\">\t\tvm.sendMessage = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</code></pre><p>注意:你通过在代码上添加注释避免任何的<a href=\"http://jshint.com/\" target=\"_blank\" rel=\"external\">jshint</a>警告。但是，这不需要将方法使用大写命名，这只是个对于构造方法的惯例。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* jshint validthis : true */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> vm = <span class=\"keyword\">this</span>;</span><br></pre></td></tr></table></figure>\n<p>注意:当在控制器中使用<code>controller as</code>创建一个监听时，你可以监听<code>vm.*</code><br>(创建监听的时候需要小心监听导致的更多的负载)</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">ng-model</span> = <span class=\"string\">\"vm.tite\"</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">SomeController</span>(<span class=\"params\">$scope,$log</span>)</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> vm = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">\t\tvm.title = <span class=\"string\">'Some Title'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t$scope.watch(<span class=\"string\">'vm.title'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t\t\t\t$log.info(<span class=\"string\">'vm.title was %s'</span>,original);</span><br><span class=\"line\">\t\t&#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>注意:当基于一个庞大的代码库工作时，使用更多的描述性命名可以帮助简化的认知负荷和搜素，避免坑长的名字和繁琐的输入。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 避免使用 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">ng-model</span>=<span class=\"string\">\"customerProductItemVm.title\"</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 推荐 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">ng-model</span>=<span class=\"string\">\"productVm.title\"</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"将绑定成员提取到首位\"><a href=\"#将绑定成员提取到首位\" class=\"headerlink\" title=\"将绑定成员提取到首位\"></a>将绑定成员提取到首位</h3><pre><code>- 将需要绑定的成员按照字母顺序放在控制器的上方，并且不要扩散到控制器代码\n\n*Why?*:将需要绑定的成员防止在首位可以提升代码的可读性，并且帮你快速识别这个控制器需要绑定的成员都有哪些\n\n*Why?*:设置匿名行内函数当然可以使得代码简单，但是当哪些方法体多余一行代码的时候，他们会很大程序上降低代码可读性。将方法定义在绑定成员的下方（哪些方法会被提升）将实现细节移动到下方，保持绑定成员在上方，使代码可读性更好。\n</code></pre><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 避免 */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">SessionsController</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> vm = <span class=\"keyword\">this</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\tvm.gotoSession = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">\tvm.refresh = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 推荐 */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">SessionsController</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> vm = <span class=\"keyword\">this</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\tvm.gotoSession = gotoSession;</span><br><span class=\"line\">\tvm.refresh = refresh;</span><br><span class=\"line\">\tvm.search = search;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">gotoSession</span>(<span class=\"params\"></span>)</span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">refresh</span>(<span class=\"params\"></span>)</span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">search</span>(<span class=\"params\"></span>)</span>&#123;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<pre><code>![Controller Using &quot;Above the Fold&quot;](https://raw.githubusercontent.com/johnpapa/angular-styleguide/master/a1/assets/above-the-fold-1.png)\n</code></pre><p>注意：如果这个方法的代码只有一行可以将它保持在上方，这样并不影响可读性。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 避免 */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">SessionController</span>(<span class=\"params\">data</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> vm = <span class=\"keyword\">this</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\tvm.gotoSession = gotoSession;</span><br><span class=\"line\"></span><br><span class=\"line\">\tvm.refresh = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">/**</span><br><span class=\"line\">\t\t * lines</span><br><span class=\"line\">\t\t * of</span><br><span class=\"line\">\t\t * code</span><br><span class=\"line\">\t\t * affects</span><br><span class=\"line\">\t\t * readabibity</span><br><span class=\"line\">\t\t*/</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tvm.search = search;</span><br><span class=\"line\">\tvm.sessions = [];</span><br><span class=\"line\">\tvm.title = <span class=\"string\">'Sessions'</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 推荐方式 */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">SessionsController</span>(<span class=\"params\">sessionDataService</span>) </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> vm = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">\t\tvm.gotoSession = gotoSession;</span><br><span class=\"line\">\t\tvm.refresh = sessionDataService.refresh; <span class=\"comment\">// 1 liner is OK</span></span><br><span class=\"line\">\t\tvm.search = search;</span><br><span class=\"line\">\t\tvm.sessions = [];</span><br><span class=\"line\">\t\tvm.title = <span class=\"string\">'Sessions'</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"通过方法定义隐藏实现\"><a href=\"#通过方法定义隐藏实现\" class=\"headerlink\" title=\"通过方法定义隐藏实现\"></a>通过方法定义隐藏实现</h3><h6 id=\"Style-Y034\"><a href=\"#Style-Y034\" class=\"headerlink\" title=\"[Style Y034]\"></a>[Style <a href=\"#style-y034\">Y034</a>]</h6><pre><code>- 使用方法定义隐藏方法实现细节。保持你的邦定成员在上方，当你需要在一个控制器中绑定一个方法的时候，它指向出现在这个文件中的一个函数声明。这是直接绑定部分成员，更多细节详见[这篇文章](http://www.johnpapa.net/angular-function-declarations-function-expressions-and-readable-code/)\n</code></pre><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 避免使用 */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">AvengersController</span>(<span class=\"params\">avengersService,logger</span>)</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> vm = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">\t\tvm.avengers = [];</span><br><span class=\"line\">\t\tvm.title = <span class=\"string\">'Avengers'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> activate = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> getAvengers().then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t\t\t\t\t\tlogger.info(<span class=\"string\">'Activated Avengers View'</span>);</span><br><span class=\"line\">\t\t\t\t&#125;)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> getAvengers = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> avengersService.getAvengers().then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>)</span>&#123;</span><br><span class=\"line\">\t\t\t\t\t\tvm.avengers = data;</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">return</span> vm.avengers;</span><br><span class=\"line\">\t\t\t\t&#125;);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tvm.getAvengers = getAvengers;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tactivate();</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">注意:在上面的示例中重要的东西都很分散。下面的代码中，注意重要的东西都在上方</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">``</span><span class=\"string\">`javascript</span><br><span class=\"line\">/* 推荐</span><br><span class=\"line\">使用方法定义，绑定成员定义在上方</span><br><span class=\"line\">*/</span><br><span class=\"line\"></span><br><span class=\"line\">function AvengersController(avengerService,logger)&#123;</span><br><span class=\"line\">\t\tvar vm = this;</span><br><span class=\"line\">\t\tvm.avengers = [];</span><br><span class=\"line\">\t\tvm.getAvengers = getAvengers;</span><br><span class=\"line\">\t\tvm.title = '';</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tactive();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tfunction activate()&#123;</span><br><span class=\"line\">\t\t\t\treturn getAvengers().then(function()&#123;</span><br><span class=\"line\">\t\t\t\t\t\tlogger.info('Activated Avengers View');</span><br><span class=\"line\">\t\t\t\t&#125;)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tfunction geetAvengers()&#123;</span><br><span class=\"line\">\t\t\t\treturn avengersService.getAvengers().then(function(data)&#123;</span><br><span class=\"line\">\t\t\t\t\t\tvm.avengers = data;</span><br><span class=\"line\">\t\t\t\t\t\treturn vm.avengers;</span><br><span class=\"line\">\t\t\t\t&#125;);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">&#125;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"将控制器移动到服务-Service-中\"><a href=\"#将控制器移动到服务-Service-中\" class=\"headerlink\" title=\"将控制器移动到服务(Service)中\"></a>将控制器移动到服务(Service)中</h3><h6 id=\"Style-Y035\"><a href=\"#Style-Y035\" class=\"headerlink\" title=\"[Style Y035]\"></a>[Style <a href=\"#style-y035\">Y035</a>]</h6><pre><code>- 将控制器中的逻辑移动到服务器或者工厂方法中\n</code></pre><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* avoid */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">OrderController</span>(<span class=\"params\">$http, $q, config, userInfo</span>) </span>&#123;</span><br><span class=\"line\">\t <span class=\"keyword\">var</span> vm = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">\t vm.checkCredit = checkCredit;</span><br><span class=\"line\">\t vm.isCreditOk;</span><br><span class=\"line\">\t vm.total = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">checkCredit</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t\t\t <span class=\"keyword\">var</span> settings = &#123;&#125;;</span><br><span class=\"line\">\t\t\t <span class=\"comment\">// Get the credit service base URL from config</span></span><br><span class=\"line\">\t\t\t <span class=\"comment\">// Set credit service required headers</span></span><br><span class=\"line\">\t\t\t <span class=\"comment\">// Prepare URL query string or data object with request data</span></span><br><span class=\"line\">\t\t\t <span class=\"comment\">// Add user-identifying info so service gets the right credit limit for this user.</span></span><br><span class=\"line\">\t\t\t <span class=\"comment\">// Use JSONP for this browser if it doesn't support CORS</span></span><br><span class=\"line\">\t\t\t <span class=\"keyword\">return</span> $http.get(settings)</span><br><span class=\"line\">\t\t\t\t\t .then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>) </span>&#123;</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"comment\">// Unpack JSON data in the response object</span></span><br><span class=\"line\">\t\t\t\t\t\t\t<span class=\"comment\">// to find maxRemainingAmount</span></span><br><span class=\"line\">\t\t\t\t\t\t\tvm.isCreditOk = vm.total &lt;= maxRemainingAmount</span><br><span class=\"line\">\t\t\t\t\t &#125;)</span><br><span class=\"line\">\t\t\t\t\t .catch(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">error</span>) </span>&#123;</span><br><span class=\"line\">\t\t\t\t\t\t\t<span class=\"comment\">// Interpret error</span></span><br><span class=\"line\">\t\t\t\t\t\t\t<span class=\"comment\">// Cope w/ timeout? retry? try alternate service?</span></span><br><span class=\"line\">\t\t\t\t\t\t\t<span class=\"comment\">// Re-reject with appropriate error for a user to see</span></span><br><span class=\"line\">\t\t\t\t\t &#125;);</span><br><span class=\"line\">\t &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 推荐 */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">OrderController</span>(<span class=\"params\">creditService</span>)</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> vm = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">\t\tvm.checkCredit = checkCredit;</span><br><span class=\"line\">\t\tvm.isCreditOk;</span><br><span class=\"line\">\t\tvm.total = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">checkCredit</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> creditService.isOrderTotalOk(vm.total)</span><br><span class=\"line\">\t\t\t\t\t.then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">isOk</span>)</span>&#123; vm.isCreditOk = ok; &#125;)</span><br><span class=\"line\">\t\t\t\t\t.catch(showError);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"使控制器更专注\"><a href=\"#使控制器更专注\" class=\"headerlink\" title=\"使控制器更专注\"></a>使控制器更专注</h3><h6 id=\"Style-Y037\"><a href=\"#Style-Y037\" class=\"headerlink\" title=\"[Style Y037]\"></a>[Style <a href=\"#style-y037\">Y037</a>]</h6><pre><code>- 为一个视图定义一个控制器，不要试图在其他视图中复用控制器，而是将可以复用的逻辑转移到工厂中，保持控制器的简单并专注与当前视图。\n\n*Why?*: 在很多的视图上复用控制器是脆弱的，端对端（end-to-end）测试需要保证访问一个复杂的应用时的稳定性\n</code></pre><h3 id=\"分配控制器\"><a href=\"#分配控制器\" class=\"headerlink\" title=\"分配控制器\"></a>分配控制器</h3><h6 id=\"Style-Y038\"><a href=\"#Style-Y038\" class=\"headerlink\" title=\"[Style Y038]\"></a>[Style <a href=\"#style-y038\">Y038</a>]</h6><pre><code>- 当一个控制器必须搭配一个视图并且其他组件需要复用其他的控制器或视图，在它的路由中单独定义控制器。\n\n注意: 如果视图加载依赖其他视图，这意味着另外的一种途径，尝试使用`ng-controller=&quot;Avengers as vm&quot;` 语句.\n</code></pre>","excerpt":"","more":"<p>#Angular 1.x 编码规则</p>\n<p>##Angular 团队支持<br>&lt;非常感谢Angular团队领导Igor Minar,检查审视，贡献必要的资料</p>\n<p>##目录<br>    1.<a href=\"#single-responsibility\">单一职责</a><br>    1.<a href=\"#iife\">IIFE</a><br>    1.<a href=\"#modules\">Modules</a><br>    1.<a href=\"#controllers\">Controllers</a><br>    1.<a href=\"#services\">Services</a><br>    1.<a href=\"#factories\">Factories</a><br>    1.<a href=\"#dataservices\">数据服务</a><br>    1.<a href=\"#directives\">Directives</a><br>    1.<a href=\"#promises\">Promises解决方案</a><br>    1.<a href=\"#manualdi\">手动依赖注入</a><br>    1.<a href=\"#minification-and-annotation\">压缩和注解</a><br>    1.<a href=\"#exception-handling\">异常处理</a><br>    1.<a href=\"#naming\">命名规则</a><br>    1.<a href=\"#application-structure-lift-principle\">应用结构优化准则</a><br>    1.<a href=\"#application-structure\">应用结构</a><br>    1.<a href=\"#modularity\">模块化</a><br>    1.<a href=\"#startup-logic\">启动</a><br>    1.<a href=\"#angular-wrapper-services\">Angular $服务包装</a><br>    1.<a href=\"#testing\">测试</a><br>    1.<a href=\"#animations\">动画</a><br>    1.<a href=\"#comments\">评论</a><br>    1.<a href=\"#js-hint\">JSHint</a><br>    1.<a href=\"#jscs\">JSCS</a><br>    1.<a href=\"#constants\">常量</a><br>    1.<a href=\"#file-templates-and-snippets\">文件模板和代码片段</a><br>    1.<a href=\"#routing\">路由</a><br>    1.<a href=\"#task-automation\">自动化任务</a><br>    1.<a href=\"#filter\">Filter过滤器</a><br>    1.<a href=\"#angular-docs\">Angular 文档</a></p>\n<h2 id=\"单一职责\"><a href=\"#单一职责\" class=\"headerlink\" title=\"单一职责\"></a>单一职责</h2><h3 id=\"规则1\"><a href=\"#规则1\" class=\"headerlink\" title=\"规则1\"></a>规则1</h3><h5 id=\"Style-Y001\"><a href=\"#Style-Y001\" class=\"headerlink\" title=\"[Style Y001]\"></a>[Style <a href=\"#style-y001\">Y001</a>]</h5><pre><code>- 每个文件仅包含一个组件，并且使其少于400行代码，它的好处在于\n    1.对于测试来说更加容易\n    1.使得代码可读性更强，更好维护，避免团队在源代码控制方面的问题\n    1.可以避免 多个组件在共享变量，创建不必要的闭包，或者不必要的耦合和依赖 时隐藏的错误\n</code></pre><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*不规范示例*/</span></span><br><span class=\"line\">angular</span><br><span class=\"line\">\t.module(<span class=\"string\">'app'</span>,[<span class=\"string\">'ngRoute'</span>])</span><br><span class=\"line\">\t.controller(<span class=\"string\">'SomController'</span>,SomeController)</span><br><span class=\"line\">\t.factory(<span class=\"string\">'SomeFactory'</span>,SomeFactory);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">SomeController</span>(<span class=\"params\"></span>)</span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">SomeFactory</span>(<span class=\"params\"></span>)</span>&#123;&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*推荐*/</span></span><br><span class=\"line\"><span class=\"comment\">//app.module.js</span></span><br><span class=\"line\">angular</span><br><span class=\"line\">\t.module(<span class=\"string\">'app'</span>,[<span class=\"string\">'ngRoute'</span>]);</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*some.controller.js*/</span></span><br><span class=\"line\">angular</span><br><span class=\"line\">\t.module(<span class=\"string\">'app'</span>)</span><br><span class=\"line\">\t.controller(<span class=\"string\">'SomeController'</span>,SomeController);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">SomeController</span>(<span class=\"params\"></span>) </span>&#123; &#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* recommended */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// some.factory.js</span></span><br><span class=\"line\">angular</span><br><span class=\"line\">\t\t.module(<span class=\"string\">'app'</span>)</span><br><span class=\"line\">\t\t.factory(<span class=\"string\">'someFactory'</span>, someFactory);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">someFactory</span>(<span class=\"params\"></span>) </span>&#123; &#125;</span><br></pre></td></tr></table></figure>\n<p><strong><a href=\"table-of-contents\">返回顶部</a></strong></p>\n<h2 id=\"IIFE-立即执行方法-Immediately-Invoked-Function-Expression-IIFE\"><a href=\"#IIFE-立即执行方法-Immediately-Invoked-Function-Expression-IIFE\" class=\"headerlink\" title=\"IIFE (立即执行方法 Immediately Invoked Function Expression(IIFE)).\"></a>IIFE (立即执行方法 Immediately Invoked Function Expression(IIFE)).</h2><h3 id=\"Javascript-Scopes\"><a href=\"#Javascript-Scopes\" class=\"headerlink\" title=\"Javascript Scopes\"></a>Javascript Scopes</h3><h6 id=\"Style-Y010\"><a href=\"#Style-Y010\" class=\"headerlink\" title=\"[Style Y010]\"></a>[Style <a href=\"#style-y010\">Y010</a>]</h6><pre><code>- 将Angular组件包含在IIFE代码块中，这样的优势在于\n1.一个IIFE将变量从全局作用域中移出，这会有效的方式变量和方法之间的命名冲突\n1.当你将你的代码从开发板 压缩和打包 到生产服务器上的时候，会有很多全局作用域下的变量发生冲突，\n这时IIFE就可以有效的隔离这些变量\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 不规范 */</span></span><br><span class=\"line\"><span class=\"comment\">// logger.js</span></span><br><span class=\"line\">angular</span><br><span class=\"line\">    .module(<span class=\"string\">'app'</span>)</span><br><span class=\"line\">    .factory(<span class=\"string\">'logger'</span>, logger);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// logger 方法已经添加到了全局作用域中</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">logger</span>(<span class=\"params\"></span>) </span>&#123; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// storage.js</span></span><br><span class=\"line\">angular</span><br><span class=\"line\">    .module(<span class=\"string\">'app'</span>)</span><br><span class=\"line\">    .factory(<span class=\"string\">'storage'</span>, storage);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// storage 方法已经添加到了全局作用域中</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">storage</span>(<span class=\"params\"></span>) </span>&#123; &#125;</span><br></pre></td></tr></table></figure>\n</code></pre>  <figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span><br><span class=\"line\"> * 推荐</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * 下面代码中没有全局作用域变量和方法</span><br><span class=\"line\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// logger.js</span></span><br><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"><span class=\"meta\">    'use strict'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    angular</span><br><span class=\"line\">        .module(<span class=\"string\">'app'</span>)</span><br><span class=\"line\">        .factory(<span class=\"string\">'logger'</span>, logger);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">logger</span>(<span class=\"params\"></span>) </span>&#123; &#125;</span><br><span class=\"line\">&#125;)();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// storage.js</span></span><br><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"><span class=\"meta\">    'use strict'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    angular</span><br><span class=\"line\">        .module(<span class=\"string\">'app'</span>)</span><br><span class=\"line\">        .factory(<span class=\"string\">'storage'</span>, storage);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">storage</span>(<span class=\"params\"></span>) </span>&#123; &#125;</span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure>\n<pre><code>**[返回顶部](#table-of-contents)**\n</code></pre><h2 id=\"Modules\"><a href=\"#Modules\" class=\"headerlink\" title=\"Modules\"></a>Modules</h2><h3 id=\"避免命名冲突\"><a href=\"#避免命名冲突\" class=\"headerlink\" title=\"避免命名冲突\"></a>避免命名冲突</h3><h6 id=\"Style-Y020\"><a href=\"#Style-Y020\" class=\"headerlink\" title=\"[Style Y020]\"></a>[Style <a href=\"#style-y020\">Y020</a>]</h6><pre><code>- 使用统一的子模块命名规则可以帮助避免模块命名冲突。分隔符帮助定义模块和他们的子模块之间的层次结构\n例如`app`可以作为父模块名，`app.dashboard`和`app.users`模块作为依赖于`app`模块的子模块。\n</code></pre><h3 id=\"定义-or-设置\"><a href=\"#定义-or-设置\" class=\"headerlink\" title=\"定义(or 设置)\"></a>定义(or 设置)</h3><h6 id=\"Style-Y021\"><a href=\"#Style-Y021\" class=\"headerlink\" title=\"[Style Y021]\"></a>[Style <a href=\"#style-y021\">Y021</a>]</h6><pre><code>- 可以使用模块的setter语法定义模块，而不要使用变量定义模块。\n        在单一组件文件中，使用到模块变量的情况会变得非常少。\n        <figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 避免使用 */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> app = angular.module(<span class=\"string\">'app'</span>, [</span><br><span class=\"line\">    <span class=\"string\">'ngAnimate'</span>,</span><br><span class=\"line\">    <span class=\"string\">'ngRoute'</span>,</span><br><span class=\"line\">    <span class=\"string\">'app.shared'</span>,</span><br><span class=\"line\">    <span class=\"string\">'app.dashboard'</span></span><br><span class=\"line\">]);</span><br></pre></td></tr></table></figure>\n\n      <figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 推荐方式 */</span></span><br><span class=\"line\">angular</span><br><span class=\"line\">    .module(<span class=\"string\">'app'</span>, [</span><br><span class=\"line\">        <span class=\"string\">'ngAnimate'</span>,</span><br><span class=\"line\">        <span class=\"string\">'ngRoute'</span>,</span><br><span class=\"line\">        <span class=\"string\">'app.shared'</span>,</span><br><span class=\"line\">        <span class=\"string\">'app.dashboard'</span></span><br><span class=\"line\">    ]);</span><br></pre></td></tr></table></figure>\n</code></pre><h3 id=\"Getters\"><a href=\"#Getters\" class=\"headerlink\" title=\"Getters\"></a>Getters</h3><h6 id=\"Style-Y022\"><a href=\"#Style-Y022\" class=\"headerlink\" title=\"[Style Y022]\"></a>[Style <a href=\"#style-y022\">Y022</a>]</h6><pre><code>- 当使用一个模块的时候，可以使用getter链而非变量装载。\n    这样可以使项目代码的可读性更高并且避免变量冲突\n\n    <figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 避免使用 */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> app = angular.module(<span class=\"string\">'app'</span>);</span><br><span class=\"line\">app.controller(<span class=\"string\">'SomeController'</span>, SomeController);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">SomeController</span>(<span class=\"params\"></span>) </span>&#123; &#125;</span><br></pre></td></tr></table></figure>\n\n  <figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 推荐使用 */</span></span><br><span class=\"line\">angular</span><br><span class=\"line\">    .module(<span class=\"string\">'app'</span>)</span><br><span class=\"line\">    .controller(<span class=\"string\">'SomeController'</span>, SomeController);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">SomeController</span>(<span class=\"params\"></span>) </span>&#123; &#125;</span><br></pre></td></tr></table></figure>\n</code></pre><h3 id=\"Getter-方法和Setter-方法之间的比较\"><a href=\"#Getter-方法和Setter-方法之间的比较\" class=\"headerlink\" title=\"Getter 方法和Setter 方法之间的比较\"></a>Getter 方法和Setter 方法之间的比较</h3><h6 id=\"Style-Y023\"><a href=\"#Style-Y023\" class=\"headerlink\" title=\"[Style Y023]\"></a>[Style <a href=\"#style-y023\">Y023</a>]</h6><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* recommended */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 创建一个模块</span></span><br><span class=\"line\">angular.module(<span class=\"string\">'app'</span>, []);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 从模块集合中取出这个模块</span></span><br><span class=\"line\">angular.module(<span class=\"string\">'app'</span>);</span><br></pre></td></tr></table></figure>\n<h3 id=\"命名-与-匿名方法之间的比较\"><a href=\"#命名-与-匿名方法之间的比较\" class=\"headerlink\" title=\"命名 与 匿名方法之间的比较\"></a>命名 与 匿名方法之间的比较</h3><h6 id=\"Style-Y024\"><a href=\"#Style-Y024\" class=\"headerlink\" title=\"[Style Y024]\"></a>[Style <a href=\"#style-y024\">Y024</a>]</h6><pre><code>- 在回调函数中尽量使用命名方法代替匿名方法，这样会使得代码的可读性更高，并且提升代码可复用的程度\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 避免使用 */</span></span><br><span class=\"line\">angular</span><br><span class=\"line\">    .module(<span class=\"string\">'app'</span>)</span><br><span class=\"line\">    .controller(<span class=\"string\">'DashboardController'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; &#125;)</span><br><span class=\"line\">    .factory(<span class=\"string\">'logger'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; &#125;);</span><br></pre></td></tr></table></figure>\n</code></pre>  <figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 推荐使用 */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// dashboard.js</span></span><br><span class=\"line\">angular</span><br><span class=\"line\">    .module(<span class=\"string\">'app'</span>)</span><br><span class=\"line\">    .controller(<span class=\"string\">'DashboardController'</span>, DashboardController);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">DashboardController</span>(<span class=\"params\"></span>) </span>&#123; &#125;</span><br></pre></td></tr></table></figure>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// logger.js</span></span><br><span class=\"line\">angular</span><br><span class=\"line\">    .module(<span class=\"string\">'app'</span>)</span><br><span class=\"line\">    .factory(<span class=\"string\">'logger'</span>, logger);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">logger</span>(<span class=\"params\"></span>) </span>&#123; &#125;</span><br></pre></td></tr></table></figure>\n<p><strong><a href=\"#table-of-contents\">Back to top</a></strong></p>\n<h2 id=\"控制器Controllers\"><a href=\"#控制器Controllers\" class=\"headerlink\" title=\"控制器Controllers\"></a>控制器Controllers</h2><h3 id=\"controllerAs-View-Syntax\"><a href=\"#controllerAs-View-Syntax\" class=\"headerlink\" title=\"controllerAs View Syntax\"></a>controllerAs View Syntax</h3><h6 id=\"Style-Y030\"><a href=\"#Style-Y030\" class=\"headerlink\" title=\"[Style Y030]\"></a>[Style <a href=\"#style-y030\">Y030</a>]</h6><pre><code>-使用[`controllerAs`](http://www.johnpapa.net/do-you-like-your-angular-controllers-with-or-without-sugar/) 语句替代`经典控制器$scope`语句\n    1.控制器构造、新建的时候回提供一个简单的实例，而`controllerAs`语句相比`传统$scope 语句`更接近Javascript原声方法\n    1.它会在视图中使用一个虚拟的对象绑定（例如 使用`customer.name` 代替 `name`）,更加贴近上下文关系，\n    增加刻度性，避免引用冲突问题\n    1.帮助避免在视图嵌套控制器中使用`$parent`\n\n    <figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- avoid --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">ng-controller</span>=<span class=\"string\">\"CustomerController\"</span>&gt;</span></span><br><span class=\"line\">    &#123;&#123; name &#125;&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n  <figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- recommended --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">ng-controller</span>=<span class=\"string\">\"CustomerController as customer\"</span>&gt;</span></span><br><span class=\"line\">    &#123;&#123; customer.name &#125;&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</code></pre><h3 id=\"controllerAs-控制器语句\"><a href=\"#controllerAs-控制器语句\" class=\"headerlink\" title=\"controllerAs 控制器语句\"></a>controllerAs 控制器语句</h3><h6 id=\"Style-Y031\"><a href=\"#Style-Y031\" class=\"headerlink\" title=\"[Style Y031]\"></a>[Style <a href=\"#style-y031\">Y031</a>]</h6><pre><code>- 使用`controllerAs`语句替代`传统controller中的$scope`\n\n- `controllerAs`语句在Controller内部使用`this`将数据绑定在`$scope`上\n`controllerAs` 是`$scope`语法糖。你依然可以使用`$scope`方法.\n\n*Why?*:`controllerAs`语句是`$scope`基础上的一种语法糖，你可以继续使用`$scope`绑定变量和方法。\n\n*Why?*:帮助避免在控制器中使用`$scope`方法，用其他的方式实现或者将他们移动到工厂方法中，并在控制器中引用.控制器应仅在需要的时候使用`$scope`，再实例中，当我们使用[`$emit`](https://docs.angularjs.org/api/ng/type/$rootScope.Scope#$emit), [`$broadcast`](https://docs.angularjs.org/api/ng/type/$rootScope.Scope#$broadcast) 或者 [`$on`](https://docs.angularjs.org/api/ng/type/$rootScope.Scope#$on). 一个变量或者声明一个事件\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 避免使用 */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">CustomerController</span>(<span class=\"params\">$scope</span>)</span>&#123;</span><br><span class=\"line\">\t$scope.name = &#123;&#125;;</span><br><span class=\"line\">\t$scope.sendMessage = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 推荐 */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">CustomerController</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.name = &#123;&#125;;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.sendMessage = <span class=\"function\"><span class=\"keyword\">function</span> </span>&#123;&#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</code></pre><h3 id=\"controllerAs-和-VM\"><a href=\"#controllerAs-和-VM\" class=\"headerlink\" title=\"controllerAs 和 VM\"></a>controllerAs 和 VM</h3><h6 id=\"Style-Y032\"><a href=\"#Style-Y032\" class=\"headerlink\" title=\"[Style Y032]\"></a>[Style <a href=\"#style-y032\">Y032</a>]</h6><pre><code>- 当使用`controllerAs`语法的时候，捕捉一个变量替代`this`，选择统一的变量名`vm`，代表 ViewModel。\n\n*Why?*：`this` 关键字是作为上下文对象，当使用控制器内部的方法有可能会改变它的作用域，捕捉上下文中的`this`避免遇到这种问题\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 错误的示例 */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">CustomerController</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.name = &#123;&#125;;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.sendMessage = &#123;&#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 推荐的方式 */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">CustomerController</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> vm = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">\t\tvm.name = &#123;&#125;;</span><br><span class=\"line\">\t\tvm.sendMessage = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</code></pre><p>注意:你通过在代码上添加注释避免任何的<a href=\"http://jshint.com/\">jshint</a>警告。但是，这不需要将方法使用大写命名，这只是个对于构造方法的惯例。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* jshint validthis : true */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> vm = <span class=\"keyword\">this</span>;</span><br></pre></td></tr></table></figure>\n<p>注意:当在控制器中使用<code>controller as</code>创建一个监听时，你可以监听<code>vm.*</code><br>(创建监听的时候需要小心监听导致的更多的负载)</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">ng-model</span> = <span class=\"string\">\"vm.tite\"</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">SomeController</span>(<span class=\"params\">$scope,$log</span>)</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> vm = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">\t\tvm.title = <span class=\"string\">'Some Title'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t$scope.watch(<span class=\"string\">'vm.title'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t\t\t\t$log.info(<span class=\"string\">'vm.title was %s'</span>,original);</span><br><span class=\"line\">\t\t&#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>注意:当基于一个庞大的代码库工作时，使用更多的描述性命名可以帮助简化的认知负荷和搜素，避免坑长的名字和繁琐的输入。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 避免使用 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">ng-model</span>=<span class=\"string\">\"customerProductItemVm.title\"</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 推荐 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">ng-model</span>=<span class=\"string\">\"productVm.title\"</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"将绑定成员提取到首位\"><a href=\"#将绑定成员提取到首位\" class=\"headerlink\" title=\"将绑定成员提取到首位\"></a>将绑定成员提取到首位</h3><pre><code>- 将需要绑定的成员按照字母顺序放在控制器的上方，并且不要扩散到控制器代码\n\n*Why?*:将需要绑定的成员防止在首位可以提升代码的可读性，并且帮你快速识别这个控制器需要绑定的成员都有哪些\n\n*Why?*:设置匿名行内函数当然可以使得代码简单，但是当哪些方法体多余一行代码的时候，他们会很大程序上降低代码可读性。将方法定义在绑定成员的下方（哪些方法会被提升）将实现细节移动到下方，保持绑定成员在上方，使代码可读性更好。\n</code></pre><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 避免 */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">SessionsController</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> vm = <span class=\"keyword\">this</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\tvm.gotoSession = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">\tvm.refresh = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 推荐 */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">SessionsController</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> vm = <span class=\"keyword\">this</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\tvm.gotoSession = gotoSession;</span><br><span class=\"line\">\tvm.refresh = refresh;</span><br><span class=\"line\">\tvm.search = search;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">gotoSession</span>(<span class=\"params\"></span>)</span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">refresh</span>(<span class=\"params\"></span>)</span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">search</span>(<span class=\"params\"></span>)</span>&#123;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<pre><code>![Controller Using &quot;Above the Fold&quot;](https://raw.githubusercontent.com/johnpapa/angular-styleguide/master/a1/assets/above-the-fold-1.png)\n</code></pre><p>注意：如果这个方法的代码只有一行可以将它保持在上方，这样并不影响可读性。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 避免 */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">SessionController</span>(<span class=\"params\">data</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> vm = <span class=\"keyword\">this</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\tvm.gotoSession = gotoSession;</span><br><span class=\"line\"></span><br><span class=\"line\">\tvm.refresh = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">/**</span><br><span class=\"line\">\t\t * lines</span><br><span class=\"line\">\t\t * of</span><br><span class=\"line\">\t\t * code</span><br><span class=\"line\">\t\t * affects</span><br><span class=\"line\">\t\t * readabibity</span><br><span class=\"line\">\t\t*/</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tvm.search = search;</span><br><span class=\"line\">\tvm.sessions = [];</span><br><span class=\"line\">\tvm.title = <span class=\"string\">'Sessions'</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 推荐方式 */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">SessionsController</span>(<span class=\"params\">sessionDataService</span>) </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> vm = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">\t\tvm.gotoSession = gotoSession;</span><br><span class=\"line\">\t\tvm.refresh = sessionDataService.refresh; <span class=\"comment\">// 1 liner is OK</span></span><br><span class=\"line\">\t\tvm.search = search;</span><br><span class=\"line\">\t\tvm.sessions = [];</span><br><span class=\"line\">\t\tvm.title = <span class=\"string\">'Sessions'</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"通过方法定义隐藏实现\"><a href=\"#通过方法定义隐藏实现\" class=\"headerlink\" title=\"通过方法定义隐藏实现\"></a>通过方法定义隐藏实现</h3><h6 id=\"Style-Y034\"><a href=\"#Style-Y034\" class=\"headerlink\" title=\"[Style Y034]\"></a>[Style <a href=\"#style-y034\">Y034</a>]</h6><pre><code>- 使用方法定义隐藏方法实现细节。保持你的邦定成员在上方，当你需要在一个控制器中绑定一个方法的时候，它指向出现在这个文件中的一个函数声明。这是直接绑定部分成员，更多细节详见[这篇文章](http://www.johnpapa.net/angular-function-declarations-function-expressions-and-readable-code/)\n</code></pre><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 避免使用 */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">AvengersController</span>(<span class=\"params\">avengersService,logger</span>)</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> vm = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">\t\tvm.avengers = [];</span><br><span class=\"line\">\t\tvm.title = <span class=\"string\">'Avengers'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> activate = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> getAvengers().then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t\t\t\t\t\tlogger.info(<span class=\"string\">'Activated Avengers View'</span>);</span><br><span class=\"line\">\t\t\t\t&#125;)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> getAvengers = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> avengersService.getAvengers().then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>)</span>&#123;</span><br><span class=\"line\">\t\t\t\t\t\tvm.avengers = data;</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">return</span> vm.avengers;</span><br><span class=\"line\">\t\t\t\t&#125;);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tvm.getAvengers = getAvengers;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tactivate();</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">注意:在上面的示例中重要的东西都很分散。下面的代码中，注意重要的东西都在上方</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">``</span><span class=\"string\">`javascript</span><br><span class=\"line\">/* 推荐</span><br><span class=\"line\">使用方法定义，绑定成员定义在上方</span><br><span class=\"line\">*/</span><br><span class=\"line\"></span><br><span class=\"line\">function AvengersController(avengerService,logger)&#123;</span><br><span class=\"line\">\t\tvar vm = this;</span><br><span class=\"line\">\t\tvm.avengers = [];</span><br><span class=\"line\">\t\tvm.getAvengers = getAvengers;</span><br><span class=\"line\">\t\tvm.title = '';</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tactive();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tfunction activate()&#123;</span><br><span class=\"line\">\t\t\t\treturn getAvengers().then(function()&#123;</span><br><span class=\"line\">\t\t\t\t\t\tlogger.info('Activated Avengers View');</span><br><span class=\"line\">\t\t\t\t&#125;)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tfunction geetAvengers()&#123;</span><br><span class=\"line\">\t\t\t\treturn avengersService.getAvengers().then(function(data)&#123;</span><br><span class=\"line\">\t\t\t\t\t\tvm.avengers = data;</span><br><span class=\"line\">\t\t\t\t\t\treturn vm.avengers;</span><br><span class=\"line\">\t\t\t\t&#125;);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">&#125;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"将控制器移动到服务-Service-中\"><a href=\"#将控制器移动到服务-Service-中\" class=\"headerlink\" title=\"将控制器移动到服务(Service)中\"></a>将控制器移动到服务(Service)中</h3><h6 id=\"Style-Y035\"><a href=\"#Style-Y035\" class=\"headerlink\" title=\"[Style Y035]\"></a>[Style <a href=\"#style-y035\">Y035</a>]</h6><pre><code>- 将控制器中的逻辑移动到服务器或者工厂方法中\n</code></pre><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* avoid */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">OrderController</span>(<span class=\"params\">$http, $q, config, userInfo</span>) </span>&#123;</span><br><span class=\"line\">\t <span class=\"keyword\">var</span> vm = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">\t vm.checkCredit = checkCredit;</span><br><span class=\"line\">\t vm.isCreditOk;</span><br><span class=\"line\">\t vm.total = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">checkCredit</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t\t\t <span class=\"keyword\">var</span> settings = &#123;&#125;;</span><br><span class=\"line\">\t\t\t <span class=\"comment\">// Get the credit service base URL from config</span></span><br><span class=\"line\">\t\t\t <span class=\"comment\">// Set credit service required headers</span></span><br><span class=\"line\">\t\t\t <span class=\"comment\">// Prepare URL query string or data object with request data</span></span><br><span class=\"line\">\t\t\t <span class=\"comment\">// Add user-identifying info so service gets the right credit limit for this user.</span></span><br><span class=\"line\">\t\t\t <span class=\"comment\">// Use JSONP for this browser if it doesn't support CORS</span></span><br><span class=\"line\">\t\t\t <span class=\"keyword\">return</span> $http.get(settings)</span><br><span class=\"line\">\t\t\t\t\t .then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>) </span>&#123;</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"comment\">// Unpack JSON data in the response object</span></span><br><span class=\"line\">\t\t\t\t\t\t\t<span class=\"comment\">// to find maxRemainingAmount</span></span><br><span class=\"line\">\t\t\t\t\t\t\tvm.isCreditOk = vm.total &lt;= maxRemainingAmount</span><br><span class=\"line\">\t\t\t\t\t &#125;)</span><br><span class=\"line\">\t\t\t\t\t .catch(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">error</span>) </span>&#123;</span><br><span class=\"line\">\t\t\t\t\t\t\t<span class=\"comment\">// Interpret error</span></span><br><span class=\"line\">\t\t\t\t\t\t\t<span class=\"comment\">// Cope w/ timeout? retry? try alternate service?</span></span><br><span class=\"line\">\t\t\t\t\t\t\t<span class=\"comment\">// Re-reject with appropriate error for a user to see</span></span><br><span class=\"line\">\t\t\t\t\t &#125;);</span><br><span class=\"line\">\t &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 推荐 */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">OrderController</span>(<span class=\"params\">creditService</span>)</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> vm = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">\t\tvm.checkCredit = checkCredit;</span><br><span class=\"line\">\t\tvm.isCreditOk;</span><br><span class=\"line\">\t\tvm.total = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">checkCredit</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> creditService.isOrderTotalOk(vm.total)</span><br><span class=\"line\">\t\t\t\t\t.then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">isOk</span>)</span>&#123; vm.isCreditOk = ok; &#125;)</span><br><span class=\"line\">\t\t\t\t\t.catch(showError);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"使控制器更专注\"><a href=\"#使控制器更专注\" class=\"headerlink\" title=\"使控制器更专注\"></a>使控制器更专注</h3><h6 id=\"Style-Y037\"><a href=\"#Style-Y037\" class=\"headerlink\" title=\"[Style Y037]\"></a>[Style <a href=\"#style-y037\">Y037</a>]</h6><pre><code>- 为一个视图定义一个控制器，不要试图在其他视图中复用控制器，而是将可以复用的逻辑转移到工厂中，保持控制器的简单并专注与当前视图。\n\n*Why?*: 在很多的视图上复用控制器是脆弱的，端对端（end-to-end）测试需要保证访问一个复杂的应用时的稳定性\n</code></pre><h3 id=\"分配控制器\"><a href=\"#分配控制器\" class=\"headerlink\" title=\"分配控制器\"></a>分配控制器</h3><h6 id=\"Style-Y038\"><a href=\"#Style-Y038\" class=\"headerlink\" title=\"[Style Y038]\"></a>[Style <a href=\"#style-y038\">Y038</a>]</h6><pre><code>- 当一个控制器必须搭配一个视图并且其他组件需要复用其他的控制器或视图，在它的路由中单独定义控制器。\n\n注意: 如果视图加载依赖其他视图，这意味着另外的一种途径，尝试使用`ng-controller=&quot;Avengers as vm&quot;` 语句.\n</code></pre>"}],"PostAsset":[{"_id":"source/_posts/js-module-loader/post-bg-js-module.jpg","slug":"post-bg-js-module.jpg","post":"cipnd9728001hyww73sey00zd","modified":0,"renderable":0}],"PostCategory":[],"PostTag":[{"post_id":"cipnd97030001yww7np4wxa36","tag_id":"cipnd970q0003yww70sflf4tf","_id":"cipnd97160008yww7tg9iiuav"},{"post_id":"cipnd970n0002yww7t1nmaawf","tag_id":"cipnd97130006yww7bso0yybg","_id":"cipnd971g000gyww7pn2w2s1y"},{"post_id":"cipnd970n0002yww7t1nmaawf","tag_id":"cipnd971b000byww7vw5m2alf","_id":"cipnd971h000iyww7eju9pf87"},{"post_id":"cipnd970t0004yww7g8ee2fle","tag_id":"cipnd971e000eyww78c81o7ov","_id":"cipnd971j000myww7xprz2nh9"},{"post_id":"cipnd970t0004yww7g8ee2fle","tag_id":"cipnd971h000jyww7r483al0a","_id":"cipnd971j000nyww7imqpej3o"},{"post_id":"cipnd970x0005yww7m210h3gp","tag_id":"cipnd971j000lyww76gb50roc","_id":"cipnd971l000qyww7q3v9gtw1"},{"post_id":"cipnd970x0005yww7m210h3gp","tag_id":"cipnd971k000oyww7icvk7m5d","_id":"cipnd971l000ryww77ag56xmu"},{"post_id":"cipnd97130007yww7pvyxnntu","tag_id":"cipnd971k000pyww72mjh41u3","_id":"cipnd971m000tyww7vk77wsbj"},{"post_id":"cipnd97170009yww7paqwc1t1","tag_id":"cipnd971l000syww7uejvg2u6","_id":"cipnd971n000vyww70hp541x9"},{"post_id":"cipnd9719000ayww74xshduh8","tag_id":"cipnd97130006yww7bso0yybg","_id":"cipnd971o000xyww7mlmu46po"},{"post_id":"cipnd9719000ayww74xshduh8","tag_id":"cipnd971n000uyww7t9ddksmh","_id":"cipnd971o000yyww7txmhxckj"},{"post_id":"cipnd971c000cyww74lw9yr5c","tag_id":"cipnd971n000wyww731hd2mkw","_id":"cipnd971p0011yww7w6o2jc8o"},{"post_id":"cipnd971c000cyww74lw9yr5c","tag_id":"cipnd971o000zyww7ior4faph","_id":"cipnd971p0012yww794xc5gkk"},{"post_id":"cipnd971c000dyww7sp0khxug","tag_id":"cipnd97130006yww7bso0yybg","_id":"cipnd971r0014yww7s24eqn4k"},{"post_id":"cipnd971c000dyww7sp0khxug","tag_id":"cipnd971o0010yww7kln5sh5a","_id":"cipnd971r0015yww7m3nd7wd3"},{"post_id":"cipnd971f000fyww7wey4s0lf","tag_id":"cipnd971p0013yww7q0exbzjk","_id":"cipnd971t0018yww7eoeb2qoi"},{"post_id":"cipnd971f000fyww7wey4s0lf","tag_id":"cipnd971r0016yww727k3uo2r","_id":"cipnd971t0019yww7xvcke9nw"},{"post_id":"cipnd971g000hyww709wikuoa","tag_id":"cipnd971k000pyww72mjh41u3","_id":"cipnd971t001byww76f80x1xm"},{"post_id":"cipnd971i000kyww7laj1umq0","tag_id":"cipnd971n000wyww731hd2mkw","_id":"cipnd971u001dyww74mtz0y3t"},{"post_id":"cipnd971i000kyww7laj1umq0","tag_id":"cipnd971o000zyww7ior4faph","_id":"cipnd971u001eyww7c2m38b5x"},{"post_id":"cipnd9726001fyww71oef9mwj","tag_id":"cipnd97130006yww7bso0yybg","_id":"cipnd972f001lyww76xn8a4ee"},{"post_id":"cipnd9726001fyww71oef9mwj","tag_id":"cipnd972d001jyww75j7yrb3w","_id":"cipnd972k001myww7c8e0muq1"},{"post_id":"cipnd9728001hyww73sey00zd","tag_id":"cipnd97130006yww7bso0yybg","_id":"cipnd972l001nyww7qqzo7zeu"},{"post_id":"cipnd9728001hyww73sey00zd","tag_id":"cipnd972d001jyww75j7yrb3w","_id":"cipnd972l001oyww7gqc8tgg1"},{"post_id":"cipndaymc001pyww7ytqc1902","tag_id":"cipndaymg001qyww75kuw355s","_id":"cipndaymi001ryww7981n7yk6"}],"Tag":[{"name":"ES6","_id":"cipnd970q0003yww70sflf4tf"},{"name":"前端开发","_id":"cipnd97130006yww7bso0yybg"},{"name":"TypeScript","_id":"cipnd971b000byww7vw5m2alf"},{"name":"数据相关","_id":"cipnd971e000eyww78c81o7ov"},{"name":"Spark","_id":"cipnd971h000jyww7r483al0a"},{"name":"前端相关","_id":"cipnd971j000lyww76gb50roc"},{"name":"前端工具","_id":"cipnd971k000oyww7icvk7m5d"},{"name":"JQuery 插件","_id":"cipnd971k000pyww72mjh41u3"},{"name":"工具使用","_id":"cipnd971l000syww7uejvg2u6"},{"name":"CSS","_id":"cipnd971n000uyww7t9ddksmh"},{"name":"Java","_id":"cipnd971n000wyww731hd2mkw"},{"name":"推送","_id":"cipnd971o000zyww7ior4faph"},{"name":"Angular2","_id":"cipnd971o0010yww7kln5sh5a"},{"name":"数据","_id":"cipnd971p0013yww7q0exbzjk"},{"name":"Python","_id":"cipnd971r0016yww727k3uo2r"},{"name":"JavaScript","_id":"cipnd972d001jyww75j7yrb3w"},{"name":"Angular","_id":"cipndaymg001qyww75kuw355s"}]}}